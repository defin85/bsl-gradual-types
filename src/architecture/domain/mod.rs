//! Domain Layer - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
//!
//! –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–∏–ø–æ–≤ BSL
//! –ü—Ä–∏–Ω—Ü–∏–ø—ã: Single Responsibility, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏, —á–µ—Å—Ç–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å

use crate::domain::types::PrimitiveType;
use anyhow::Result;
use async_trait::async_trait;
use std::collections::HashMap;
use std::sync::Arc;
use tokio::sync::RwLock;
use tracing::{info, warn};

use crate::data::loaders::config_parser_guided_discovery::ConfigurationGuidedParser;
use crate::unified::data::stats::RepositoryStats;
use crate::unified::data::{RawTypeData, TypeRepository, TypeSource};
use crate::domain::types::{Certainty, ConcreteType, FacetKind, ResolutionResult, TypeResolution};
use crate::parsing::bsl::tree_sitter_adapter::TreeSitterAdapter;

/// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–∏–ø–æ–≤
///
/// –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∏–ø–∞–º–∏ BSL
pub struct TypeResolutionService {
    /// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–∞–Ω–Ω—ã—Ö (Data Layer)
    repository: Arc<dyn TypeRepository>,

    /// –†–µ–∑–æ–ª–≤–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    // –•—Ä–∞–Ω–∏–º —Ä–µ–∑–æ–ª–≤–µ—Ä—ã –∫–∞–∫ TypeResolverAny –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ downcast –≤ —Ç–µ—Å—Ç–∞—Ö
    resolvers: Vec<Box<dyn TypeResolverAny>>,

    /// –ö–µ—à —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    cache: Arc<RwLock<HashMap<String, CachedTypeResolution>>>,

    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
    metrics: Arc<RwLock<ResolutionMetrics>>,
}

/// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∏–ø–∞
#[derive(Debug, Clone)]
pub struct CachedTypeResolution {
    pub resolution: TypeResolution,
    pub created_at: std::time::Instant,
    pub access_count: u64,
    pub last_accessed: std::time::Instant,
}

/// –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
#[derive(Debug, Clone, Default)]
pub struct ResolutionMetrics {
    pub total_resolutions: u64,
    pub cache_hits: u64,
    pub cache_misses: u64,
    pub average_resolution_time_ms: f64,
    pub successful_resolutions: u64,
    pub failed_resolutions: u64,
}

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–∏–ø–æ–≤
#[derive(Debug, Clone)]
pub struct TypeContext {
    pub file_path: Option<String>,
    pub line: Option<u32>,
    pub column: Option<u32>,
    pub local_variables: HashMap<String, TypeResolution>,
    pub current_function: Option<String>,
    pub current_facet: Option<FacetKind>,
}

/// –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è —Ä–µ–∑–æ–ª–≤–µ—Ä–∞ —Ç–∏–ø–æ–≤
#[async_trait]
pub trait TypeResolver: Send + Sync {
    /// –ú–æ–∂–µ—Ç –ª–∏ —Ä–µ–∑–æ–ª–≤–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    fn can_resolve(&self, expression: &str) -> bool;

    /// –†–∞–∑—Ä–µ—à–∏—Ç—å —Ç–∏–ø –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    async fn resolve(
        &self,
        _expression: &str,
        _context: &TypeContext,
        _repository: &dyn TypeRepository,
    ) -> Result<TypeResolution> {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
        Ok(TypeResolution {
           certainty: Certainty::Inferred(0.8), // –ù–µ 100% —É–≤–µ—Ä–µ–Ω—ã –±–µ–∑ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
           result: ResolutionResult::Dynamic,
           source: crate::domain::types::ResolutionSource::Inferred,
           metadata: crate::domain::types::ResolutionMetadata::default(),
           active_facet: Some(FacetKind::Manager),
           available_facets: vec![FacetKind::Manager, FacetKind::Object, FacetKind::Reference],
       })
    }

    async fn get_completions(
        &self,
        _prefix: &str,
        _context: &TypeContext,
        _repository: &dyn TypeRepository,
    ) -> Result<Vec<CompletionItem>> {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
        Ok(Vec::new())
    }
}

/// –†–µ–∑–æ–ª–≤–µ—Ä BSL –∫–æ–¥–∞ (—Å tree-sitter –ø–∞—Ä—Å–µ—Ä–æ–º!)
pub struct BslCodeResolver {
    parser: Arc<RwLock<Option<TreeSitterAdapter>>>,
}

impl BslCodeResolver {
    pub fn new() -> Self {
        Self {
            parser: Arc::new(RwLock::new(None)),
        }
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å tree-sitter –ø–∞—Ä—Å–µ—Ä
    pub async fn initialize_parser(&self) -> Result<()> {
        info!("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BslCodeResolver —Å tree-sitter...");

        match TreeSitterAdapter::new() {
            Ok(adapter) => {
                *self.parser.write().await = Some(adapter);
                info!("‚úÖ BslCodeResolver –≥–æ—Ç–æ–≤ —Å tree-sitter-bsl");
                Ok(())
            }
            Err(e) => {
                warn!("‚ö†Ô∏è Tree-sitter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", e);
                Err(e)
            }
        }
    }
}

#[async_trait]
impl TypeResolver for BslCodeResolver {
    fn can_resolve(&self, expression: &str) -> bool {
        // BSL –≤—ã—Ä–∞–∂–µ–Ω–∏—è: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
        expression.chars().any(|c| c.is_alphabetic())
            && !expression.contains("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.")
            && !expression.contains("–î–æ–∫—É–º–µ–Ω—Ç—ã.")
    }

    async fn resolve(
        &self,
        _expression: &str,
        _context: &TypeContext,
        _repository: &dyn TypeRepository,
    ) -> Result<TypeResolution> {
        let parser_opt = self.parser.read().await;

        if let Some(_parser) = parser_opt.as_ref() {
            // TODO: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tree-sitter –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            Ok(TypeResolution {
                certainty: Certainty::Inferred(0.5),
                result: ResolutionResult::Dynamic,
            source: crate::domain::types::ResolutionSource::Inferred,
            metadata: crate::domain::types::ResolutionMetadata::default(),
                active_facet: None,
                available_facets: Vec::new(),
            })
        } else {
            Ok(TypeResolution::unknown())
        }
    }

    async fn get_completions(
        &self,
        _prefix: &str,
        _context: &TypeContext,
        _repository: &dyn TypeRepository,
    ) -> Result<Vec<CompletionItem>> {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ BSL –ø–∞—Ä—Å–∏–Ω–≥–∞
        Ok(Vec::new())
    }
}

/// –†–µ–∑–æ–ª–≤–µ—Ä –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ (–°—Ç—Ä–æ–∫–∞, –ß–∏—Å–ª–æ, –ë—É–ª–µ–≤–æ)
pub struct BuiltinTypeResolver;

impl BuiltinTypeResolver {
    pub fn new() -> Self {
        Self
    }
}

#[async_trait]
impl TypeResolver for BuiltinTypeResolver {
    fn can_resolve(&self, expression: &str) -> bool {
        let builtins = [
            "–°—Ç—Ä–æ–∫–∞",
            "String",
            "–ß–∏—Å–ª–æ",
            "Number",
            "–ë—É–ª–µ–≤–æ",
            "Boolean",
            "–î–∞—Ç–∞",
            "Date",
        ];
        builtins.iter().any(|builtin| expression.contains(builtin))
    }

    async fn resolve(
        &self,
        expression: &str,
        _context: &TypeContext,
        _repository: &dyn TypeRepository,
    ) -> Result<TypeResolution> {
        let primitive_type = if expression.contains("–°—Ç—Ä–æ–∫–∞") || expression.contains("String")
        {
            crate::domain::types::PrimitiveType::String
        } else if expression.contains("–ß–∏—Å–ª–æ") || expression.contains("Number") {
            crate::domain::types::PrimitiveType::Number
        } else if expression.contains("–ë—É–ª–µ–≤–æ") || expression.contains("Boolean") {
            crate::domain::types::PrimitiveType::Boolean
        } else if expression.contains("–î–∞—Ç–∞") || expression.contains("Date") {
            crate::domain::types::PrimitiveType::Date
        } else {
            return Ok(TypeResolution::unknown());
        };

        Ok(TypeResolution {
            certainty: Certainty::Known,
            result: ResolutionResult::Concrete(ConcreteType::Primitive(primitive_type)),
            source: crate::domain::types::ResolutionSource::Static,
            metadata: crate::domain::types::ResolutionMetadata::default(),
            active_facet: None,
            available_facets: Vec::new(),
        })
    }

    async fn get_completions(
        &self,
        prefix: &str,
        _context: &TypeContext,
        _repository: &dyn TypeRepository,
    ) -> Result<Vec<CompletionItem>> {
        let builtins = [
            ("–°—Ç—Ä–æ–∫–∞", "String"),
            ("–ß–∏—Å–ª–æ", "Number"),
            ("–ë—É–ª–µ–≤–æ", "Boolean"),
            ("–î–∞—Ç–∞", "Date"),
        ];

        let mut completions = Vec::new();
        for (ru, en) in &builtins {
            if ru.to_lowercase().starts_with(&prefix.to_lowercase())
                || en.to_lowercase().starts_with(&prefix.to_lowercase())
            {
                completions.push(CompletionItem {
                    label: ru.to_string(),
                    detail: Some("–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–∏–ø".to_string()),
                    documentation: Some(format!("–ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ç–∏–ø {}", ru)),
                    kind: CompletionKind::Type,
                    insert_text: ru.to_string(),
                });
            }
        }

        Ok(completions)
    }
}

/// –†–µ–∑–æ–ª–≤–µ—Ä —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π (–æ–±—ä–µ–∫—Ç.–º–µ—Ç–æ–¥().—Å–≤–æ–π—Å—Ç–≤–æ)
pub struct ExpressionResolver;

impl ExpressionResolver {
    pub fn new() -> Self {
        Self
    }

    fn clean_segment(seg: &str) -> (String, bool) {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Ö–≤–æ—Å—Ç–æ–≤—ã–µ —Å–∫–æ–±–∫–∏ –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤
        let s = seg.trim();
        let is_call = s.ends_with(')');
        // –û—Ç—Ä–µ–∑–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ '('
        let name = if let Some(idx) = s.find('(') {
            &s[..idx]
        } else {
            s
        };
        (name.trim().to_string(), is_call)
    }

    fn primitive_from_name(name: &str) -> Option<ConcreteType> {
        let n = name.trim();
        if n.eq_ignore_ascii_case("–°—Ç—Ä–æ–∫–∞") || n.eq_ignore_ascii_case("String") {
            return Some(ConcreteType::Primitive(PrimitiveType::String));
        }
        if n.eq_ignore_ascii_case("–ß–∏—Å–ª–æ") || n.eq_ignore_ascii_case("Number") {
            return Some(ConcreteType::Primitive(PrimitiveType::Number));
        }
        if n.eq_ignore_ascii_case("–ë—É–ª–µ–≤–æ") || n.eq_ignore_ascii_case("Boolean") {
            return Some(ConcreteType::Primitive(PrimitiveType::Boolean));
        }
        if n.eq_ignore_ascii_case("–î–∞—Ç–∞") || n.eq_ignore_ascii_case("Date") {
            return Some(ConcreteType::Primitive(PrimitiveType::Date));
        }
        None
    }

    async fn resolve_type_by_name(
        &self,
        name: &str,
        repository: &dyn TypeRepository,
    ) -> Option<TypeResolution> {
        if let Some(ct) = Self::primitive_from_name(name) {
            return Some(TypeResolution::known(ct));
        }
        if name.is_empty() {
            return None;
        }
        let candidates = repository.search_types(name).await.ok()?;
        for raw in candidates {
            if raw.russian_name == name || raw.english_name == name {
                let mut res = TypeResolution::from_raw_data(&raw);
                // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–π, —Ç.–∫. –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                res.certainty = Certainty::Inferred(0.8);
                return Some(res);
            }
        }
        None
    }
}

#[async_trait]
impl TypeResolver for ExpressionResolver {
    fn can_resolve(&self, expression: &str) -> bool {
        // –°–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–æ—á–∫–∞–º–∏ –∏ —Å–∫–æ–±–∫–∞–º–∏ –ò–õ–ò –ø—Ä–æ—Å—Ç–∞—è —Ç–æ—á–µ—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        expression.contains('.')
    }

    async fn resolve(
        &self,
        expression: &str,
        _context: &TypeContext,
        repository: &dyn TypeRepository,
    ) -> Result<TypeResolution> {
        // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä —Ç–æ—á–µ—á–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π: Base.Segment1.Segment2...
        let mut parts = expression
            .split('.')
            .map(|s| s.trim())
            .filter(|s| !s.is_empty());
        let base = match parts.next() {
            Some(b) => b,
            None => return Ok(TypeResolution::unknown()),
        };

        // –†–∞–∑—Ä–µ—à–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∏–ø
        let mut current = match self.resolve_type_by_name(base, repository).await {
            Some(res) => res,
            None => return Ok(TypeResolution::unknown()),
        };

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º/–º–µ—Ç–æ–¥–∞–º
        for seg in parts {
            let (name, is_call) = Self::clean_segment(seg);
            // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ –≤ –≤–∏–¥–µ RawTypeData
            let raw = current.to_raw_data();

            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥
            let method_opt = raw
                .methods
                .iter()
                .find(|m| m.name.to_lowercase() == name.to_lowercase());
            if let Some(m) = method_opt {
                // –ú–µ—Ç–æ–¥. –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–≤–µ—Å—Ç–∏ —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if let Some(rt) = &m.return_type {
                    if let Some(next) = self.resolve_type_by_name(rt, repository).await {
                        current = TypeResolution {
                            certainty: Certainty::Inferred(0.7),
                            ..next
                        };
                        continue;
                    }
                }
                // –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                current = TypeResolution::unknown();
                break;
            }

            // –ï—Å–ª–∏ –Ω–µ –º–µ—Ç–æ–¥ (–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω), –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–æ
            let prop_opt = raw
                .properties
                .iter()
                .find(|p| p.name.to_lowercase() == name.to_lowercase());
            if let Some(p) = prop_opt {
                if let Some(next) = self.resolve_type_by_name(&p.type_name, repository).await {
                    current = TypeResolution {
                        certainty: Certainty::Inferred(0.9),
                        ..next
                    };
                    continue;
                } else if let Some(ct) = Self::primitive_from_name(&p.type_name) {
                    current = TypeResolution::known(ct);
                    continue;
                }
                current = TypeResolution::unknown();
                break;
            }

            // –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –≤—ã–∑–æ–≤, –Ω–æ –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º
            if is_call {
                current = TypeResolution::unknown();
                break;
            }

            // –ù–µ –Ω–∞—à–ª–∏ –Ω–∏ –º–µ—Ç–æ–¥–∞, –Ω–∏ —Å–≤–æ–π—Å—Ç–≤–∞
            current = TypeResolution::unknown();
            break;
        }

        Ok(current)
    }

    async fn get_completions(
        &self,
        prefix: &str,
        _context: &TypeContext,
        repository: &dyn TypeRepository,
    ) -> Result<Vec<CompletionItem>> {
        let mut out = Vec::new();
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–∫–∏ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
        if !prefix.contains('.') {
            let first = prefix.trim();
            if first.is_empty() {
                return Ok(Vec::new());
            }
            for raw in repository.search_types(first).await.unwrap_or_default() {
                if raw
                    .russian_name
                    .to_lowercase()
                    .starts_with(&first.to_lowercase())
                    || raw
                        .english_name
                        .to_lowercase()
                        .starts_with(&first.to_lowercase())
                {
                    out.push(CompletionItem {
                        label: raw.russian_name.clone(),
                        detail: Some("–¢–∏–ø".to_string()),
                        documentation: Some(raw.documentation.clone()),
                        kind: CompletionKind::Type,
                        insert_text: raw.russian_name,
                    });
                }
            }
            return Ok(out);
        }

        // –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á–ª–µ–Ω—ã —Ç–∏–ø–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
        let mut segs: Vec<&str> = prefix.split('.').collect();
        let last = segs.pop().unwrap_or("").trim();
        let base_expr = segs.join(".");

        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–∏–ø –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
        let resolved = self
            .resolve(&base_expr, _context, repository)
            .await
            .unwrap_or(TypeResolution::unknown());
        if matches!(resolved.certainty, Certainty::Unknown) {
            return Ok(Vec::new());
        }
        let raw = resolved.to_raw_data();
        let last_lower = last.to_lowercase();

        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ—Ç–æ–¥—ã
        for m in &raw.methods {
            if last.is_empty() || m.name.to_lowercase().starts_with(&last_lower) {
                out.push(CompletionItem {
                    label: m.name.clone(),
                    detail: Some("–ú–µ—Ç–æ–¥".to_string()),
                    documentation: Some(m.documentation.clone()),
                    kind: CompletionKind::Method,
                    insert_text: format!("{}()", m.name),
                });
            }
        }
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        for p in &raw.properties {
            if last.is_empty() || p.name.to_lowercase().starts_with(&last_lower) {
                out.push(CompletionItem {
                    label: p.name.clone(),
                    detail: Some("–°–≤–æ–π—Å—Ç–≤–æ".to_string()),
                    documentation: Some(p.description.clone()),
                    kind: CompletionKind::Property,
                    insert_text: p.name.clone(),
                });
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        out.sort_by(|a, b| a.label.cmp(&b.label));
        out.dedup_by(|a, b| a.label == b.label);
        Ok(out)
    }
}

// === TYPE CHECKER SERVICE (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π) ===

/// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ (Domain)
pub struct TypeCheckerService;

impl TypeCheckerService {
    pub fn new() -> Self {
        Self
    }

    /// –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å –ø–æ –¥–∏—Å—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä—É
    pub fn is_assignment_compatible(&self, from: &TypeResolution, to: &TypeResolution) -> bool {
        match (&from.result, &to.result) {
            (ResolutionResult::Concrete(cf), ResolutionResult::Concrete(ct)) => {
                std::mem::discriminant(cf) == std::mem::discriminant(ct)
            }
            // –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ/–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ
            _ => true,
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::unified::data::{InMemoryTypeRepository, ParseMetadata, TypeSource};

    #[tokio::test]
    async fn test_type_resolution_service() {
        // –°–æ–∑–¥–∞—ë–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        let repo = Arc::new(InMemoryTypeRepository::new());

        let test_types = vec![RawTypeData {
            id: "array".to_string(),
            russian_name: "–ú–∞—Å—Å–∏–≤".to_string(),
            english_name: "Array".to_string(),
            source: TypeSource::Platform {
                version: "8.3".to_string(),
            },
            category_path: vec!["–ö–æ–ª–ª–µ–∫—Ü–∏–∏".to_string()],
            methods: vec![],
            properties: vec![],
            documentation: "–ö–æ–ª–ª–µ–∫—Ü–∏—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π".to_string(),
            examples: vec![],
            available_facets: vec![crate::domain::types::Facet {
                kind: FacetKind::Object,
                methods: vec![],
                properties: vec![],
            }],
            parse_metadata: ParseMetadata {
                file_path: "test.xml".to_string(),
                line: 0,
                column: 0,
            },
        }];

        repo.save_types(test_types).await.unwrap();

        // –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å
        let service = TypeResolutionService::new(repo);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä—ã
        if let Some(platform_resolver) = service
            .resolvers
            .iter()
            .find_map(|r| r.as_any().downcast_ref::<PlatformTypeResolver>())
        {
            platform_resolver
                .initialize_cache(service.repository.as_ref())
                .await
                .unwrap();
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
        let context = TypeContext {
            file_path: None,
            line: None,
            column: None,
            local_variables: HashMap::new(),
            current_function: None,
            current_facet: None,
        };

        let resolution = service.resolve_expression("–ú–∞—Å—Å–∏–≤", &context).await;
        assert_eq!(resolution.certainty, Certainty::Known);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        let completions = service.get_completions("–ú–∞—Å—Å", &context).await;
        assert!(!completions.is_empty());

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        let search_results = service.search_types("–º–∞—Å—Å–∏–≤").await.unwrap();
        assert_eq!(search_results.len(), 1);
    }
}

// –•–∞–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è downcast
trait TypeResolverAny: TypeResolver {
    fn as_any(&self) -> &dyn std::any::Any;
}

impl TypeResolverAny for PlatformTypeResolver {
    fn as_any(&self) -> &dyn std::any::Any {
        self
    }
}

impl TypeResolverAny for ConfigurationTypeResolver {
    fn as_any(&self) -> &dyn std::any::Any {
        self
    }
}

impl TypeResolverAny for BslCodeResolver {
    fn as_any(&self) -> &dyn std::any::Any {
        self
    }
}

impl TypeResolverAny for BuiltinTypeResolver {
    fn as_any(&self) -> &dyn std::any::Any {
        self
    }
}

impl TypeResolverAny for ExpressionResolver {
    fn as_any(&self) -> &dyn std::any::Any {
        self
    }
}

/// –≠–ª–µ–º–µ–Ω—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—è
#[derive(Debug, Clone)]
pub struct CompletionItem {
    pub label: String,
    pub detail: Option<String>,
    pub documentation: Option<String>,
    pub kind: CompletionKind,
    pub insert_text: String,
}

/// –í–∏–¥ —ç–ª–µ–º–µ–Ω—Ç–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—è
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum CompletionKind {
    // –û–±—â–∏–µ –≤–∏–¥—ã
    Variable,
    Function,
    Method,
    Property,
    Type,
    Keyword,
    Snippet,
    // –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ/–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥—ã
    Global,
    Catalog,
    Document,
    Enum,
    GlobalFunction,
}

impl From<crate::core::platform_resolver::CompletionItem> for CompletionItem {
    fn from(src: crate::core::platform_resolver::CompletionItem) -> Self {
        let kind = match src.kind {
            crate::core::platform_resolver::CompletionKind::Global => CompletionKind::Global,
            crate::core::platform_resolver::CompletionKind::Catalog => CompletionKind::Catalog,
            crate::core::platform_resolver::CompletionKind::Document => CompletionKind::Document,
            crate::core::platform_resolver::CompletionKind::Enum => CompletionKind::Enum,
            crate::core::platform_resolver::CompletionKind::Method => CompletionKind::Method,
            crate::core::platform_resolver::CompletionKind::Property => CompletionKind::Property,
            crate::core::platform_resolver::CompletionKind::GlobalFunction => {
                CompletionKind::GlobalFunction
            }
            crate::core::platform_resolver::CompletionKind::Variable => CompletionKind::Variable,
            crate::core::platform_resolver::CompletionKind::Function => CompletionKind::Function,
        };

        CompletionItem {
            label: src.label.clone(),
            detail: src.detail,
            documentation: src.documentation,
            kind,
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É
            insert_text: src.label,
        }
    }
}

impl From<crate::core::resolution::Completion> for CompletionItem {
    fn from(src: crate::core::resolution::Completion) -> Self {
        let kind = match src.kind {
            crate::core::resolution::CompletionKind::Type => CompletionKind::Type,
            crate::core::resolution::CompletionKind::Method => CompletionKind::Method,
            crate::core::resolution::CompletionKind::Property => CompletionKind::Property,
            crate::core::resolution::CompletionKind::Function => CompletionKind::Function,
        };
        CompletionItem {
            label: src.label.clone(),
            detail: src.detail,
            documentation: None,
            kind,
            insert_text: src.label,
        }
    }
}
