//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã tree-sitter –ø–∞—Ä—Å–µ—Ä–∞ BSL

use bsl_gradual_types::parser::common::Parser;
use bsl_gradual_types::parser::ParserFactory;

fn main() -> anyhow::Result<()> {
    println!("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è tree-sitter –ø–∞—Ä—Å–µ—Ä–∞ BSL ===\n");

    // –¢–µ—Å—Ç–æ–≤—ã–π BSL –∫–æ–¥ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    let code = r#"
// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!
–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å–î–∞–Ω–Ω—ã–µ(–ú–∞—Å—Å–∏–≤–î–∞–Ω–Ω—ã—Ö) –≠–∫—Å–ø–æ—Ä—Ç
    // –ï—â—ë –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    –ü–µ—Ä–µ–º –†–µ–∑—É–ª—å—Ç–∞—Ç;
    –†–µ–∑—É–ª—å—Ç–∞—Ç = –ù–æ–≤—ã–π –ú–∞—Å—Å–∏–≤;
    
    // –¶–∏–∫–ª –î–ª—è –ö–∞–∂–¥–æ–≥–æ
    –î–ª—è –ö–∞–∂–¥–æ–≥–æ –≠–ª–µ–º–µ–Ω—Ç –ò–∑ –ú–∞—Å—Å–∏–≤–î–∞–Ω–Ω—ã—Ö –¶–∏–∫–ª
        –ï—Å–ª–∏ –¢–∏–ø–ó–Ω—á(–≠–ª–µ–º–µ–Ω—Ç) = –¢–∏–ø("–ß–∏—Å–ª–æ") –¢–æ–≥–¥–∞
            –†–µ–∑—É–ª—å—Ç–∞—Ç.–î–æ–±–∞–≤–∏—Ç—å(–≠–ª–µ–º–µ–Ω—Ç * 2);
        –ò–Ω–∞—á–µ–ï—Å–ª–∏ –¢–∏–ø–ó–Ω—á(–≠–ª–µ–º–µ–Ω—Ç) = –¢–∏–ø("–°—Ç—Ä–æ–∫–∞") –¢–æ–≥–¥–∞
            –†–µ–∑—É–ª—å—Ç–∞—Ç.–î–æ–±–∞–≤–∏—Ç—å(–°—Ç—Ä–î–ª–∏–Ω–∞(–≠–ª–µ–º–µ–Ω—Ç));
        –ò–Ω–∞—á–µ
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å;
        –ö–æ–Ω–µ—Ü–ï—Å–ª–∏;
    –ö–æ–Ω–µ—Ü–¶–∏–∫–ª–∞;
    
    // –¶–∏–∫–ª –î–ª—è
    –î–ª—è –ò–Ω–¥–µ–∫—Å = 0 –ü–æ –†–µ–∑—É–ª—å—Ç–∞—Ç.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ() - 1 –¶–∏–∫–ª
        –°–æ–æ–±—â–∏—Ç—å(–°—Ç—Ä–®–∞–±–ª–æ–Ω("–≠–ª–µ–º–µ–Ω—Ç %1: %2", –ò–Ω–¥–µ–∫—Å, –†–µ–∑—É–ª—å—Ç–∞—Ç[–ò–Ω–¥–µ–∫—Å]));
    –ö–æ–Ω–µ—Ü–¶–∏–∫–ª–∞;
    
    –í–æ–∑–≤—Ä–∞—Ç –†–µ–∑—É–ª—å—Ç–∞—Ç;
–ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã

–§—É–Ω–∫—Ü–∏—è –§–∞–∫—Ç–æ—Ä–∏–∞–ª(–ù)
    –ï—Å–ª–∏ –ù <= 1 –¢–æ–≥–¥–∞
        –í–æ–∑–≤—Ä–∞—Ç 1;
    –ö–æ–Ω–µ—Ü–ï—Å–ª–∏;
    
    –í–æ–∑–≤—Ä–∞—Ç –ù * –§–∞–∫—Ç–æ—Ä–∏–∞–ª(–ù - 1);
–ö–æ–Ω–µ—Ü–§—É–Ω–∫—Ü–∏–∏
"#;

    // –°–æ–∑–¥–∞—ë–º tree-sitter –ø–∞—Ä—Å–µ—Ä
    let mut parser = ParserFactory::create();
    println!("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä—Å–µ—Ä: {}\n", parser.name());

    // –ü–∞—Ä—Å–∏–º –∫–æ–¥
    match parser.parse(code) {
        Ok(program) => {
            println!("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!");
            println!(
                "–ù–∞–π–¥–µ–Ω–æ {} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è\n",
                program.statements.len()
            );

            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            for (i, stmt) in program.statements.iter().enumerate() {
                use bsl_gradual_types::parser::ast::Statement;
                match stmt {
                    Statement::ProcedureDecl {
                        name,
                        params,
                        body,
                        export,
                    } => {
                        println!("{}. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ '{}'", i + 1, name);
                        println!("   - –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {}", params.len());
                        println!("   - –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–µ–ª–µ: {}", body.len());
                        println!("   - –≠–∫—Å–ø–æ—Ä—Ç–Ω–∞—è: {}", if *export { "–î–∞" } else { "–ù–µ—Ç" });
                    }
                    Statement::FunctionDecl {
                        name, params, body, ..
                    } => {
                        println!("{}. –§—É–Ω–∫—Ü–∏—è '{}'", i + 1, name);
                        println!("   - –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {}", params.len());
                        println!("   - –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–µ–ª–µ: {}", body.len());
                    }
                    _ => {
                        println!("{}. –î—Ä—É–≥–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä", i + 1);
                    }
                }
            }

            println!("\nüéâ Tree-sitter –ø–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:");
            println!("   ‚úì –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏");
            println!("   ‚úì –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏");
            println!("   ‚úì –¶–∏–∫–ª—ã (–î–ª—è, –î–ª—è –ö–∞–∂–¥–æ–≥–æ, –ü–æ–∫–∞)");
            println!("   ‚úì –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã");
            println!("   ‚úì –í–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏");
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {:?}", e);
        }
    }

    Ok(())
}
