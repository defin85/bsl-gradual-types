//! –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–∏–ø–æ–≤

use anyhow::Result;
use bsl_gradual_types::data::loaders::syntax_helper_parser::{
    OptimizationSettings, SyntaxHelperParser, SyntaxNode,
};
use std::path::Path;

fn main() -> Result<()> {
    println!("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ===\n");

    let syntax_helper_path = Path::new("examples/syntax_helper/rebuilt.shcntx_ru/objects");

    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä
    let settings = OptimizationSettings {
        show_progress: false,
        ..Default::default()
    };
    let mut parser = SyntaxHelperParser::with_settings(settings);

    // –ü–∞—Ä—Å–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    println!("üìÇ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {}", syntax_helper_path.display());
    parser.parse_directory(syntax_helper_path)?;

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    let database = parser.export_database();

    // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é catalog234
    println!("\nüîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ catalog234...");

    for (id, category) in &database.categories {
        if id == "catalog234" {
            println!("\n‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:");
            println!("   ID: {}", id);
            println!("   –ù–∞–∑–≤–∞–Ω–∏–µ: {}", category.name);
            println!("   –û–ø–∏—Å–∞–Ω–∏–µ: {}", category.description);

            // –ò—â–µ–º —Ç–∏–ø—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            println!("\nüìã –¢–∏–ø—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{}':", category.name);

            let mut types_in_category = Vec::new();
            for (path, node) in &database.nodes {
                if let SyntaxNode::Type(type_info) = node {
                    if type_info.identity.category_path == category.name {
                        types_in_category.push(&type_info.identity.russian_name);
                    }
                }
            }

            if types_in_category.is_empty() {
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—â–µ–º –ø–æ –ø—É—Ç–∏
                for (path, node) in &database.nodes {
                    if path.contains("/catalog234/") {
                        if let SyntaxNode::Type(type_info) = node {
                            types_in_category.push(&type_info.identity.russian_name);
                        }
                    }
                }
            }

            types_in_category.sort();
            for (i, type_name) in types_in_category.iter().enumerate() {
                println!("   {}. {}", i + 1, type_name);
                if i >= 9 {
                    println!("   ... –∏ –µ—â–µ {} —Ç–∏–ø–æ–≤", types_in_category.len() - 10);
                    break;
                }
            }

            println!("\n   –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {}", types_in_category.len());
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    println!("\nüìä –ü–µ—Ä–≤—ã–µ 10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π:");
    for (i, (id, category)) in database.categories.iter().enumerate() {
        if i >= 10 {
            break;
        }

        // –°—á–∏—Ç–∞–µ–º —Ç–∏–ø—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let types_count = database
            .nodes
            .values()
            .filter(|node| {
                if let SyntaxNode::Type(type_info) = node {
                    type_info.identity.category_path == category.name
                } else {
                    false
                }
            })
            .count();

        println!("   {} -> {} ({} —Ç–∏–ø–æ–≤)", id, category.name, types_count);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    println!("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("   –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}", database.categories.len());

    // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–∏–ø–æ–≤
    let mut category_stats: Vec<(String, usize)> = Vec::new();

    for (id, category) in &database.categories {
        let count = database
            .nodes
            .values()
            .filter(|node| {
                if let SyntaxNode::Type(type_info) = node {
                    type_info.identity.category_path == category.name
                        || type_info
                            .identity
                            .catalog_path
                            .contains(&format!("/{}/", id))
                } else {
                    false
                }
            })
            .count();

        if count > 0 {
            category_stats.push((category.name.clone(), count));
        }
    }

    category_stats.sort_by(|a, b| b.1.cmp(&a.1));

    println!("\nüèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–∏–ø–æ–≤:");
    for (i, (name, count)) in category_stats.iter().enumerate() {
        if i >= 5 {
            break;
        }
        println!("   {}. {} - {} —Ç–∏–ø–æ–≤", i + 1, name, count);
    }

    Ok(())
}
