//! Build script –¥–ª—è bsl-gradual-types
//! –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è tree_sitter_bsl –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

fn main() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π tree-sitter-bsl –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    let tree_sitter_bsl_path = "../tree-sitter-bsl";
    let parser_c_path = format!("{}/src/parser.c", tree_sitter_bsl_path);

    if std::path::Path::new(&parser_c_path).exists() {
        println!(
            "cargo:warning=üîç –ù–ê–ô–î–ï–ù–ê —Ä–µ–∞–ª—å–Ω–∞—è tree-sitter-bsl: {}",
            tree_sitter_bsl_path
        );

        // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –†–ï–ê–õ–¨–ù–´–ô –ø–∞—Ä—Å–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        cc::Build::new()
            .std("c11")
            .include(format!("{}/src", tree_sitter_bsl_path))
            .file(&parser_c_path)
            .compile("tree_sitter_bsl"); // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û –ò–ú–Ø (—Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏)

        println!("cargo:warning=‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø tree-sitter-bsl —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ tree_sitter_bsl");
        println!("cargo:rustc-link-lib=tree_sitter_bsl"); // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û –ò–ú–Ø
        return;
    }

    // Fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    println!(
        "cargo:warning=‚ö†Ô∏è tree-sitter-bsl –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É",
        tree_sitter_bsl_path
    );

    // –ù–ï —Å–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –≤ –∫–æ–¥–µ
    println!("cargo:warning=‚ùå –ó–∞–≥–ª—É—à–∫–∞ –ù–ï —Å–æ–∑–¥–∞–Ω–∞ - tree-sitter —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
    println!("cargo:warning=üìã –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cfg —É—Å–ª–æ–≤–Ω—É—é –∫–æ–º–ø–∏–ª—è—Ü–∏—é");
    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-changed=../tree-sitter-bsl/src/parser.c");
}
