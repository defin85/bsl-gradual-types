//! –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç–∏–ø–æ–≤ –∏–∑ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞
//! 
//! –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∏–ø–æ–≤, –º–µ—Ç–æ–¥–æ–≤ –∏ —Å–≤–æ–π—Å—Ç–≤ –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ

use bsl_gradual_types::adapters::syntax_helper_parser::SyntaxHelperParser;
use bsl_gradual_types::adapters::platform_types_v2::create_platform_resolver_with_syntax_helper;
use std::collections::BTreeMap;
use colored::Colorize;

fn main() -> anyhow::Result<()> {
    println!("{}", "=== –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ï–†–ê–†–•–ò–ò –¢–ò–ü–û–í BSL ===".cyan().bold());
    println!();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ JSON
    let json_path = "examples/syntax_helper/syntax_database.json";
    if !std::path::Path::new(json_path).exists() {
        println!("{}","‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞:".red());
        println!("   cargo run --example syntax_helper_parser_demo");
        return Ok(());
    }
    
    let database = SyntaxHelperParser::load_from_file(json_path)?;
    
    // 1. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
    println!("{}", "üì¶ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò".green().bold());
    println!("{}", "‚îÄ".repeat(80).dimmed());
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    let mut functions_by_letter: BTreeMap<char, Vec<String>> = BTreeMap::new();
    
    for (name, func) in &database.global_functions {
        let first_char = name.chars().next().unwrap_or('?');
        functions_by_letter.entry(first_char).or_default().push(
            if let Some(eng) = &func.english_name {
                format!("{} ({})", name, eng.dimmed())
            } else {
                name.clone()
            }
        );
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—É–∫–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    let mut shown_letters = 0;
    for (letter, functions) in &functions_by_letter {
        if shown_letters >= 5 {
            println!("   {} ({} –≥—Ä—É–ø–ø)", "...–∏ –µ—â—ë".dimmed(), functions_by_letter.len() - 5);
            break;
        }
        
        println!("   {} [{}]:", letter.to_string().yellow(), functions.len());
        for func in functions.iter().take(5) {
            println!("      ‚îú‚îÄ {}", func);
        }
        if functions.len() > 5 {
            println!("      ‚îî‚îÄ {} {} —Ñ—É–Ω–∫—Ü–∏–π", "...–µ—â—ë".dimmed(), functions.len() - 5);
        }
        shown_letters += 1;
    }
    
    println!("\n   {}: {}", "–í—Å–µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π".bold(), database.global_functions.len());
    
    // 2. –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê
    println!("\n{}", "üî§ –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –Ø–ó–´–ö–ê".green().bold());
    println!("{}", "‚îÄ".repeat(80).dimmed());
    
    let keywords_per_line = 8;
    for (i, keyword) in database.keywords.iter().enumerate() {
        if i % keywords_per_line == 0 && i > 0 {
            println!();
        }
        print!("{:15}", keyword.russian.cyan());
    }
    println!("\n   {}: {}", "–í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤".bold(), database.keywords.len());
    
    // 3. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–™–ï–ö–¢–´ (–º–µ–Ω–µ–¥–∂–µ—Ä—ã)
    println!("\n{}", "üè¢ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–™–ï–ö–¢–´ (–ú–ï–ù–ï–î–ñ–ï–†–´)".green().bold());
    println!("{}", "‚îÄ".repeat(80).dimmed());
    
    if database.global_objects.is_empty() {
        println!("   {} –ü–æ–∫–∞ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞", "‚ö†Ô∏è".yellow());
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–∞—Ä–¥–∫–æ–¥ —Ç–∏–ø—ã –∏–∑ platform_types_v2
        let resolver = create_platform_resolver_with_syntax_helper();
        let platform_globals = resolver.get_platform_globals();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        let managers: Vec<_> = platform_globals.iter()
            .filter(|(name, _)| {
                name.contains("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏") || name.contains("Catalogs") ||
                name.contains("–î–æ–∫—É–º–µ–Ω—Ç—ã") || name.contains("Documents") ||
                name.contains("–†–µ–≥–∏—Å—Ç—Ä—ã–°–≤–µ–¥–µ–Ω–∏–π") || name.contains("InformationRegisters") ||
                name.contains("–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è") || name.contains("Enums")
            })
            .collect();
            
        println!("\n   {} –∏–∑ hardcoded —Ç–∏–ø–æ–≤:", "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã".italic());
        for (name, _) in managers {
            println!("      ‚îú‚îÄ {}", name.blue());
        }
    } else {
        for (name, obj) in &database.global_objects {
            println!("   ‚îú‚îÄ {} ({})", name.blue(), obj.object_type);
            
            if !obj.methods.is_empty() {
                println!("   ‚îÇ  ‚îú‚îÄ –ú–µ—Ç–æ–¥—ã:");
                for method in obj.methods.iter().take(3) {
                    println!("   ‚îÇ  ‚îÇ  ‚îú‚îÄ {}", method);
                }
                if obj.methods.len() > 3 {
                    println!("   ‚îÇ  ‚îÇ  ‚îî‚îÄ ...–µ—â—ë {}", obj.methods.len() - 3);
                }
            }
            
            if !obj.properties.is_empty() {
                println!("   ‚îÇ  ‚îî‚îÄ –°–≤–æ–π—Å—Ç–≤–∞:");
                for prop in obj.properties.iter().take(3) {
                    println!("   ‚îÇ     ‚îú‚îÄ {}", prop);
                }
                if obj.properties.len() > 3 {
                    println!("   ‚îÇ     ‚îî‚îÄ ...–µ—â—ë {}", obj.properties.len() - 3);
                }
            }
        }
    }
    
    // 4. –°–ò–°–¢–ï–ú–ù–´–ï –ü–ï–†–ï–ß–ò–°–õ–ï–ù–ò–Ø
    println!("\n{}", "üìù –°–ò–°–¢–ï–ú–ù–´–ï –ü–ï–†–ï–ß–ò–°–õ–ï–ù–ò–Ø".green().bold());
    println!("{}", "‚îÄ".repeat(80).dimmed());
    
    if database.system_enums.is_empty() {
        println!("   {} –ü–æ–∫–∞ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞", "‚ö†Ô∏è".yellow());
    } else {
        for (name, enum_info) in &database.system_enums {
            println!("   ‚îú‚îÄ {}", name.magenta());
            for value in enum_info.values.iter().take(3) {
                println!("   ‚îÇ  ‚îú‚îÄ {}", value.name);
            }
            if enum_info.values.len() > 3 {
                println!("   ‚îÇ  ‚îî‚îÄ ...–µ—â—ë {} –∑–Ω–∞—á–µ–Ω–∏–π", enum_info.values.len() - 3);
            }
        }
    }
    
    // 5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    println!("\n{}", "üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê".green().bold());
    println!("{}", "‚îÄ".repeat(80).dimmed());
    
    let stats = vec![
        ("–ì–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π", database.global_functions.len()),
        ("–ì–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤", database.global_objects.len()),
        ("–ú–µ—Ç–æ–¥–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤", database.object_methods.len()),
        ("–°–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–æ–≤", database.object_properties.len()),
        ("–°–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π", database.system_enums.len()),
        ("–ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤", database.keywords.len()),
        ("–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤", database.operators.len()),
    ];
    
    for (name, count) in stats {
        let bar_length = (count as f32 / 500.0 * 50.0).min(50.0) as usize;
        let bar = "‚ñà".repeat(bar_length);
        let empty = "‚ñë".repeat(50 - bar_length);
        
        println!("   {:25} {} {} {}", 
            name, 
            bar.green(), 
            empty.dimmed(),
            count.to_string().bold()
        );
    }
    
    // 6. –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
    println!("\n{}", "üí° –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –ö–û–î–ï".green().bold());
    println!("{}", "‚îÄ".repeat(80).dimmed());
    
    println!("\n   {}:", "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏".yellow());
    println!("   {}", "–°–æ–æ–±—â–∏—Ç—å(\"–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!\");".dimmed());
    println!("   {}", "–¢–µ–∫—É—â–∞—è–î–∞—Ç–∞ = –¢–µ–∫—É—â–∞—è–î–∞—Ç–∞();".dimmed());
    println!("   {}", "–¢–∏–ø–ó–Ω—á = –¢–∏–ø(\"–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–°—Å—ã–ª–∫–∞.–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã\");".dimmed());
    
    println!("\n   {}:", "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞".yellow());
    println!("   {}", "–ï—Å–ª–∏ –£—Å–ª–æ–≤–∏–µ –¢–æ–≥–¥–∞".dimmed());
    println!("   {}", "    –î–ª—è –ö–∞–∂–¥–æ–≥–æ –≠–ª–µ–º–µ–Ω—Ç –ò–∑ –ú–∞—Å—Å–∏–≤ –¶–∏–∫–ª".dimmed());
    println!("   {}", "        –ü—Ä–µ—Ä–≤–∞—Ç—å;".dimmed());
    println!("   {}", "    –ö–æ–Ω–µ—Ü–¶–∏–∫–ª–∞;".dimmed());
    println!("   {}", "–ö–æ–Ω–µ—Ü–ï—Å–ª–∏;".dimmed());
    
    // 7. –î–ï–†–ï–í–û –¢–ò–ü–û–í (–µ—Å–ª–∏ –±—É–¥—É—Ç –æ–±—ä–µ–∫—Ç—ã)
    if !database.global_objects.is_empty() || !database.object_methods.is_empty() {
        println!("\n{}", "üå≥ –î–ï–†–ï–í–û –¢–ò–ü–û–í".green().bold());
        println!("{}", "‚îÄ".repeat(80).dimmed());
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Ç–∏–ø–æ–≤
        println!("   Platform");
        println!("   ‚îú‚îÄ GlobalContext");
        println!("   ‚îÇ  ‚îú‚îÄ Functions ({})", database.global_functions.len());
        println!("   ‚îÇ  ‚îî‚îÄ Objects ({})", database.global_objects.len());
        println!("   ‚îú‚îÄ Managers");
        println!("   ‚îÇ  ‚îú‚îÄ CatalogsManager");
        println!("   ‚îÇ  ‚îú‚îÄ DocumentsManager");
        println!("   ‚îÇ  ‚îî‚îÄ ...");
        println!("   ‚îî‚îÄ Types");
        println!("      ‚îú‚îÄ Primitive (String, Number, Date, Boolean)");
        println!("      ‚îú‚îÄ Collections (Array, Structure, Map)");
        println!("      ‚îî‚îÄ Metadata (References, Objects, Records)");
    }
    
    println!("\n{}", "‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!".green().bold());
    
    // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    println!("\n{}", "üí° –ü–û–î–°–ö–ê–ó–ö–ò:".yellow().bold());
    println!("   ‚Ä¢ –î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {} | grep –§—É–Ω–∫—Ü–∏—è", "cargo run --example type_hierarchy_visualizer".dimmed());
    println!("   ‚Ä¢ –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {} > types.txt", "cargo run --example type_hierarchy_visualizer".dimmed());
    println!("   ‚Ä¢ –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∏–ø–æ–≤ –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–∞—Ä—Å–µ—Ä");
    
    Ok(())
}