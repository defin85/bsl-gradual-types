use bsl_gradual_types::adapters::config_parser_quick_xml::ConfigurationQuickXmlParser;

fn main() -> anyhow::Result<()> {
    println!("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n");
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    let files = [
        ("tests/fixtures/xml_full/Catalogs/–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã.xml", "Catalog"),
        ("tests/fixtures/xml_full/Catalogs/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.xml", "Catalog"),
        ("tests/fixtures/xml_full/Documents/–ó–∞–∫–∞–∑–ù–∞—Ä—è–¥—ã.xml", "Document"),
        ("tests/fixtures/xml_full/InformationRegisters/–¢–µ—Å—Ç–æ–≤—ã–π–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.xml", "Register"),
    ];
    
    for (file_path, expected_kind) in files {
        println!("üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {}", file_path);
        
        if !std::path::Path::new(file_path).exists() {
            println!("   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!\n");
            continue;
        }
        
        // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        let parser = ConfigurationQuickXmlParser::new("tests/fixtures/xml_full");
        
        match parser.parse_metadata_xml(
            &std::path::Path::new(file_path),
            match expected_kind {
                "Catalog" => bsl_gradual_types::core::types::MetadataKind::Catalog,
                "Document" => bsl_gradual_types::core::types::MetadataKind::Document,
                "Register" => bsl_gradual_types::core::types::MetadataKind::Register,
                _ => bsl_gradual_types::core::types::MetadataKind::Catalog,
            }
        ) {
            Ok(metadata) => {
                println!("   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:");
                println!("      üè∑Ô∏è  –ò–º—è: '{}'", metadata.name);
                println!("      üìã –¢–∏–ø: {:?}", metadata.kind);
                println!("      üí¨ –°–∏–Ω–æ–Ω–∏–º: {:?}", metadata.synonym);
                println!("      üìù –ê—Ç—Ä–∏–±—É—Ç–æ–≤: {}", metadata.attributes.len());
                println!("      üìä –¢–∞–±–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π: {}", metadata.tabular_sections.len());
                
                if !metadata.attributes.is_empty() {
                    println!("      üìù –ê—Ç—Ä–∏–±—É—Ç—ã:");
                    for attr in &metadata.attributes {
                        println!("         - {} ({})", attr.name, attr.type_definition);
                    }
                }
                
                if !metadata.tabular_sections.is_empty() {
                    println!("      üìä –¢–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏:");
                    for ts in &metadata.tabular_sections {
                        println!("         - {} (–∞—Ç—Ä–∏–±—É—Ç–æ–≤: {})", ts.name, ts.attributes.len());
                    }
                }
            }
            Err(e) => {
                println!("   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", e);
            }
        }
        
        println!();
    }
    
    Ok(())
}