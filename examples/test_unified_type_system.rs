//! –¢–µ—Å—Ç –µ–¥–∏–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ç–∏–ø–æ–≤ - UnifiedTypeSystem

use anyhow::Result;
use std::sync::Arc;
use bsl_gradual_types::core::unified_type_system::{
    UnifiedTypeSystem, UnifiedSystemConfig,
    LspTypeInterface, WebTypeInterface
};

#[tokio::main]
async fn main() -> Result<()> {
    println!("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ç–∏–ø–æ–≤");
    
    // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤
    println!("\n=== üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ UnifiedTypeSystem ===");
    let unified_system = Arc::new(UnifiedTypeSystem::with_defaults());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    println!("\n=== ‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã ===");
    match unified_system.initialize().await {
        Ok(_) => println!("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"),
        Err(e) => println!("‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {}", e),
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let stats = unified_system.get_statistics().await;
    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:");
    println!("  - –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã: {}", stats.platform_types_count);
    println!("  - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã: {}", stats.configuration_types_count);
    println!("  - –í—Å–µ–≥–æ TypeResolution: {}", stats.total_resolutions);
    
    // –¢–µ—Å—Ç LSP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    println!("\n=== üì° –¢–µ—Å—Ç LSP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ===");
    let lsp_interface = LspTypeInterface::new(unified_system.clone());
    
    let test_expressions = vec![
        "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π",
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã",
        "–°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π",
        "–î–æ–∫—É–º–µ–Ω—Ç—ã.–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞"
    ];
    
    for expression in &test_expressions {
        let resolution = lsp_interface.resolve_expression(expression).await;
        println!("üîç LSP: '{}' ‚Üí {:?} (–∏—Å—Ç–æ—á–Ω–∏–∫: {:?})", 
            expression, resolution.certainty, resolution.source);
        
        let completions = lsp_interface.get_completions(expression).await;
        println!("üí° LSP: –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è '{}' ‚Üí {} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", 
            expression, completions.len());
    }
    
    // –¢–µ—Å—Ç –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    println!("\n=== üåê –¢–µ—Å—Ç –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ===");
    let web_interface = WebTypeInterface::new(unified_system.clone());
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let all_display_types = web_interface.get_all_types_for_display().await;
    println!("üé® –í–µ–±: –≤—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", all_display_types.len());
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤
    for (i, display_type) in all_display_types.iter().take(3).enumerate() {
        println!("  {}. {} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:?})", 
            i + 1, display_type.name, display_type.category, display_type.certainty);
    }
    
    // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    for query in &["–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏", "HTTP"] {
        let search_results = web_interface.search_types(query).await;
        println!("üîç –í–µ–±: –ø–æ–∏—Å–∫ '{}' ‚Üí {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", query, search_results.len());
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if let Some(first_result) = search_results.first() {
            println!("  –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {} ({})", 
                first_result.name, first_result.description);
        }
    }
    
    // –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    println!("\n=== üìñ –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ===");
    if let Some(details) = web_interface.get_type_details("–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π").await {
        println!("üìã –î–µ—Ç–∞–ª–∏ —Ç–∏–ø–∞ '{}':", details.name);
        println!("  - –ú–µ—Ç–æ–¥—ã: {}", details.methods.len());
        println!("  - –°–≤–æ–π—Å—Ç–≤–∞: {}", details.properties.len());
        println!("  - –§–∞—Å–µ—Ç—ã: {:?}", details.facets);
    } else {
        println!("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ç–∏–ø–∞ '–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π'");
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    println!("\n=== üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===");
    let final_stats = unified_system.get_statistics().await;
    println!("–ó–∞–ø—Ä–æ—Å—ã –∫ —Å–∏—Å—Ç–µ–º–µ: {}", final_stats.resolution_requests);
    println!("–ü–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫–µ—à: {}", final_stats.cache_hits);
    println!("–ü—Ä–æ–º–∞—Ö–∏ –∫–µ—à–∞: {}", final_stats.cache_misses);
    
    if final_stats.cache_hits + final_stats.cache_misses > 0 {
        let hit_ratio = final_stats.cache_hits as f64 / (final_stats.cache_hits + final_stats.cache_misses) as f64;
        println!("Cache hit ratio: {:.2}", hit_ratio);
    }
    
    println!("\nüéâ –ï–¥–∏–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    println!("üéØ TypeResolution –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω!");
    
    Ok(())
}