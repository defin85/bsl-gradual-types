//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞ –≤–µ—Ä—Å–∏–∏ 3

use bsl_gradual_types::adapters::syntax_helper_parser::{SyntaxHelperParser, OptimizationSettings};
use bsl_gradual_types::adapters::platform_types_v2::PlatformTypesResolverV2;
use bsl_gradual_types::core::types::FacetKind;
use std::path::Path;
use anyhow::Result;

fn main() -> Result<()> {
    println!("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞ v3 ===\n");
    
    // –ü—É—Ç—å –∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º—É –∞—Ä—Ö–∏–≤—É —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞
    let syntax_helper_path = Path::new("data/syntax_helper/extracted");
    
    if !syntax_helper_path.exists() {
        println!("‚ö†Ô∏è  –ü—É—Ç—å {} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", syntax_helper_path.display());
        println!("   –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞...\n");
        create_demo_structure()?;
    }
    
    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    let settings = OptimizationSettings {
        show_progress: true,
        ..Default::default()
    };
    let mut parser = SyntaxHelperParser::with_settings(settings);
    
    println!("üìÇ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞: {}", syntax_helper_path.display());
    match parser.parse_directory(syntax_helper_path) {
        Ok(_) => println!("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω\n"),
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}\n", e);
            println!("   –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞\n");
            setup_demo_data(&mut parser);
        }
    }
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    demonstrate_parser_features(&parser);
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PlatformTypesResolverV2
    demonstrate_resolver_integration(parser)?;
    
    Ok(())
}

fn demonstrate_parser_features(parser: &SyntaxHelperParser) {
    println!("=== –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞ ===\n");
    
    // 1. –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ –ø–æ –∏–º–µ–Ω–∏
    println!("1Ô∏è‚É£  –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ –ø–æ –∏–º–µ–Ω–∏:");
    let test_names = vec!["–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "ValueTable", "–ú–∞—Å—Å–∏–≤", "Array"];
    
    for name in test_names {
        if let Some(type_info) = parser.find_type(name) {
            println!("   ‚úì –ù–∞–π–¥–µ–Ω '{}': {} / {}", 
                name,
                type_info.identity.russian_name,
                type_info.identity.english_name
            );
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞—Å–µ—Ç—ã
            if !type_info.metadata.available_facets.is_empty() {
                print!("     –§–∞—Å–µ—Ç—ã: ");
                for facet in &type_info.metadata.available_facets {
                    print!("{:?} ", facet);
                }
                println!();
            }
        } else {
            println!("   ‚úó –ù–µ –Ω–∞–π–¥–µ–Ω '{}'", name);
        }
    }
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    println!("\n2Ô∏è‚É£  –¢–∏–ø—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:");
    let all_types = parser.get_all_types();
    let mut categories = std::collections::HashSet::new();
    
    for (_, node) in all_types {
        if let bsl_gradual_types::adapters::syntax_helper_parser_v3::SyntaxNode::Type(type_info) = node {
            if !type_info.identity.category_path.is_empty() {
                categories.insert(type_info.identity.category_path.clone());
            }
        }
    }
    
    for category in categories.iter().take(3) {
        let types = parser.get_types_by_category(category);
        println!("   –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{}': {} —Ç–∏–ø–æ–≤", category, types.len());
        for type_info in types.iter().take(3) {
            println!("      - {}", type_info.identity.russian_name);
        }
    }
    
    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ —Ñ–∞—Å–µ—Ç—É
    println!("\n3Ô∏è‚É£  –¢–∏–ø—ã –ø–æ —Ñ–∞—Å–µ—Ç–∞–º:");
    let facets = vec![
        FacetKind::Collection,
        FacetKind::Manager,
        FacetKind::Singleton,
        FacetKind::Constructor,
    ];
    
    for facet in facets {
        let types = parser.get_types_by_facet(facet);
        if !types.is_empty() {
            println!("   {:?}: {} —Ç–∏–ø–æ–≤", facet, types.len());
            for type_info in types.iter().take(3) {
                println!("      - {}", type_info.identity.russian_name);
            }
        }
    }
    
    // 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    println!("\n4Ô∏è‚É£  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:");
    let index = parser.type_index();
    println!("   –ü–æ —Ä—É—Å—Å–∫–∏–º –∏–º–µ–Ω–∞–º: {} –∑–∞–ø–∏—Å–µ–π", index.by_russian.len());
    println!("   –ü–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏–º–µ–Ω–∞–º: {} –∑–∞–ø–∏—Å–µ–π", index.by_english.len());
    println!("   –ü–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∏–º–µ–Ω–∞–º: {} –∑–∞–ø–∏—Å–µ–π", index.by_any_name.len());
    println!("   –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {} –∫–∞—Ç–µ–≥–æ—Ä–∏–π", index.by_category.len());
    println!("   –ü–æ —Ñ–∞—Å–µ—Ç–∞–º: {} —Ñ–∞—Å–µ—Ç–æ–≤", index.by_facet.len());
}

fn demonstrate_resolver_integration(parser: SyntaxHelperParser) -> Result<()> {
    println!("\n=== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PlatformTypesResolverV2 ===\n");
    
    let mut resolver = PlatformTypesResolverV2::new();
    resolver.load_from_parser_v3(parser);
    
    // 1. –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ resolver
    println!("1Ô∏è‚É£  –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ resolver:");
    if let Some(resolution) = resolver.resolve_type("–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π") {
        println!("   ‚úì –ù–∞–π–¥–µ–Ω —Ç–∏–ø '–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π'");
        println!("     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:?}", resolution.certainty);
        println!("     –ò—Å—Ç–æ—á–Ω–∏–∫: {:?}", resolution.source);
        println!("     –ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞—Å–µ—Ç: {:?}", resolution.active_facet);
    }
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ hover –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    println!("\n2Ô∏è‚É£  Hover –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:");
    if let Some(hover) = resolver.get_hover_info("–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π") {
        println!("   –î–ª—è —Ç–∏–ø–∞ '–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π':");
        for line in hover.lines().take(5) {
            println!("   {}", line);
        }
        if hover.lines().count() > 5 {
            println!("   ...");
        }
    }
    
    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ resolver
    println!("\n3Ô∏è‚É£  –¢–∏–ø—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π —á–µ—Ä–µ–∑ resolver:");
    let collection_types = resolver.get_types_by_facet(FacetKind::Collection);
    println!("   –ù–∞–π–¥–µ–Ω–æ {} —Ç–∏–ø–æ–≤-–∫–æ–ª–ª–µ–∫—Ü–∏–π", collection_types.len());
    for type_res in collection_types.iter().take(5) {
        if let bsl_gradual_types::core::types::ResolutionResult::Concrete(concrete) = &type_res.result {
            if let bsl_gradual_types::core::types::ConcreteType::Platform(platform) = concrete {
                println!("      - {}", platform.name);
            }
        }
    }
    
    Ok(())
}

fn create_demo_structure() -> Result<()> {
    use std::fs;
    
    // –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤
    let base = Path::new("data/syntax_helper/extracted");
    fs::create_dir_all(base.join("objects/catalog236"))?;
    
    // –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ HTML —Ñ–∞–π–ª—ã
    fs::write(
        base.join("objects/catalog236.html"),
        r#"<html>
<h1>–ö–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π</h1>
<p>–û–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö.</p>
</html>"#
    )?;
    
    fs::write(
        base.join("objects/catalog236/ValueTable.html"),
        r#"<html>
<h1 class="V8SH_pagetitle">–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π (ValueTable)</h1>
<p>–û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –æ–±—ä–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –æ–±—Ö–æ–¥ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –î–ª—è –∫–∞–∂–¥–æ–≥–æ.</p>
</html>"#
    )?;
    
    fs::write(
        base.join("objects/catalog236/Array.html"),
        r#"<html>
<h1 class="V8SH_pagetitle">–ú–∞—Å—Å–∏–≤ (Array)</h1>
<p>–ö–æ–ª–ª–µ–∫—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞. –î–ª—è –æ–±—ä–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –æ–±—Ö–æ–¥ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –î–ª—è –∫–∞–∂–¥–æ–≥–æ.</p>
</html>"#
    )?;
    
    println!("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–µ–º–æ-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ {}\n", base.display());
    
    Ok(())
}

fn setup_demo_data(parser: &mut SyntaxHelperParser) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–∞—Ä—Å–µ—Ä
    // –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    println!("‚ÑπÔ∏è  –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞—Ä—Å–µ—Ä");
}