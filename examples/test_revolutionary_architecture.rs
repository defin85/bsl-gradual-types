//! –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
//!
//! –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–ª–æ—ë–≤ –∏–¥–µ–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

use bsl_gradual_types::ideal::presentation::{
    CliAnalysisRequest, CliOutputFormat, LspCompletionRequest, WebSearchRequest,
};
use bsl_gradual_types::ideal::system::{CentralSystemConfig, CentralTypeSystem};

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    println!("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´");
    println!("{}", "=".repeat(60));

    // === –¢–ï–°–¢ 1: –°–û–ó–î–ê–ù–ò–ï –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    println!("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è CentralTypeSystem...");

    let config = CentralSystemConfig {
        verbose_logging: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤
        ..Default::default()
    };

    let central_system = std::sync::Arc::new(CentralTypeSystem::new(config));
    println!("‚úÖ CentralTypeSystem —Å–æ–∑–¥–∞–Ω–∞");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    let init_start = std::time::Instant::now();
    central_system.initialize().await?;
    let init_time = init_start.elapsed();

    println!("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {:?}", init_time);

    // === –¢–ï–°–¢ 2: –ú–ï–¢–†–ò–ö–ò –°–ò–°–¢–ï–ú–´ ===
    println!("\n2Ô∏è‚É£ –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã...");

    let metrics = central_system.get_system_metrics().await;
    println!("üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã:");
    println!("   - –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤: {}", metrics.total_types);
    println!("   - –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö: {}", metrics.platform_types);
    println!("   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö: {}", metrics.configuration_types);
    println!("   - –ü–∞–º—è—Ç—å: {:.2} MB", metrics.cache_memory_mb);

    assert!(metrics.total_types > 0, "–¢–∏–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
    assert!(
        metrics.platform_types > 0,
        "–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
    );
    println!("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã");

    // === –¢–ï–°–¢ 3: –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø ===
    println!("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è...");

    let health = central_system.health_check().await;
    println!("üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã:");
    println!("   - –°—Ç–∞—Ç—É—Å: {}", health.status);
    println!("   - –û—Ü–µ–Ω–∫–∞: {:.1}/10", health.overall_score * 10.0);
    println!("   - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {}", health.components.len());

    for component in &health.components {
        println!("     ‚Ä¢ {}: {}", component.name, component.status);
    }

    assert_eq!(health.status, "healthy", "–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–æ—Ä–æ–≤–æ–π");
    assert!(
        health.overall_score > 0.8,
        "–û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–π"
    );
    println!("‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–∏—á–Ω–æ–µ");

    // === –¢–ï–°–¢ 4: LSP –ò–ù–¢–ï–†–§–ï–ô–° ===
    println!("\n4Ô∏è‚É£ –¢–µ—Å—Ç LSP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...");

    let lsp_interface = central_system.lsp_interface();

    // –¢–µ—Å—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    let completion_request = LspCompletionRequest {
        file_path: "test.bsl".to_string(),
        line: 10,
        column: 5,
        prefix: "–°—Ç—Ä".to_string(),
        trigger_character: None,
    };

    let completion_response = lsp_interface
        .handle_completion_request(completion_request)
        .await?;
    println!(
        "   - –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
        completion_response.items.len()
    );

    // –¢–µ—Å—Ç hover
    let hover_request = bsl_gradual_types::ideal::presentation::LspHoverRequest {
        file_path: "test.bsl".to_string(),
        line: 10,
        column: 5,
        expression: "–ú–∞—Å—Å–∏–≤".to_string(),
    };

    if let Some(hover_response) = lsp_interface.handle_hover_request(hover_request).await? {
        println!(
            "   - Hover: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            hover_response.contents.len()
        );
    }

    // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LSP
    let perf_metrics = lsp_interface.get_performance_metrics().await?;
    println!("   - LSP –∑–∞–ø—Ä–æ—Å–æ–≤: {}", perf_metrics.total_requests);
    println!(
        "   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {:.2}ms",
        perf_metrics.average_response_time_ms
    );

    println!("‚úÖ LSP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");

    // === –¢–ï–°–¢ 5: –í–ï–ë –ò–ù–¢–ï–†–§–ï–ô–° ===
    println!("\n5Ô∏è‚É£ –¢–µ—Å—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...");

    let web_interface = central_system.web_interface();

    // –¢–µ—Å—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏
    let hierarchy_response = web_interface.handle_hierarchy_request().await?;
    println!(
        "   - –ò–µ—Ä–∞—Ä—Ö–∏—è: {} –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        hierarchy_response.categories.len()
    );
    println!(
        "   - –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏: {}",
        hierarchy_response.total_types
    );

    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ (–∑–∞–≥–ª—É—à–∫–∏ –≤ Application Layer)
    println!(
        "   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {} (–≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏)",
        hierarchy_response.categories.len()
    );

    // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    let search_request = WebSearchRequest {
        query: "–º–∞—Å—Å–∏–≤".to_string(),
        page: Some(1),
        per_page: Some(10),
        filters: None,
    };

    let search_response = web_interface.handle_search_request(search_request).await?;
    println!(
        "   - –ü–æ–∏—Å–∫ '–º–∞—Å—Å–∏–≤': {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        search_response.results.len()
    );
    println!("   - –°—Ç—Ä–∞–Ω–∏—Ü: {}", search_response.total_pages);

    println!("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");

    // === –¢–ï–°–¢ 6: CLI –ò–ù–¢–ï–†–§–ï–ô–° ===
    println!("\n6Ô∏è‚É£ –¢–µ—Å—Ç CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...");

    let cli_interface = central_system.cli_interface();

    // –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
    let analysis_request = CliAnalysisRequest {
        project_path: std::path::PathBuf::from("tests/fixtures"),
        output_format: CliOutputFormat::Text,
        include_coverage: true,
        include_errors: true,
        verbose: false,
    };

    let analysis_response = cli_interface
        .handle_analysis_request(analysis_request)
        .await?;
    println!("   - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞:");
    println!("     ‚Ä¢ –§–∞–π–ª–æ–≤: {}", analysis_response.summary.total_files);
    println!(
        "     ‚Ä¢ –§—É–Ω–∫—Ü–∏–π: {}",
        analysis_response.summary.total_functions
    );
    println!(
        "     ‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {}",
        analysis_response.summary.total_variables
    );
    println!("     ‚Ä¢ –û—à–∏–±–æ–∫: {}", analysis_response.summary.error_count);

    if let Some(coverage) = &analysis_response.coverage {
        println!("     ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ: {:.1}%", coverage.coverage_percentage);
    }

    println!("‚úÖ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");

    // === –¢–ï–°–¢ 7: –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===
    println!("\n7Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");

    let performance_start = std::time::Instant::now();

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    for i in 0..10 {
        let test_request = LspCompletionRequest {
            file_path: "perf_test.bsl".to_string(),
            line: i,
            column: 1,
            prefix: "–¢–µ—Å—Ç".to_string(),
            trigger_character: None,
        };

        let _response = lsp_interface
            .handle_completion_request(test_request)
            .await?;
    }

    let performance_time = performance_start.elapsed();
    println!("   - 10 LSP –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞: {:?}", performance_time);
    println!("   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: {:?}", performance_time / 10);

    assert!(
        performance_time.as_millis() < 1000,
        "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–æ–π"
    );
    println!("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è");

    // === –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê ===
    println!("\nüéØ –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´");
    println!("{}", "=".repeat(60));

    let final_metrics = central_system.get_system_metrics().await;
    let final_health = central_system.health_check().await;

    println!("üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:");
    println!("   - –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞: {}", final_health.status == "healthy");
    println!("   - –¢–∏–ø–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {}", final_metrics.total_types);
    println!("   - –û–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {}", final_metrics.total_requests);
    println!("   - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è + —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
    let mut success_criteria = Vec::new();

    // –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –¢–∏–ø—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if final_metrics.total_types > 10000 {
        success_criteria.push("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ >10k —Ç–∏–ø–æ–≤");
    } else {
        success_criteria.push("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–ø–æ–≤");
    }

    // –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞
    if final_health.status == "healthy" {
        success_criteria.push("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞");
    } else {
        success_criteria.push("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º");
    }

    // –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –í—Å–µ —Å–ª–æ–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    let all_layers_ready = final_health
        .components
        .iter()
        .all(|comp| comp.status == "healthy");
    if all_layers_ready {
        success_criteria.push("‚úÖ –í—Å–µ —Å–ª–æ–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≥–æ—Ç–æ–≤—ã");
    } else {
        success_criteria.push("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–ª–æ—è—Ö");
    }

    // –ö—Ä–∏—Ç–µ—Ä–∏–π 4: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –æ—Ç–≤–µ—á–∞—é—Ç
    if final_metrics.total_requests > 0 {
        success_criteria.push("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∑–∞–ø—Ä–æ—Å—ã");
    } else {
        success_criteria.push("‚ùå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è");
    }

    println!("\nüèÜ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:");
    for criterion in &success_criteria {
        println!("   {}", criterion);
    }

    let passed_criteria = success_criteria
        .iter()
        .filter(|c| c.starts_with("‚úÖ"))
        .count();

    println!(
        "\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {}/{} –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ",
        passed_criteria,
        success_criteria.len()
    );

    if passed_criteria == success_criteria.len() {
        println!("üéâ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê!");
        println!("üöÄ –ò–¥–µ–∞–ª—å–Ω–∞—è —Å–ª–æ–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ BSL Type System —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ production!");
    } else {
        println!("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏");
    }

    Ok(())
}
