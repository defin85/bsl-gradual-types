//! –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Configuration-guided Discovery –ø–∞—Ä—Å–µ—Ä–∞

use bsl_gradual_types::adapters::config_parser_guided_discovery::ConfigurationGuidedParser;

fn main() {
    println!("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Configuration-guided –ø–∞—Ä—Å–µ—Ä–∞");

    let mut parser = ConfigurationGuidedParser::new("tests/fixtures/xml_full");

    match parser.parse_with_configuration_guide() {
        Ok(resolutions) => {
            let stats = parser.get_guided_discovery_stats();

            println!("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
            println!("   TypeResolution: {}", resolutions.len());
            println!("   –û–±—ä–µ–∫—Ç—ã: {}", stats.found_objects);
            println!("   –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {}", stats.catalogs);
            println!("   –î–æ–∫—É–º–µ–Ω—Ç—ã: {}", stats.documents);
            println!("   –†–µ–≥–∏—Å—Ç—Ä—ã: {}", stats.registers);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            if let Some(metadata) =
                parser.get_discovered_metadata("–†–µ–≥–∏—Å—Ç—Ä—ã–°–≤–µ–¥–µ–Ω–∏–π.–¢–µ—Å—Ç–æ–≤—ã–π–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π")
            {
                println!("üìä –†–µ–≥–∏—Å—Ç—Ä –¢–µ—Å—Ç–æ–≤—ã–π–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π:");
                println!("   –ê—Ç—Ä–∏–±—É—Ç—ã: {}", metadata.attributes.len());
                for attr in &metadata.attributes {
                    println!("   - {} ({})", attr.name, attr.type_definition);
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∏
                assert_eq!(metadata.attributes.len(), 5);
                let names: Vec<&str> = metadata
                    .attributes
                    .iter()
                    .map(|a| a.name.as_str())
                    .collect();
                assert!(names.contains(&"–¢–µ—Å—Ç–æ–≤—ã–π–†–µ—Å—É—Ä—Å"));
                assert!(names.contains(&"–¢–µ—Å—Ç–æ–≤—ã–π–†–µ–∫–≤–∏–∑–∏—Ç"));
                assert!(names.contains(&"–¢–µ—Å—Ç–æ–≤–æ–µ–ò–∑–º–µ—Ä–µ–Ω–∏–µ"));
                assert!(names.contains(&"–ü–µ—Ä–∏–æ–¥"));
                assert!(names.contains(&"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"));

                println!("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!");
            }
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞: {}", e);
        }
    }
}
