//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è HTML —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

use anyhow::Result;
use bsl_gradual_types::documentation::core::hierarchy::{CategoryNode, TypeHierarchy};
use bsl_gradual_types::documentation::{
    AdvancedSearchQuery, DocumentationSearchEngine, RenderEngine,
};
use std::fs;

#[tokio::main]
async fn main() -> Result<()> {
    println!("üé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è HTML —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ BSL –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏");

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä-–¥–≤–∏–∂–æ–∫
    let render_engine = RenderEngine::new();
    println!("‚úÖ RenderEngine —Å–æ–∑–¥–∞–Ω");

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é
    let test_hierarchy = create_test_hierarchy();
    println!(
        "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è —Å–æ–∑–¥–∞–Ω–∞: {} –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        test_hierarchy.root_categories.len()
    );

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤ HTML
    println!("\n=== üèóÔ∏è –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–µ—Ä–∞—Ä—Ö–∏–∏ ===");
    let hierarchy_html = render_engine.render_hierarchy_html(&test_hierarchy).await?;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    let output_file = "type_hierarchy_rendered.html";
    fs::write(output_file, &hierarchy_html)?;
    println!("‚úÖ HTML –∏–µ—Ä–∞—Ä—Ö–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {}", output_file);
    println!("üìÑ –†–∞–∑–º–µ—Ä HTML: {} —Å–∏–º–≤–æ–ª–æ–≤", hierarchy_html.len());

    // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    println!("\n=== üîç –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ ===");
    let search_engine = DocumentationSearchEngine::new();

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    let test_query = AdvancedSearchQuery {
        query: "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π".to_string(),
        ..Default::default()
    };

    let search_results = search_engine.search(test_query).await?;
    println!(
        "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {} –Ω–∞–π–¥–µ–Ω–æ",
        search_results.total_count
    );

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    let search_html = render_engine
        .html_renderer
        .render_search_results(&search_results)
        .await?;

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    let full_search_page = format!(
        "<!DOCTYPE html>\n\
         <html>\n\
         <head>\n\
         <meta charset='UTF-8'>\n\
         <title>BSL Search Results</title>\n\
         {}\n\
         </head>\n\
         <body>\n\
         {}\n\
         </body>\n\
         </html>",
        render_engine.html_renderer.render_css(),
        search_html
    );

    let search_output_file = "search_results_rendered.html";
    fs::write(search_output_file, &full_search_page)?;
    println!("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {}", search_output_file);

    // –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
    println!("\n=== üé® –¢–µ—Å—Ç —Ç–µ–º ===");
    let themes = render_engine.get_available_themes();
    println!("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: {:?}", themes);

    for theme_name in themes {
        println!("  ‚úÖ –¢–µ–º–∞ '{}' –¥–æ—Å—Ç—É–ø–Ω–∞", theme_name);
    }

    println!("\nüéâ HTML —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥–æ—Ç–æ–≤!");
    println!("üåê –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:");
    println!("  - {}", output_file);
    println!("  - {}", search_output_file);

    Ok(())
}

/// –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
fn create_test_hierarchy() -> TypeHierarchy {
    use bsl_gradual_types::documentation::core::hierarchy::{
        DocumentationNode, HierarchyStatistics, NavigationIndex, RootCategoryNode, SubCategoryNode,
    };
    use std::collections::HashMap;

    // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    let root_category = RootCategoryNode {
        id: "global_context".to_string(),
        name: "Global Context".to_string(),
        description: "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ".to_string(),
        children: vec![
            DocumentationNode::SubCategory(SubCategoryNode {
                id: "universal_collections".to_string(),
                name: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏".to_string(),
                description: "–ö–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏".to_string(),
                hierarchy_path: vec![
                    "Global Context".to_string(),
                    "Universal collections".to_string(),
                ],
            }),
            DocumentationNode::SubCategory(SubCategoryNode {
                id: "system_types".to_string(),
                name: "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∏–ø—ã".to_string(),
                description: "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã".to_string(),
                hierarchy_path: vec!["Global Context".to_string(), "System types".to_string()],
            }),
        ],
        ui_metadata: Default::default(),
        statistics: Default::default(),
    };

    TypeHierarchy {
        root_categories: vec![root_category],
        statistics: HierarchyStatistics {
            total_nodes: 3,
            node_counts: HashMap::new(),
            max_depth: 2,
            average_children_per_node: 2.0,
            most_populated_category: "Universal collections".to_string(),
        },
        navigation_index: NavigationIndex {
            by_id: HashMap::new(),
            by_russian_name: HashMap::new(),
            by_english_name: HashMap::new(),
        },
    }
}
