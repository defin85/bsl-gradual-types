"use strict";
/**
 * BSL Gradual Type System - Enhanced VSCode Extension
 *
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç VSCode —Å enhanced LSP —Å–µ—Ä–≤–µ—Ä–æ–º, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è:
 * - Flow-sensitive type analysis
 * - Union types —Å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
 * - Code actions –∏ type hints
 * - Performance profiling integration
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnhancedPackageContributions = exports.deactivate = exports.activate = void 0;
const vscode = __importStar(require("vscode"));
// Enhanced imports –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
const enhanced_client_1 = require("./lsp/enhanced-client");
const type_hints_simple_1 = require("./providers/type-hints-simple");
const code_actions_simple_1 = require("./providers/code-actions-simple");
const performance_monitor_1 = require("./utils/performance-monitor");
const enhanced_diagnostics_simple_1 = require("./providers/enhanced-diagnostics-simple");
// –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
const configHelper_1 = require("./config/configHelper");
const binaryPath_1 = require("./utils/binaryPath");
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let languageClient = null;
let outputChannel;
let statusBarItem;
let performanceMonitor;
let extensionContext;
// Providers
let typeHintsProvider;
let codeActionsProvider;
let diagnosticsProvider;
/**
 * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
async function activate(context) {
    extensionContext = context;
    // –°–æ–∑–¥–∞–µ–º output channel
    outputChannel = vscode.window.createOutputChannel('BSL Gradual Types');
    context.subscriptions.push(outputChannel);
    // –°–æ–∑–¥–∞–µ–º status bar item
    statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);
    statusBarItem.text = "$(loading~spin) BSL: Initializing...";
    statusBarItem.show();
    context.subscriptions.push(statusBarItem);
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º performance monitor
    performanceMonitor = new performance_monitor_1.PerformanceMonitor(outputChannel);
    try {
        outputChannel.appendLine('üöÄ Activating BSL Gradual Type System...');
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        await loadConfiguration();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º enhanced LSP –∫–ª–∏–µ–Ω—Ç
        await initializeEnhancedLsp();
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º providers
        await registerEnhancedProviders();
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        registerEnhancedCommands();
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º final status
        statusBarItem.text = "$(check) BSL: Ready";
        statusBarItem.tooltip = "BSL Gradual Type System –∞–∫—Ç–∏–≤–µ–Ω";
        outputChannel.appendLine('‚úÖ BSL Gradual Type System activated successfully!');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º welcome message –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        await showWelcomeMessage();
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        outputChannel.appendLine(`‚ùå Activation failed: ${errorMessage}`);
        statusBarItem.text = "$(error) BSL: Error";
        statusBarItem.tooltip = `Error: ${errorMessage}`;
        vscode.window.showErrorMessage(`BSL Gradual Type System activation failed: ${errorMessage}`);
    }
}
exports.activate = activate;
/**
 * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
async function deactivate() {
    outputChannel.appendLine('üîÑ Deactivating BSL Gradual Type System...');
    try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º LSP –∫–ª–∏–µ–Ω—Ç
        if (languageClient) {
            await languageClient.stop();
            languageClient = null;
        }
        // Cleanup performance monitor
        performanceMonitor?.dispose();
        outputChannel.appendLine('‚úÖ BSL Gradual Type System deactivated successfully');
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        outputChannel.appendLine(`‚ö†Ô∏è Deactivation warning: ${errorMessage}`);
    }
}
exports.deactivate = deactivate;
/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
async function loadConfiguration() {
    outputChannel.appendLine('üìã Loading configuration...');
    // –ú–∏–≥—Ä–∞—Ü–∏—è legacy –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await migrateLegacySettings();
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const config = configHelper_1.BslAnalyzerConfig;
    if (!config.isValid()) {
        throw new Error('Invalid configuration detected');
    }
    outputChannel.appendLine(`‚úÖ Configuration loaded: ${JSON.stringify(config.summary(), null, 2)}`);
}
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enhanced LSP –∫–ª–∏–µ–Ω—Ç–∞
 */
async function initializeEnhancedLsp() {
    outputChannel.appendLine('üîó Initializing Enhanced LSP client...');
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ enhanced LSP —Å–µ—Ä–≤–µ—Ä—É
    const serverPath = (0, binaryPath_1.getBinaryPath)('lsp-server', extensionContext);
    if (!serverPath) {
        throw new Error('Enhanced LSP server binary not found');
    }
    outputChannel.appendLine(`üìç Enhanced LSP server path: ${serverPath}`);
    // –°–æ–∑–¥–∞–µ–º enhanced LSP –∫–ª–∏–µ–Ω—Ç
    languageClient = new enhanced_client_1.EnhancedLspClient(serverPath, outputChannel, performanceMonitor);
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    await languageClient.start();
    outputChannel.appendLine('‚úÖ Enhanced LSP client started successfully');
}
/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è enhanced providers
 */
async function registerEnhancedProviders() {
    outputChannel.appendLine('üîå Registering enhanced providers...');
    if (!languageClient) {
        throw new Error('Language client not initialized');
    }
    // Type hints provider (inlay hints)
    typeHintsProvider = new type_hints_simple_1.TypeHintsProvider(languageClient);
    extensionContext.subscriptions.push(vscode.languages.registerInlayHintsProvider({ scheme: 'file', language: 'bsl' }, typeHintsProvider));
    // Enhanced code actions provider
    codeActionsProvider = new code_actions_simple_1.CodeActionsProvider(languageClient);
    extensionContext.subscriptions.push(vscode.languages.registerCodeActionsProvider({ scheme: 'file', language: 'bsl' }, codeActionsProvider, {
        providedCodeActionKinds: [
            vscode.CodeActionKind.QuickFix,
            vscode.CodeActionKind.Refactor,
            vscode.CodeActionKind.RefactorExtract,
        ]
    }));
    // Enhanced diagnostics provider
    diagnosticsProvider = new enhanced_diagnostics_simple_1.EnhancedDiagnosticsProvider(languageClient, outputChannel);
    outputChannel.appendLine('‚úÖ Enhanced providers registered');
}
/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è enhanced –∫–æ–º–∞–Ω–¥
 */
function registerEnhancedCommands() {
    outputChannel.appendLine('‚öôÔ∏è Registering enhanced commands...');
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ type –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    extensionContext.subscriptions.push(vscode.commands.registerCommand('bsl.showTypeInfo', async () => {
        await showTypeInfoAtCursor();
    }));
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ performance profiling
    extensionContext.subscriptions.push(vscode.commands.registerCommand('bsl.runPerformanceProfiling', async () => {
        await runPerformanceProfiling();
    }));
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
    extensionContext.subscriptions.push(vscode.commands.registerCommand('bsl.analyzeProject', async () => {
        await analyzeCurrentProject();
    }));
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ type hints –Ω–∞—Å—Ç—Ä–æ–µ–∫
    extensionContext.subscriptions.push(vscode.commands.registerCommand('bsl.configureTypeHints', async () => {
        await configureTypeHints();
    }));
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è cache —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    extensionContext.subscriptions.push(vscode.commands.registerCommand('bsl.clearAnalysisCache', async () => {
        await clearAnalysisCache();
    }));
    outputChannel.appendLine('‚úÖ Enhanced commands registered');
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç—å type –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
 */
async function showTypeInfoAtCursor() {
    const editor = vscode.window.activeTextEditor;
    if (!editor || !languageClient) {
        return;
    }
    const position = editor.selection.active;
    const document = editor.document;
    try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º enhanced hover –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const hover = await languageClient.getEnhancedHover(document.uri.toString(), position);
        if (hover) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ webview panel –¥–ª—è rich content
            const panel = vscode.window.createWebviewPanel('bslTypeInfo', 'BSL Type Information', vscode.ViewColumn.Beside, { enableScripts: true });
            panel.webview.html = generateTypeInfoHtml(hover);
        }
        else {
            vscode.window.showInformationMessage('No type information available at cursor');
        }
    }
    catch (error) {
        outputChannel.appendLine(`‚ùå Error getting type info: ${error}`);
        vscode.window.showErrorMessage('Failed to get type information');
    }
}
/**
 * –ó–∞–ø—É—Å–∫ performance profiling —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
 */
async function runPerformanceProfiling() {
    const editor = vscode.window.activeTextEditor;
    if (!editor) {
        vscode.window.showWarningMessage('No active BSL file');
        return;
    }
    const filePath = editor.document.uri.fsPath;
    try {
        statusBarItem.text = "$(loading~spin) BSL: Profiling...";
        // –ó–∞–ø—É—Å–∫–∞–µ–º profiler —á–µ—Ä–µ–∑ –Ω–∞—à LSP —Å–µ—Ä–≤–µ—Ä
        const result = await languageClient?.requestPerformanceProfiling(filePath);
        if (result) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ output channel
            outputChannel.show();
            outputChannel.appendLine('üìä Performance Profiling Results:');
            outputChannel.appendLine(result.humanReadableReport);
            vscode.window.showInformationMessage(`Performance profiling completed. Check output for details.`, 'Show Output').then(selection => {
                if (selection === 'Show Output') {
                    outputChannel.show();
                }
            });
        }
        statusBarItem.text = "$(check) BSL: Ready";
    }
    catch (error) {
        statusBarItem.text = "$(error) BSL: Error";
        outputChannel.appendLine(`‚ùå Profiling error: ${error}`);
        vscode.window.showErrorMessage('Performance profiling failed');
    }
}
/**
 * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 */
async function analyzeCurrentProject() {
    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];
    if (!workspaceFolder) {
        vscode.window.showWarningMessage('No workspace folder open');
        return;
    }
    const projectPath = workspaceFolder.uri.fsPath;
    try {
        statusBarItem.text = "$(loading~spin) BSL: Analyzing project...";
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º progress notification
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: "Analyzing BSL project",
            cancellable: true
        }, async (progress, token) => {
            progress.report({ increment: 0, message: "Starting analysis..." });
            const result = await languageClient?.requestProjectAnalysis(projectPath, {
                useParallelAnalysis: true,
                enableCaching: true,
                showProgress: true
            });
            if (result) {
                progress.report({ increment: 100, message: "Analysis completed" });
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                const message = `Analysis completed!\n` +
                    `Files: ${result.stats.totalFiles}\n` +
                    `Functions: ${result.stats.totalFunctions}\n` +
                    `Diagnostics: ${result.stats.totalDiagnostics}`;
                vscode.window.showInformationMessage(message, 'Show Details').then(selection => {
                    if (selection === 'Show Details') {
                        showProjectAnalysisResults(result);
                    }
                });
            }
        });
        statusBarItem.text = "$(check) BSL: Ready";
    }
    catch (error) {
        statusBarItem.text = "$(error) BSL: Error";
        outputChannel.appendLine(`‚ùå Project analysis error: ${error}`);
        vscode.window.showErrorMessage('Project analysis failed');
    }
}
/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ type hints
 */
async function configureTypeHints() {
    const config = vscode.workspace.getConfiguration('bsl.typeHints');
    const options = [
        { label: 'Show variable types', setting: 'showVariableTypes' },
        { label: 'Show return types', setting: 'showReturnTypes' },
        { label: 'Show union details', setting: 'showUnionDetails' },
        { label: 'Show parameter types', setting: 'showParameterTypes' }
    ];
    const quickPick = vscode.window.createQuickPick();
    quickPick.items = options.map(opt => ({
        label: opt.label,
        description: config.get(opt.setting) ? '‚úÖ Enabled' : '‚ùå Disabled',
        detail: opt.setting
    }));
    quickPick.canSelectMany = true;
    quickPick.title = 'Configure Type Hints';
    quickPick.onDidAccept(() => {
        const selected = quickPick.selectedItems;
        options.forEach(opt => {
            const isSelected = selected.some(item => item.detail === opt.setting);
            config.update(opt.setting, isSelected, vscode.ConfigurationTarget.Global);
        });
        vscode.window.showInformationMessage('Type hints configuration updated');
        quickPick.hide();
    });
    quickPick.show();
}
/**
 * –û—á–∏—Å—Ç–∫–∞ cache –∞–Ω–∞–ª–∏–∑–∞
 */
async function clearAnalysisCache() {
    try {
        const result = await languageClient?.requestCacheClear();
        if (result?.success) {
            vscode.window.showInformationMessage(`Analysis cache cleared. Freed ${result.freedBytes} bytes.`);
        }
        else {
            vscode.window.showWarningMessage('Failed to clear analysis cache');
        }
    }
    catch (error) {
        outputChannel.appendLine(`‚ùå Cache clear error: ${error}`);
        vscode.window.showErrorMessage('Failed to clear cache');
    }
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç—å welcome message –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
 */
async function showWelcomeMessage() {
    const config = vscode.workspace.getConfiguration('bsl');
    const hasShownWelcome = config.get('hasShownWelcome', false);
    if (!hasShownWelcome) {
        const selection = await vscode.window.showInformationMessage('üéâ Welcome to BSL Gradual Type System! ' +
            'This is a production-ready type system with flow-sensitive analysis, ' +
            'union types, and enhanced LSP features.', 'Show Features', 'Configure', "Don't show again");
        switch (selection) {
            case 'Show Features':
                await showFeaturesOverview();
                break;
            case 'Configure':
                await vscode.commands.executeCommand('workbench.action.openSettings', 'bsl');
                break;
            case "Don't show again":
                await config.update('hasShownWelcome', true, vscode.ConfigurationTarget.Global);
                break;
        }
    }
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
 */
async function showFeaturesOverview() {
    const panel = vscode.window.createWebviewPanel('bslFeatures', 'BSL Gradual Type System Features', vscode.ViewColumn.Active, { enableScripts: true });
    panel.webview.html = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>BSL Features</title>
            <style>
                body { font-family: var(--vscode-font-family); padding: 20px; }
                .feature { margin: 20px 0; padding: 15px; border-left: 4px solid var(--vscode-accent); }
                .feature h3 { margin-top: 0; color: var(--vscode-accent); }
                .performance { background: var(--vscode-terminal-ansiGreen); color: white; padding: 5px 10px; border-radius: 3px; }
            </style>
        </head>
        <body>
            <h1>üöÄ BSL Gradual Type System v1.0.0</h1>
            
            <div class="feature">
                <h3>üîç Flow-Sensitive Analysis</h3>
                <p>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã</p>
            </div>
            
            <div class="feature">
                <h3>üîó Union Types</h3>
                <p>–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ Union —Ç–∏–ø—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏</p>
            </div>
            
            <div class="feature">
                <h3>‚ö° Enhanced LSP</h3>
                <p>–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥, —É–º–Ω–æ–µ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, real-time –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</p>
            </div>
            
            <div class="feature">
                <h3>üéØ Type Hints</h3>
                <p>Inline –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ</p>
            </div>
            
            <div class="feature">
                <h3>üõ†Ô∏è Code Actions</h3>
                <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</p>
            </div>
            
            <div class="performance">
                üìä Performance: –ü–∞—Ä—Å–∏–Ω–≥ ~189Œºs | Type Checking ~125Œºs | Flow Analysis ~175ns
            </div>
        </body>
        </html>
    `;
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
 */
async function showProjectAnalysisResults(results) {
    const panel = vscode.window.createWebviewPanel('bslProjectResults', 'Project Analysis Results', vscode.ViewColumn.Active, { enableScripts: true });
    panel.webview.html = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Project Analysis Results</title>
            <style>
                body { font-family: var(--vscode-font-family); padding: 20px; }
                .stat { display: flex; justify-content: space-between; margin: 10px 0; }
                .stat-value { font-weight: bold; color: var(--vscode-accent); }
            </style>
        </head>
        <body>
            <h1>üìä Project Analysis Results</h1>
            
            <div class="stat">
                <span>üìÅ Total Files:</span>
                <span class="stat-value">${results.stats.totalFiles}</span>
            </div>
            <div class="stat">
                <span>‚úÖ Successful:</span>
                <span class="stat-value">${results.stats.successfulFiles}</span>
            </div>
            <div class="stat">
                <span>üîß Functions Found:</span>
                <span class="stat-value">${results.stats.totalFunctions}</span>
            </div>
            <div class="stat">
                <span>üì¶ Variables Found:</span>
                <span class="stat-value">${results.stats.totalVariables}</span>
            </div>
            <div class="stat">
                <span>üö® Diagnostics:</span>
                <span class="stat-value">${results.stats.totalDiagnostics}</span>
            </div>
            <div class="stat">
                <span>‚è±Ô∏è Analysis Time:</span>
                <span class="stat-value">${results.totalTime}</span>
            </div>
            
            <h2>üéØ Performance</h2>
            <div class="stat">
                <span>üìà Average per file:</span>
                <span class="stat-value">${results.stats.avgAnalysisTime}</span>
            </div>
        </body>
        </html>
    `;
}
/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è type info
 */
function generateTypeInfoHtml(hover) {
    return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Type Information</title>
            <style>
                body { 
                    font-family: var(--vscode-font-family); 
                    padding: 20px; 
                    background: var(--vscode-editor-background);
                    color: var(--vscode-editor-foreground);
                }
                .type-info { 
                    background: var(--vscode-textBlockQuote-background); 
                    padding: 15px; 
                    border-radius: 5px; 
                    border-left: 4px solid var(--vscode-accent);
                }
                .confidence { 
                    color: var(--vscode-terminal-ansiGreen); 
                    font-weight: bold; 
                }
                .source { 
                    color: var(--vscode-terminal-ansiBlue); 
                    font-style: italic; 
                }
            </style>
        </head>
        <body>
            <div class="type-info">
                ${hover.contents.value}
            </div>
        </body>
        </html>
    `;
}
/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json —Å enhanced —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 */
function getEnhancedPackageContributions() {
    return {
        commands: [
            {
                command: "bsl.showTypeInfo",
                title: "Show Type Information",
                category: "BSL"
            },
            {
                command: "bsl.runPerformanceProfiling",
                title: "Run Performance Profiling",
                category: "BSL"
            },
            {
                command: "bsl.analyzeProject",
                title: "Analyze Project",
                category: "BSL"
            },
            {
                command: "bsl.configureTypeHints",
                title: "Configure Type Hints",
                category: "BSL"
            },
            {
                command: "bsl.clearAnalysisCache",
                title: "Clear Analysis Cache",
                category: "BSL"
            }
        ],
        configuration: {
            type: "object",
            title: "BSL Gradual Type System",
            properties: {
                "bsl.typeHints.showVariableTypes": {
                    type: "boolean",
                    default: true,
                    description: "Show type hints for variables"
                },
                "bsl.typeHints.showReturnTypes": {
                    type: "boolean",
                    default: true,
                    description: "Show type hints for function return types"
                },
                "bsl.typeHints.showUnionDetails": {
                    type: "boolean",
                    default: true,
                    description: "Show detailed information for Union types"
                },
                "bsl.typeHints.minCertainty": {
                    type: "number",
                    default: 0.7,
                    minimum: 0.0,
                    maximum: 1.0,
                    description: "Minimum certainty level to show type hints"
                },
                "bsl.performance.enableProfiling": {
                    type: "boolean",
                    default: false,
                    description: "Enable automatic performance profiling"
                },
                "bsl.analysis.useParallelProcessing": {
                    type: "boolean",
                    default: true,
                    description: "Use parallel processing for project analysis"
                },
                "bsl.analysis.enableCaching": {
                    type: "boolean",
                    default: true,
                    description: "Enable caching of analysis results"
                }
            }
        }
    };
}
exports.getEnhancedPackageContributions = getEnhancedPackageContributions;
//# sourceMappingURL=extension-enhanced.js.map