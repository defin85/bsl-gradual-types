//! –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ConfigurationGuidedParser

use anyhow::Result;

fn main() -> Result<()> {
    println!("üöÄ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ConfigurationGuidedParser");

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è ConfigurationGuidedParser
    use bsl_gradual_types::adapters::config_parser_guided_discovery::ConfigurationGuidedParser;

    println!("\n=== –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ ConfigurationGuidedParser ===");
    let guided_parser = ConfigurationGuidedParser::new("test_path");
    println!(
        "‚úÖ ConfigurationGuidedParser —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {:?}",
        guided_parser
    );

    println!("\n=== –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ ===");
    println!("‚úÖ –í—Å–µ —Ç–∏–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏ –∫–æ–º–ø–∏–ª–∏—Ä—É—é—Ç—Å—è");

    println!("\nüéâ –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    Ok(())
}
