//! Discovery-based –ø–∞—Ä—Å–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ
//! 
//! –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
//! - –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
//! - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ XML
//! - –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –≤—Å–µ—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤
//! - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É

use anyhow::{Context, Result};
use quick_xml::events::Event;
use quick_xml::Reader;
use std::collections::HashMap;
use std::fs;
use std::path::{Path, PathBuf};

use crate::core::types::{
    Attribute, Certainty, ConcreteType, ConfigurationType, FacetKind,
    MetadataKind, ResolutionMetadata, ResolutionResult, ResolutionSource,
    TabularSection, TypeResolution,
};

/// Discovery-based –ø–∞—Ä—Å–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
#[derive(Debug)]
pub struct ConfigurationDiscoveryParser {
    config_path: PathBuf,
    discovered_objects: HashMap<String, DiscoveredMetadata>,
}

/// –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
#[derive(Debug, Clone)]
pub struct DiscoveredMetadata {
    pub name: String,
    pub kind: MetadataKind,
    pub qualified_name: String,
    pub file_path: PathBuf,
    pub synonym: Option<String>,
    pub uuid: Option<String>,
    pub attributes: Vec<AttributeInfo>,
    pub tabular_sections: Vec<TabularSectionInfo>,
    pub discovery_context: DiscoveryContext,
}

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
#[derive(Debug, Clone)]
pub struct DiscoveryContext {
    pub discovered_from_path: String,
    pub xml_root_element: String,
    pub discovery_method: DiscoveryMethod,
}

/// –ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
#[derive(Debug, Clone)]
pub enum DiscoveryMethod {
    /// –ü–æ –∫–æ—Ä–Ω–µ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É XML
    XmlRootElement,
    /// –ü–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
    DirectoryStructure,
    /// –ü–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞
    FileContent,
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ç—Ä–∏–±—É—Ç–µ
#[derive(Debug, Clone)]
pub struct AttributeInfo {
    pub name: String,
    pub type_definition: String,
    pub synonym: Option<String>,
    pub mandatory: bool,
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—á–Ω–æ–π —á–∞—Å—Ç–∏
#[derive(Debug, Clone)]
pub struct TabularSectionInfo {
    pub name: String,
    pub synonym: Option<String>,
    pub attributes: Vec<AttributeInfo>,
}

impl ConfigurationDiscoveryParser {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π discovery-based –ø–∞—Ä—Å–µ—Ä
    pub fn new<P: AsRef<Path>>(config_path: P) -> Self {
        Self {
            config_path: config_path.as_ref().to_path_buf(),
            discovered_objects: HashMap::new(),
        }
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å discovery –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    pub fn discover_and_parse(&mut self) -> Result<Vec<TypeResolution>> {
        println!("üîç –ó–∞–ø—É—Å–∫ Discovery-based –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", self.config_path.display());

        // –§–∞–∑–∞ 1: Discovery - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        let discovered_files = self.discover_structure()?;
        println!("üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {} XML —Ñ–∞–π–ª–æ–≤", discovered_files.len());

        // –§–∞–∑–∞ 2: Parsing - –ø–∞—Ä—Å–∏–Ω–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        let mut resolutions = Vec::new();
        for file_info in discovered_files {
            match self.parse_discovered_xml(&file_info) {
                Ok(metadata) => {
                    println!("   ‚úÖ {}: {} ({})", 
                        self.get_kind_display_name(metadata.kind),
                        metadata.name,
                        metadata.discovery_context.xml_root_element
                    );
                    
                    // –°–æ–∑–¥–∞–µ–º TypeResolution –¥–ª—è –≤—Å–µ—Ö —Ñ–∞—Å–µ—Ç–æ–≤
                    resolutions.extend(self.create_type_resolutions(&metadata));
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                    self.discovered_objects.insert(metadata.qualified_name.clone(), metadata);
                }
                Err(e) => {
                    println!("   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {}: {}", file_info.path.display(), e);
                }
            }
        }

        println!("‚úÖ Discovery –∑–∞–≤–µ—Ä—à–µ–Ω: {} —Ç–∏–ø–æ–≤ –∏–∑ {} –æ–±—ä–µ–∫—Ç–æ–≤", 
            resolutions.len(), 
            self.discovered_objects.len()
        );

        Ok(resolutions)
    }

    /// –§–∞–∑–∞ 1: Discovery - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö XML —Ñ–∞–π–ª–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    fn discover_structure(&self) -> Result<Vec<DiscoveredFile>> {
        let mut discovered = Vec::new();
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ä–Ω—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.discover_recursive(&self.config_path, &mut discovered)?;
        
        Ok(discovered)
    }

    /// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ XML —Ñ–∞–π–ª–æ–≤
    fn discover_recursive(&self, path: &Path, discovered: &mut Vec<DiscoveredFile>) -> Result<()> {
        if !path.exists() || !path.is_dir() {
            return Ok(());
        }

        for entry in fs::read_dir(path)? {
            let entry = entry?;
            let entry_path = entry.path();

            if entry_path.is_dir() {
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞—Ö–æ–¥–∏–º –≤ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏
                self.discover_recursive(&entry_path, discovered)?;
            } else if entry_path.extension().map_or(false, |ext| ext == "xml") {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ñ–∞–π–ª–æ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                if let Some(file_info) = self.analyze_xml_file(&entry_path)? {
                    discovered.push(file_info);
                }
            }
        }

        Ok(())
    }

    /// –ê–Ω–∞–ª–∏–∑ XML —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    fn analyze_xml_file(&self, xml_path: &Path) -> Result<Option<DiscoveredFile>> {
        // –ß–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        let content = fs::read_to_string(xml_path)
            .with_context(|| format!("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {}", xml_path.display()))?;

        let mut reader = Reader::from_str(&content);
        reader.trim_text(true);
        let mut buf = Vec::new();

        // –ò—â–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        loop {
            match reader.read_event_into(&mut buf) {
                Ok(Event::Start(ref e)) => {
                    let tag_name = String::from_utf8_lossy(e.name().as_ref()).into_owned();
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ—Ä–Ω–µ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                    if let Some(kind) = self.detect_metadata_kind(&tag_name) {
                        return Ok(Some(DiscoveredFile {
                            path: xml_path.to_path_buf(),
                            detected_kind: kind,
                            root_element: tag_name,
                            discovery_method: DiscoveryMethod::XmlRootElement,
                        }));
                    }
                    
                    // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∞–Ω–∞–ª–∏–∑
                    if matches!(tag_name.as_str(), "Configuration" | "Language" | "ConfigDumpInfo") {
                        return Ok(None);
                    }
                }
                Ok(Event::Eof) => break,
                Ok(_) => {}
                Err(_) => break, // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ XML –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞ —ç—Ç–∞–ø–µ discovery
            }
            buf.clear();
        }

        Ok(None)
    }

    /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ—Ä–Ω–µ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É XML
    fn detect_metadata_kind(&self, root_element: &str) -> Option<MetadataKind> {
        match root_element {
            "Catalog" => Some(MetadataKind::Catalog),
            "Document" => Some(MetadataKind::Document),
            "InformationRegister" => Some(MetadataKind::Register),
            "Enum" => Some(MetadataKind::Enum),
            "Report" => Some(MetadataKind::Report),
            "DataProcessor" => Some(MetadataKind::DataProcessor),
            "ChartOfAccounts" => Some(MetadataKind::ChartOfAccounts),
            "ChartOfCharacteristicTypes" => Some(MetadataKind::ChartOfCharacteristicTypes),
            
            // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            "Configuration" => None,  // –ö–æ—Ä–Ω–µ–≤–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            "Language" => None,       // –§–∞–π–ª—ã —è–∑—ã–∫–æ–≤
            "ConfigDumpInfo" => None, // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–≥—Ä—É–∑–∫–µ
            _ => None,
        }
    }

    /// –§–∞–∑–∞ 2: –ü–∞—Ä—Å–∏–Ω–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ XML —Ñ–∞–π–ª–∞
    fn parse_discovered_xml(&self, file_info: &DiscoveredFile) -> Result<DiscoveredMetadata> {
        let content = fs::read_to_string(&file_info.path)
            .with_context(|| format!("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {}", file_info.path.display()))?;

        let mut reader = Reader::from_str(&content);
        reader.trim_text(true);

        let mut metadata = DiscoveredMetadata {
            name: String::new(),
            kind: file_info.detected_kind,
            qualified_name: String::new(),
            file_path: file_info.path.clone(),
            synonym: None,
            uuid: None,
            attributes: Vec::new(),
            tabular_sections: Vec::new(),
            discovery_context: DiscoveryContext {
                discovered_from_path: file_info.path.to_string_lossy().to_string(),
                xml_root_element: file_info.root_element.clone(),
                discovery_method: file_info.discovery_method.clone(),
            },
        };

        let mut buf = Vec::new();
        let mut in_properties = false;
        let mut in_child_objects = false;
        let mut current_element = String::new();
        let mut current_attribute: Option<AttributeInfo> = None;
        let mut current_tabular_section: Option<TabularSectionInfo> = None;

        loop {
            match reader.read_event_into(&mut buf) {
                Ok(Event::Start(ref e)) => {
                    let tag_name = String::from_utf8_lossy(e.name().as_ref()).into_owned();
                    
                    match tag_name.as_str() {
                        "Properties" => in_properties = true,
                        "ChildObjects" => in_child_objects = true,
                        "Attribute" if in_child_objects => {
                            current_attribute = Some(AttributeInfo {
                                name: String::new(),
                                type_definition: String::new(),
                                synonym: None,
                                mandatory: false,
                            });
                        }
                        "TabularSection" if in_child_objects => {
                            current_tabular_section = Some(TabularSectionInfo {
                                name: String::new(),
                                synonym: None,
                                attributes: Vec::new(),
                            });
                        }
                        tag => {
                            current_element = tag.to_string();
                            
                            // –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                            if tag == &file_info.root_element {
                                for attr in e.attributes() {
                                    if let Ok(attr) = attr {
                                        if attr.key.as_ref() == b"uuid" {
                                            if let Ok(uuid_value) = attr.unescape_value() {
                                                metadata.uuid = Some(uuid_value.to_string());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                Ok(Event::Text(e)) => {
                    let text = e.unescape()?.into_owned();
                    
                    if in_properties && !text.trim().is_empty() {
                        match current_element.as_str() {
                            "Name" => {
                                // –ü–∞—Ä—Å–∏–º –∏–º—è –æ–±—ä–µ–∫—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                                if metadata.name.is_empty() {
                                    metadata.name = text;
                                    // –§–æ—Ä–º–∏—Ä—É–µ–º qualified_name
                                    metadata.qualified_name = format!("{}.{}", 
                                        self.get_kind_prefix(metadata.kind), 
                                        metadata.name
                                    );
                                }
                            }
                            _ => {}
                        }
                    } else if let Some(ref mut attr) = current_attribute {
                        match current_element.as_str() {
                            "Name" => attr.name = text,
                            _ => {}
                        }
                    } else if let Some(ref mut ts) = current_tabular_section {
                        match current_element.as_str() {
                            "Name" => ts.name = text,
                            _ => {}
                        }
                    }
                }
                Ok(Event::End(ref e)) => {
                    let tag_name = String::from_utf8_lossy(e.name().as_ref()).into_owned();
                    
                    match tag_name.as_str() {
                        "Properties" => in_properties = false,
                        "ChildObjects" => in_child_objects = false,
                        "Attribute" if in_child_objects => {
                            if let Some(attr) = current_attribute.take() {
                                if !attr.name.is_empty() {
                                    metadata.attributes.push(attr);
                                }
                            }
                        }
                        "TabularSection" if in_child_objects => {
                            if let Some(ts) = current_tabular_section.take() {
                                if !ts.name.is_empty() {
                                    metadata.tabular_sections.push(ts);
                                }
                            }
                        }
                        _ => {}
                    }
                    current_element.clear();
                }
                Ok(Event::Eof) => break,
                Err(e) => {
                    println!("‚ö†Ô∏è XML parsing warning: {} at position {}", e, reader.buffer_position());
                }
                _ => {}
            }
            
            buf.clear();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if metadata.name.is_empty() {
            return Err(anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑ XML"));
        }

        Ok(metadata)
    }

    /// –°–æ–∑–¥–∞–Ω–∏–µ TypeResolution –¥–ª—è –≤—Å–µ—Ö —Ñ–∞—Å–µ—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞
    fn create_type_resolutions(&self, metadata: &DiscoveredMetadata) -> Vec<TypeResolution> {
        let mut resolutions = Vec::new();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞—Å–µ—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        let facets = self.get_facets_for_kind(metadata.kind);
        
        println!("üé≠ –°–æ–∑–¥–∞–µ–º —Ñ–∞—Å–µ—Ç—ã –¥–ª—è {}: {:?}", metadata.name, facets);
        
        // –°–æ–∑–¥–∞–µ–º TypeResolution –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞—Å–µ—Ç–∞
        for facet in facets {
            let config_type = ConfigurationType {
                kind: metadata.kind,
                name: metadata.name.clone(),
                attributes: metadata.attributes.iter().map(|attr| Attribute {
                    name: attr.name.clone(),
                    type_: attr.type_definition.clone(),
                    is_composite: false,
                    types: vec![attr.type_definition.clone()],
                }).collect(),
                tabular_sections: metadata.tabular_sections.iter().map(|ts| TabularSection {
                    name: ts.name.clone(),
                    synonym: ts.synonym.clone(),
                    attributes: ts.attributes.iter().map(|attr| Attribute {
                        name: attr.name.clone(),
                        type_: attr.type_definition.clone(),
                        is_composite: false,
                        types: vec![attr.type_definition.clone()],
                    }).collect(),
                }).collect(),
            };
            
            let resolution = TypeResolution {
                certainty: Certainty::Known,
                result: ResolutionResult::Concrete(ConcreteType::Configuration(config_type)),
                source: ResolutionSource::Static,
                metadata: ResolutionMetadata {
                    file: Some(format!("discovery:{}", metadata.file_path.display())),
                    line: None,
                    column: None,
                    notes: vec![
                        format!("kind:{:?}", metadata.kind),
                        format!("facet:{:?}", facet),
                        format!("discovery_method:{:?}", metadata.discovery_context.discovery_method),
                        format!("xml_root:{}", metadata.discovery_context.xml_root_element),
                        metadata.synonym.as_ref().map(|s| format!("synonym:{}", s)).unwrap_or_default(),
                        metadata.uuid.as_ref().map(|u| format!("uuid:{}", u)).unwrap_or_default(),
                    ].into_iter().filter(|s| !s.is_empty()).collect(),
                },
                active_facet: Some(facet),
                available_facets: vec![facet],
            };
            
            resolutions.push(resolution);
        }
        
        resolutions
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞—Å–µ—Ç—ã –¥–ª—è —Ç–∏–ø–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    fn get_facets_for_kind(&self, kind: MetadataKind) -> Vec<FacetKind> {
        match kind {
            MetadataKind::Catalog => vec![
                FacetKind::Manager,    // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
                FacetKind::Object,     // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–û–±—ä–µ–∫—Ç.–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã  
                FacetKind::Reference,  // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–°—Å—ã–ª–∫–∞.–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
            ],
            MetadataKind::Document => vec![
                FacetKind::Manager,    // –î–æ–∫—É–º–µ–Ω—Ç—ã.–ó–∞–∫–∞–∑–ù–∞—Ä—è–¥—ã
                FacetKind::Object,     // –î–æ–∫—É–º–µ–Ω—Ç–û–±—ä–µ–∫—Ç.–ó–∞–∫–∞–∑–ù–∞—Ä—è–¥—ã
                FacetKind::Reference,  // –î–æ–∫—É–º–µ–Ω—Ç–°—Å—ã–ª–∫–∞.–ó–∞–∫–∞–∑–ù–∞—Ä—è–¥—ã
            ],
            MetadataKind::Register => vec![
                FacetKind::Manager,    // –†–µ–≥–∏—Å—Ç—Ä—ã–°–≤–µ–¥–µ–Ω–∏–π.–¢–µ—Å—Ç–æ–≤—ã–π–†–µ–≥–∏—Å—Ç—Ä
            ],
            MetadataKind::Enum => vec![
                FacetKind::Manager,    // –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è.–í–∏–¥–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
            ],
            _ => vec![FacetKind::Manager], // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –±–∞–∑–æ–≤—ã–π —Ñ–∞—Å–µ—Ç
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
    fn get_kind_display_name(&self, kind: MetadataKind) -> &str {
        match kind {
            MetadataKind::Catalog => "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫",
            MetadataKind::Document => "–î–æ–∫—É–º–µ–Ω—Ç",
            MetadataKind::Register => "–†–µ–≥–∏—Å—Ç—Ä —Å–≤–µ–¥–µ–Ω–∏–π",
            MetadataKind::Enum => "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ",
            MetadataKind::Report => "–û—Ç—á–µ—Ç",
            MetadataKind::DataProcessor => "–û–±—Ä–∞–±–æ—Ç–∫–∞",
            MetadataKind::ChartOfAccounts => "–ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤",
            MetadataKind::ChartOfCharacteristicTypes => "–ü–ª–∞–Ω –≤–∏–¥–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ç–∏–ø–∞
    fn get_kind_prefix(&self, kind: MetadataKind) -> &str {
        match kind {
            MetadataKind::Catalog => "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏",
            MetadataKind::Document => "–î–æ–∫—É–º–µ–Ω—Ç—ã",
            MetadataKind::Register => "–†–µ–≥–∏—Å—Ç—Ä—ã–°–≤–µ–¥–µ–Ω–∏–π",
            MetadataKind::Enum => "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è",
            MetadataKind::Report => "–û—Ç—á–µ—Ç—ã",
            MetadataKind::DataProcessor => "–û–±—Ä–∞–±–æ—Ç–∫–∏",
            MetadataKind::ChartOfAccounts => "–ü–ª–∞–Ω—ã–°—á–µ—Ç–æ–≤",
            MetadataKind::ChartOfCharacteristicTypes => "–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ qualified name
    pub fn get_discovered_metadata(&self, qualified_name: &str) -> Option<&DiscoveredMetadata> {
        self.discovered_objects.get(qualified_name)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    pub fn get_all_discovered(&self) -> &HashMap<String, DiscoveredMetadata> {
        &self.discovered_objects
    }

    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ discovery
    pub fn get_discovery_stats(&self) -> DiscoveryStats {
        let mut stats = DiscoveryStats::default();
        
        for metadata in self.discovered_objects.values() {
            match metadata.kind {
                MetadataKind::Catalog => stats.catalogs += 1,
                MetadataKind::Document => stats.documents += 1,
                MetadataKind::Register => stats.registers += 1,
                MetadataKind::Enum => stats.enums += 1,
                MetadataKind::Report => stats.reports += 1,
                MetadataKind::DataProcessor => stats.data_processors += 1,
                MetadataKind::ChartOfAccounts => stats.chart_of_accounts += 1,
                MetadataKind::ChartOfCharacteristicTypes => stats.chart_of_characteristic_types += 1,
            }
            
            stats.total_attributes += metadata.attributes.len();
            stats.total_tabular_sections += metadata.tabular_sections.len();
        }
        
        stats.total_objects = self.discovered_objects.len();
        stats
    }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
#[derive(Debug, Clone)]
struct DiscoveredFile {
    path: PathBuf,
    detected_kind: MetadataKind,
    root_element: String,
    discovery_method: DiscoveryMethod,
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ discovery
#[derive(Debug, Default)]
pub struct DiscoveryStats {
    pub total_objects: usize,
    pub catalogs: usize,
    pub documents: usize,
    pub registers: usize,
    pub enums: usize,
    pub reports: usize,
    pub data_processors: usize,
    pub chart_of_accounts: usize,
    pub chart_of_characteristic_types: usize,
    pub total_attributes: usize,
    pub total_tabular_sections: usize,
}

impl DiscoveryStats {
    /// –ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    pub fn print(&self) {
        println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Discovery:");
        println!("   –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {}", self.total_objects);
        println!("   –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {}", self.catalogs);
        println!("   –î–æ–∫—É–º–µ–Ω—Ç—ã: {}", self.documents);
        println!("   –†–µ–≥–∏—Å—Ç—Ä—ã —Å–≤–µ–¥–µ–Ω–∏–π: {}", self.registers);
        println!("   –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è: {}", self.enums);
        println!("   –û—Ç—á–µ—Ç—ã: {}", self.reports);
        println!("   –û–±—Ä–∞–±–æ—Ç–∫–∏: {}", self.data_processors);
        println!("   –ü–ª–∞–Ω—ã —Å—á–µ—Ç–æ–≤: {}", self.chart_of_accounts);
        println!("   –ü–ª–∞–Ω—ã –≤–∏–¥–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {}", self.chart_of_characteristic_types);
        println!("   –í—Å–µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {}", self.total_attributes);
        println!("   –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π: {}", self.total_tabular_sections);
    }
}