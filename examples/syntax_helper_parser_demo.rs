//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞ 1–°

use bsl_gradual_types::adapters::syntax_helper_parser::SyntaxHelperParser;
use std::path::Path;
use tracing::{info, Level};
use tracing_subscriber;

fn main() -> anyhow::Result<()> {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    tracing_subscriber::fmt()
        .with_max_level(Level::INFO)
        .init();

    info!("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞ 1–° ===");
    
    // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞
    let context_path = "examples/syntax_helper/rebuilt.shcntx_ru.zip";
    let lang_path = "examples/syntax_helper/rebuilt.shlang_ru.zip";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if !Path::new(context_path).exists() {
        anyhow::bail!("–§–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", context_path);
    }
    
    if !Path::new(lang_path).exists() {
        anyhow::bail!("–§–∞–π–ª —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —è–∑—ã–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", lang_path);
    }
    
    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä
    let mut parser = SyntaxHelperParser::new()
        .with_context_archive(context_path)
        .with_lang_archive(lang_path);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    info!("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...");
    parser.parse()?;
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    let database = parser.database();
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:");
    println!("  üîß –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {}", database.global_functions.len());
    println!("  üì¶ –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {}", database.global_objects.len());
    println!("  üéØ –ú–µ—Ç–æ–¥–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤: {}", database.object_methods.len());
    println!("  ‚öôÔ∏è –°–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–æ–≤: {}", database.object_properties.len());
    println!("  üìù –°–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π: {}", database.system_enums.len());
    println!("  üî§ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {}", database.keywords.len());
    println!("  ‚ûï –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {}", database.operators.len());
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    println!("\nüîß –ü—Ä–∏–º–µ—Ä—ã –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:");
    for (name, func) in database.global_functions.iter().take(10) {
        println!("  - {} ({})", name, func.description.as_deref().unwrap_or("–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"));
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    println!("\nüî§ –ü—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:");
    for keyword in database.keywords.iter().take(15) {
        println!("  - {} ({})", keyword.russian, keyword.english);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–∞–π–ª
    let output_path = "examples/syntax_helper/syntax_database.json";
    parser.save_to_file(output_path)?;
    info!("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {}", output_path);
    
    println!("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!");
    
    Ok(())
}