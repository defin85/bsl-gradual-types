//! –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤

use anyhow::Result;
use bsl_gradual_types::documentation::ConfigurationDocumentationProvider;
use bsl_gradual_types::documentation::core::{DocumentationProvider, ProviderConfig};

#[tokio::main]
async fn main() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤...\n");
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let config_provider = ConfigurationDocumentationProvider::new();
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º–∏ XML —Ñ–∞–π–ª–∞–º–∏ (—Å namespace)
    let config = ProviderConfig {
        data_source: "tests/fixtures/xml_full".to_string(),
        ..Default::default()
    };
    
    println!("üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—É—Ç–µ–º: {}", config.data_source);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    match config_provider.initialize(&config).await {
        Ok(_) => println!("‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"),
        Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", e),
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    match config_provider.get_statistics().await {
        Ok(stats) => {
            println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤:");
            println!("   ‚Ä¢ –¢–∏–ø–æ–≤: {}", stats.total_types);
            println!("   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤: {}", stats.total_methods);
            println!("   ‚Ä¢ –°–≤–æ–π—Å—Ç–≤: {}", stats.total_properties);
            println!("   ‚Ä¢ –ü–∞–º—è—Ç—å: {:.1} MB", stats.memory_usage_mb);
        }
        Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e),
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    match config_provider.get_root_category().await {
        Ok(root_category) => {
            println!("\nüìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:");
            println!("   üè¢ {} ({})", root_category.name, root_category.description);
            println!("      ‚îî‚îÄ –î–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤: {}", root_category.children.len());
            println!("      ‚îî‚îÄ –¢–∏–ø–æ–≤: {}", root_category.statistics.child_types_count);
        }
        Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {}", e),
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    match config_provider.check_availability().await {
        Ok(available) => println!("\nüîó –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", if available { "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" } else { "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞" }),
        Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {}", e),
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã
    match config_provider.get_all_types().await {
        Ok(types) => {
            println!("\nüìã –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã ({}):", types.len());
            for (i, type_doc) in types.iter().enumerate().take(5) {
                println!("   {}. {} / {}", i+1, type_doc.russian_name, type_doc.english_name);
                println!("      ‚îî‚îÄ –û–ø–∏—Å–∞–Ω–∏–µ: {}", type_doc.description);
                println!("      ‚îî‚îÄ –ò—Å—Ç–æ—á–Ω–∏–∫: {:?}", type_doc.source_type);
            }
            if types.len() > 5 {
                println!("   ... –∏ –µ—â–µ {} —Ç–∏–ø–æ–≤", types.len() - 5);
            }
        }
        Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤: {}", e),
    }
    
    println!("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!");
    
    Ok(())
}