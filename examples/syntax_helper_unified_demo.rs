//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞

use anyhow::Result;
use bsl_gradual_types::adapters::platform_types_v2::PlatformTypesResolverV2;
use bsl_gradual_types::adapters::syntax_helper_parser::{
    OptimizationSettings, SyntaxHelperParser, SyntaxNode,
};
use bsl_gradual_types::core::types::FacetKind;
use std::path::Path;

fn main() -> Result<()> {
    println!("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞ ===\n");

    // –ü—É—Ç—å –∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º—É –∞—Ä—Ö–∏–≤—É —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞
    let syntax_helper_path = if Path::new("examples/syntax_helper").exists() {
        Path::new("examples/syntax_helper")
    } else if Path::new("data/syntax_helper/extracted").exists() {
        Path::new("data/syntax_helper/extracted")
    } else {
        Path::new("data/syntax_helper")
    };

    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    let settings = OptimizationSettings {
        show_progress: true,
        parallel_indexing: true,
        ..Default::default()
    };
    let mut parser = SyntaxHelperParser::with_settings(settings);

    println!("üìÇ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞: {}", syntax_helper_path.display());

    if syntax_helper_path.exists() {
        match parser.parse_directory(syntax_helper_path) {
            Ok(_) => println!("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω\n"),
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}\n", e);
                return Err(e);
            }
        }
    } else {
        println!("‚ö†Ô∏è  –ü—É—Ç—å {} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", syntax_helper_path.display());
        println!("   –°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ä–∞—Å–ø–∞–∫—É–π—Ç–µ —Ç—É–¥–∞ —Ñ–∞–π–ª—ã —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞\n");
        return Ok(());
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    demonstrate_parser_features(&parser);

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PlatformTypesResolverV2
    demonstrate_resolver_integration(&parser)?;

    Ok(())
}

fn demonstrate_parser_features(parser: &SyntaxHelperParser) {
    println!("=== –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞ ===\n");

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    let database = parser.export_database();
    let index = parser.export_index();

    // 1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    println!("1Ô∏è‚É£  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:");
    let stats = parser.get_stats();
    println!("   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {}", stats.total_files);
    println!("   –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}", stats.processed_files);
    println!("   –û—à–∏–±–æ–∫ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {}", stats.error_count);
    println!("   –£–∑–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {}", stats.total_nodes);
    println!("   –¢–∏–ø–æ–≤: {}", stats.types_count);
    println!("   –ú–µ—Ç–æ–¥–æ–≤: {}", stats.methods_count);
    println!("   –°–≤–æ–π—Å—Ç–≤: {}", stats.properties_count);

    // 2. –ü—Ä–∏–º–µ—Ä—ã —Ç–∏–ø–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    println!("\n2Ô∏è‚É£  –¢–∏–ø—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:");
    let mut categories_map = std::collections::HashMap::new();

    for (_, node) in database.nodes.iter() {
        if let SyntaxNode::Type(type_info) = node {
            let category = if type_info.identity.category_path.is_empty() {
                "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            } else {
                &type_info.identity.category_path
            };
            categories_map
                .entry(category.to_string())
                .or_insert_with(Vec::new)
                .push(type_info.identity.russian_name.clone());
        }
    }

    for (category, types) in categories_map.iter().take(5) {
        println!("   {} ({} —Ç–∏–ø–æ–≤)", category, types.len());
        for type_name in types.iter().take(3) {
            println!("      - {}", type_name);
        }
    }

    // 3. –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    println!("\n3Ô∏è‚É£  –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:");
    println!("   –ü–æ —Ä—É—Å—Å–∫–∏–º –∏–º–µ–Ω–∞–º: {} –∑–∞–ø–∏—Å–µ–π", index.by_russian.len());
    println!(
        "   –ü–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏–º–µ–Ω–∞–º: {} –∑–∞–ø–∏—Å–µ–π",
        index.by_english.len()
    );
    println!("   –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {} –∫–∞—Ç–µ–≥–æ—Ä–∏–π", index.by_category.len());
    println!("   –ü–æ —Ñ–∞—Å–µ—Ç–∞–º: {} —Ç–∏–ø–æ–≤ —Ñ–∞—Å–µ—Ç–æ–≤", index.by_facet.len());

    // 4. –ü—Ä–∏–º–µ—Ä—ã —Ç–∏–ø–æ–≤ –ø–æ —Ñ–∞—Å–µ—Ç–∞–º
    println!("\n4Ô∏è‚É£  –¢–∏–ø—ã –ø–æ —Ñ–∞—Å–µ—Ç–∞–º:");
    for (facet, type_paths) in index.by_facet.iter() {
        let facet_name = match facet {
            FacetKind::Collection => "Collection (–∫–æ–ª–ª–µ–∫—Ü–∏–∏)",
            FacetKind::Manager => "Manager (–º–µ–Ω–µ–¥–∂–µ—Ä—ã)",
            FacetKind::Singleton => "Singleton (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ)",
            FacetKind::Constructor => "Constructor (–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º—ã–µ)",
            _ => "Other",
        };
        println!("   {} - {} —Ç–∏–ø–æ–≤", facet_name, type_paths.len());

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–∏–ø–∞
        for path in type_paths.iter().take(3) {
            if let Some(SyntaxNode::Type(type_info)) = database.nodes.get(path) {
                println!("      - {}", type_info.identity.russian_name);
            }
        }
    }

    // 5. –ü—Ä–∏–º–µ—Ä—ã –º–µ—Ç–æ–¥–æ–≤ –∏ —Å–≤–æ–π—Å—Ç–≤
    println!("\n5Ô∏è‚É£  –ú–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞:");
    println!("   –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤: {}", database.methods.len());
    println!("   –í—Å–µ–≥–æ —Å–≤–æ–π—Å—Ç–≤: {}", database.properties.len());

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –º–µ—Ç–æ–¥–æ–≤
    for (name, method) in database.methods.iter().take(3) {
        println!(
            "   –ú–µ—Ç–æ–¥: {} -> {}",
            method.name,
            method.return_type.as_deref().unwrap_or("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        );
    }
}

fn demonstrate_resolver_integration(parser: &SyntaxHelperParser) -> Result<()> {
    println!("\n=== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PlatformTypesResolverV2 ===\n");

    // –°–æ–∑–¥–∞—ë–º resolver –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    let temp_file = std::env::temp_dir().join("syntax_helper_db.json");
    let database = parser.export_database();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    let json_str = serde_json::to_string_pretty(&database)?;
    std::fs::write(&temp_file, json_str)?;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ resolver
    let mut resolver = PlatformTypesResolverV2::new();
    resolver.load_from_file(&temp_file)?;

    // 1. –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
    println!("1Ô∏è‚É£  –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —á–µ—Ä–µ–∑ resolver:");
    let test_types = vec!["–°—Ç—Ä–æ–∫–∞", "–ú–∞—Å—Å–∏–≤", "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"];

    for type_name in test_types {
        let resolution = resolver.resolve(type_name);
        println!(
            "   {} -> –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:?}",
            type_name, resolution.certainty
        );
    }

    // 2. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    println!("\n2Ô∏è‚É£  –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:");
    let functions = resolver.get_global_functions();
    println!("   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {}", functions.len());
    for (name, _) in functions.iter().take(5) {
        println!("      - {}", name);
    }

    // 3. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    println!("\n3Ô∏è‚É£  –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:");
    let objects = resolver.get_global_objects();
    println!("   –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {}", objects.len());
    for (name, _) in objects.iter().take(5) {
        println!("      - {}", name);
    }

    // 4. –ú–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
    println!("\n4Ô∏è‚É£  –ú–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤:");
    if let Some((type_name, _)) = objects.iter().next() {
        let methods = resolver.get_object_methods(type_name);
        let properties = resolver.get_object_properties(type_name);

        println!("   –¢–∏–ø '{}:'", type_name);
        println!("      –ú–µ—Ç–æ–¥–æ–≤: {}", methods.len());
        println!("      –°–≤–æ–π—Å—Ç–≤: {}", properties.len());

        for method in methods.iter().take(3) {
            println!(
                "      ‚Ä¢ {}() -> {}",
                method.name,
                method.return_type.as_deref().unwrap_or("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            );
        }
    }

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    std::fs::remove_file(temp_file).ok();

    Ok(())
}
