//! –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç HTML —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞

use anyhow::Result;
use bsl_gradual_types::documentation::core::hierarchy::DocumentationSourceType;
use bsl_gradual_types::documentation::render::HtmlDocumentationRenderer;
use bsl_gradual_types::documentation::search::{
    FacetValue, HighlightFragment, PaginationInfo, SearchFacet, SearchResultItem, SearchResults,
};
use std::fs;

#[tokio::main]
async fn main() -> Result<()> {
    println!("üé® –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç HTML —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞");

    // –°–æ–∑–¥–∞–µ–º HTML —Ä–µ–Ω–¥–µ—Ä–µ—Ä
    let html_renderer = HtmlDocumentationRenderer::new();
    println!("‚úÖ HtmlDocumentationRenderer —Å–æ–∑–¥–∞–Ω");

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    let test_results = create_test_search_results();
    println!(
        "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
        test_results.items.len()
    );

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    println!("\n=== üîç –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ ===");
    let search_html = html_renderer.render_search_results(&test_results).await?;

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
    let full_page = format!(
        "<!DOCTYPE html>\n\
         <html lang='ru'>\n\
         <head>\n\
         <meta charset='UTF-8'>\n\
         <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n\
         <title>BSL Search Results</title>\n\
         {}\n\
         </head>\n\
         <body class='theme-dark'>\n\
         <div class='container'>\n\
         {}\n\
         </div>\n\
         {}\n\
         </body>\n\
         </html>",
        html_renderer.render_css(),
        search_html,
        html_renderer.render_javascript()
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    let output_file = "bsl_search_demo.html";
    fs::write(output_file, &full_page)?;

    println!("‚úÖ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {}", output_file);
    println!("üìÑ –†–∞–∑–º–µ—Ä HTML: {} —Å–∏–º–≤–æ–ª–æ–≤", full_page.len());
    println!("üåê –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞");

    // –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
    println!("\n=== üé® –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º ===");
    let mut renderer_copy = html_renderer;

    // –¢–µ—Å—Ç —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    renderer_copy.set_theme("dark").await?;
    println!("‚úÖ –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");

    // –¢–µ—Å—Ç —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
    renderer_copy.set_theme("light").await?;
    println!("‚úÖ –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");

    // –¢–µ—Å—Ç VSCode —Ç–µ–º—ã
    renderer_copy.set_theme("vscode").await?;
    println!("‚úÖ VSCode —Ç–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");

    println!("\nüéâ HTML —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!");

    Ok(())
}

/// –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
fn create_test_search_results() -> SearchResults {
    SearchResults {
        items: vec![
            SearchResultItem {
                type_id: "platform_1".to_string(),
                display_name: "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π".to_string(),
                description: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫, –∫–æ–ª–æ–Ω–æ–∫, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é.".to_string(),
                category: "Global context/Universal collections".to_string(),
                source_type: DocumentationSourceType::Platform { version: "8.3".to_string() },
                relevance_score: 1.0,
                highlights: vec![
                    HighlightFragment {
                        field: "name".to_string(),
                        highlighted_text: "<mark>–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π</mark>".to_string(),
                    }
                ],
                breadcrumb: vec!["Global context".to_string(), "Universal collections".to_string()],
            },
            SearchResultItem {
                type_id: "platform_2".to_string(),
                display_name: "–°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π".to_string(),
                description: "–£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞.".to_string(),
                category: "Global context/Universal collections".to_string(),
                source_type: DocumentationSourceType::Platform { version: "8.3".to_string() },
                relevance_score: 0.8,
                highlights: vec![],
                breadcrumb: vec!["Global context".to_string(), "Universal collections".to_string()],
            },
            SearchResultItem {
                type_id: "platform_3".to_string(),
                display_name: "–î–µ—Ä–µ–≤–æ–ó–Ω–∞—á–µ–Ω–∏–π".to_string(),
                description: "–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö.".to_string(),
                category: "Global context/Universal collections".to_string(),
                source_type: DocumentationSourceType::Platform { version: "8.3".to_string() },
                relevance_score: 0.7,
                highlights: vec![],
                breadcrumb: vec!["Global context".to_string(), "Universal collections".to_string()],
            },
        ],
        total_count: 3,
        facets: vec![
            SearchFacet {
                name: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏".to_string(),
                values: vec![
                    FacetValue {
                        value: "Universal collections".to_string(),
                        count: 15,
                        selected: false,
                    },
                    FacetValue {
                        value: "System types".to_string(),
                        count: 8,
                        selected: false,
                    },
                ],
            },
            SearchFacet {
                name: "–ò—Å—Ç–æ—á–Ω–∏–∫".to_string(),
                values: vec![
                    FacetValue {
                        value: "Platform".to_string(),
                        count: 23,
                        selected: true,
                    },
                ],
            },
        ],
        search_time_ms: 25,
        suggestions: vec!["–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π".to_string(), "–°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π".to_string()],
        related_queries: vec!["–°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π".to_string(), "–î–µ—Ä–µ–≤–æ–ó–Ω–∞—á–µ–Ω–∏–π".to_string()],
        pagination_info: PaginationInfo {
            current_page: 0,
            total_pages: 1,
            has_next: false,
            has_previous: false,
            page_size: 10,
        },
    }
}
