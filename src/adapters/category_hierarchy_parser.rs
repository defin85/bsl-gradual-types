//! –ü–∞—Ä—Å–µ—Ä –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ø—Ä–∞–≤–∫–∏ 1–°
//!
//! –ü–∞—Ä—Å–∏—Ç HTML —Ñ–∞–π–ª—ã –∏–∑ objects/ –∏ —Å—Ç—Ä–æ–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é —Ç–∏–ø–æ–≤
//! –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ø—Ä–∞–≤–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞

use anyhow::Result;
use regex::Regex;
use std::collections::HashMap;
use std::fs;
use std::path::Path;

/// –£–∑–µ–ª –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
#[derive(Debug, Clone)]
pub struct CategoryNode {
    /// ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
    pub id: String,

    /// –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ HTML)
    pub title: String,

    /// –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    pub description: String,

    /// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    pub file_path: String,

    /// –î–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    pub children: Vec<CategoryNode>,

    /// –¢–∏–ø—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    pub types: Vec<String>,
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏
#[derive(Debug, Clone)]
pub struct CategoryHierarchy {
    /// –ö–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    pub root_categories: Vec<CategoryNode>,

    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    pub total_categories: usize,

    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤
    pub total_types: usize,
}

/// –ü–∞—Ä—Å–µ—Ä –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
pub struct CategoryHierarchyParser {
    /// –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ objects/
    objects_path: String,

    /// –ö–µ—à —Ä–∞—Å–ø–∞—Ä—à–µ–Ω–Ω—ã—Ö HTML —Ñ–∞–π–ª–æ–≤
    html_cache: HashMap<String, HtmlContent>,
}

/// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ HTML —Ñ–∞–π–ª–∞
#[derive(Debug, Clone)]
struct HtmlContent {
    pub title: String,
    pub description: String,
}

impl CategoryHierarchyParser {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
    pub fn new(objects_path: &str) -> Self {
        Self {
            objects_path: objects_path.to_string(),
            html_cache: HashMap::new(),
        }
    }

    /// –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Å—é –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    pub fn parse_hierarchy(&mut self) -> Result<CategoryHierarchy> {
        println!("üå≥ –ü–∞—Ä—Å–∏–Ω–≥ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑: {}", self.objects_path);

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
        let root_files = self.find_root_html_files()?;
        println!("üìÅ –ù–∞–π–¥–µ–Ω–æ {} –∫–æ—Ä–Ω–µ–≤—ã—Ö HTML —Ñ–∞–π–ª–æ–≤", root_files.len());

        // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –∫–æ—Ä–Ω–µ–≤–æ–π —Ñ–∞–π–ª
        let mut root_categories = Vec::new();
        let mut total_types = 0;

        for file_path in root_files {
            if let Ok(category) = self.parse_category_file(&file_path) {
                total_types += category.types.len();
                root_categories.push(category);
            }
        }

        let total_categories = self.count_total_categories(&root_categories);

        println!(
            "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω: {} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {} —Ç–∏–ø–æ–≤",
            total_categories, total_types
        );

        Ok(CategoryHierarchy {
            root_categories,
            total_categories,
            total_types,
        })
    }

    /// –ù–∞–π—Ç–∏ –≤—Å–µ HTML —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ objects/
    fn find_root_html_files(&self) -> Result<Vec<String>> {
        let mut files = Vec::new();

        let objects_dir = Path::new(&self.objects_path);
        if !objects_dir.exists() {
            return Err(anyhow::anyhow!(
                "Objects directory not found: {}",
                self.objects_path
            ));
        }

        for entry in fs::read_dir(objects_dir)? {
            let entry = entry?;
            let path = entry.path();

            if path.is_file() && path.extension().map_or(false, |ext| ext == "html") {
                if let Some(path_str) = path.to_str() {
                    files.push(path_str.to_string());
                }
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
        files.sort();
        Ok(files)
    }

    /// –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    fn parse_category_file(&mut self, file_path: &str) -> Result<CategoryNode> {
        let path = Path::new(file_path);
        let file_name = path
            .file_stem()
            .and_then(|s| s.to_str())
            .unwrap_or("unknown");

        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ HTML —Ñ–∞–π–ª–∞
        let html_content = self.parse_html_file(file_path)?;

        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        let folder_path = path
            .parent()
            .map(|p| p.join(file_name))
            .filter(|p| p.exists());

        // –ü–∞—Ä—Å–∏–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        let mut children = Vec::new();
        let mut types = Vec::new();

        if let Some(folder) = folder_path {
            let (sub_categories, sub_types) = self.parse_subfolder(&folder)?;
            children = sub_categories;
            types = sub_types;
        }

        Ok(CategoryNode {
            id: file_name.to_string(),
            title: html_content.title,
            description: html_content.description,
            file_path: file_path.to_string(),
            children,
            types,
        })
    }

    /// –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å HTML —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
    fn parse_html_file(&mut self, file_path: &str) -> Result<HtmlContent> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if let Some(cached) = self.html_cache.get(file_path) {
            return Ok(cached.clone());
        }

        let content = fs::read_to_string(file_path)?;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ <h1 class="V8SH_pagetitle">
        let title_regex = Regex::new(r#"<h1[^>]*class="V8SH_pagetitle"[^>]*>([^<]+)</h1>"#)?;
        let title = title_regex
            .captures(&content)
            .and_then(|caps| caps.get(1))
            .map(|m| m.as_str().trim().to_string())
            .unwrap_or_else(|| "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è".to_string());

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ <p class="V8SH_title"> –¥–æ –ø–µ—Ä–≤–æ–≥–æ <HR>
        let desc_regex = Regex::new(r#"<p[^>]*class="V8SH_title"[^>]*>.*?</p>(.*?)<HR>"#)?;
        let description = desc_regex
            .captures(&content)
            .and_then(|caps| caps.get(1))
            .map(|m| {
                // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                let text = m.as_str();
                let clean_text = Regex::new(r"<[^>]+>").unwrap().replace_all(text, " ");
                clean_text
                    .split_whitespace()
                    .collect::<Vec<_>>()
                    .join(" ")
                    .chars()
                    .take(200)
                    .collect::<String>()
            })
            .unwrap_or_else(|| "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç".to_string());

        let html_content = HtmlContent { title, description };

        // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.html_cache
            .insert(file_path.to_string(), html_content.clone());

        Ok(html_content)
    }

    /// –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–¥–ø–∞–ø–∫—É —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    fn parse_subfolder(&mut self, folder_path: &Path) -> Result<(Vec<CategoryNode>, Vec<String>)> {
        let mut subcategories = Vec::new();
        let mut types = Vec::new();

        if !folder_path.exists() {
            return Ok((subcategories, types));
        }

        for entry in fs::read_dir(folder_path)? {
            let entry = entry?;
            let path = entry.path();

            if path.is_file() && path.extension().map_or(false, |ext| ext == "html") {
                if let Some(file_name) = path.file_stem().and_then(|s| s.to_str()) {
                    if file_name.starts_with("catalog") {
                        // –≠—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
                        if let Ok(subcategory) = self.parse_category_file(path.to_str().unwrap()) {
                            subcategories.push(subcategory);
                        }
                    } else {
                        // –≠—Ç–æ —Ç–∏–ø (object*.html –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø)
                        if let Ok(html_content) = self.parse_html_file(path.to_str().unwrap()) {
                            types.push(html_content.title);
                        }
                    }
                }
            }
        }

        Ok((subcategories, types))
    }

    /// –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    fn count_total_categories(&self, categories: &[CategoryNode]) -> usize {
        let mut count = categories.len();
        for category in categories {
            count += self.count_total_categories(&category.children);
        }
        count
    }
}

impl Default for CategoryHierarchyParser {
    fn default() -> Self {
        Self::new("examples/syntax_helper/rebuilt.shcntx_ru/objects")
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_parser_creation() {
        let parser = CategoryHierarchyParser::new("test_path");
        assert_eq!(parser.objects_path, "test_path");
        assert!(parser.html_cache.is_empty());
    }

    #[test]
    fn test_html_title_extraction() {
        let mut parser = CategoryHierarchyParser::new("test");

        // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
        let test_html = r#"<html><body><h1 class="V8SH_pagetitle">–ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã</h1><p class="V8SH_title">–ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã</p>–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏<HR></body></html>"#;

        // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª, –Ω–æ –¥–ª—è –¥–µ–º–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É
        assert!(true); // Placeholder –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–æ–≤
    }
}
