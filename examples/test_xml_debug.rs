//! –û—Ç–ª–∞–¥–∫–∞ XML –ø–∞—Ä—Å–∏–Ω–≥–∞

use anyhow::Result;
use std::path::Path;

fn main() -> Result<()> {
    println!("üîç –û—Ç–ª–∞–¥–∫–∞ XML –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ñ–∞–π–ª–∞–º\n");

    // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ
    let files = [
        "tests/fixtures/xml_full/Catalogs/–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã.xml",
        "tests/fixtures/xml_full/Catalogs/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.xml",
        "tests/fixtures/xml_full/Documents/–ó–∞–∫–∞–∑–ù–∞—Ä—è–¥—ã.xml",
        "tests/fixtures/xml_full/InformationRegisters/–¢–µ—Å—Ç–æ–≤—ã–π–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.xml",
    ];

    for file_path in files {
        println!("üìÑ –§–∞–π–ª: {}", file_path);

        if Path::new(file_path).exists() {
            println!("‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");

            // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            match std::fs::read_to_string(file_path) {
                Ok(content) => {
                    println!("üìù –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {} –±–∞–π—Ç", content.len());

                    // –ò—â–µ–º —Ç–µ–≥ Name –≤ Properties
                    if let Some(name_start) = content.find("<Name>") {
                        if let Some(name_end) = content[name_start..].find("</Name>") {
                            let name_content = &content[name_start + 6..name_start + name_end];
                            println!("üè∑Ô∏è –ù–∞–π–¥–µ–Ω–Ω–æ–µ –∏–º—è: '{}'", name_content);
                        }
                    } else {
                        println!("‚ùå –¢–µ–≥ <Name> –Ω–µ –Ω–∞–π–¥–µ–Ω");
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –∞—Ç—Ä–∏–±—É—Ç—ã
                    let attribute_count = content.matches("<Attribute>").count();
                    println!("üìù –¢–µ–≥–æ–≤ <Attribute>: {}", attribute_count);

                    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏
                    let ts_count = content.matches("<TabularSection>").count();
                    println!("üìä –¢–µ–≥–æ–≤ <TabularSection>: {}", ts_count);
                }
                Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {}", e),
            }
        } else {
            println!("‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }

        println!();
    }

    println!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫:");
    let folders = ["Catalogs", "Documents", "InformationRegisters", "Enums"];

    for folder in folders {
        let folder_path = format!("tests/fixtures/xml_full/{}", folder);
        println!("üìÅ {}", folder_path);

        if Path::new(&folder_path).exists() {
            match std::fs::read_dir(&folder_path) {
                Ok(entries) => {
                    let xml_files: Vec<_> = entries
                        .filter_map(|e| e.ok())
                        .filter(|e| e.path().extension().map_or(false, |ext| ext == "xml"))
                        .collect();

                    println!("   ‚úÖ XML —Ñ–∞–π–ª–æ–≤: {}", xml_files.len());
                    for entry in xml_files {
                        println!("      - {}", entry.file_name().to_string_lossy());
                    }
                }
                Err(e) => println!("   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: {}", e),
            }
        } else {
            println!("   ‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }
    }

    Ok(())
}
