use anyhow::Result;
use bsl_gradual_types::{
    core::platform_resolver::PlatformTypeResolver,
    documentation::{
        core::{
            providers::ProviderConfig, BslDocumentationSystem, DocumentationConfig,
            DocumentationProvider,
        },
        platform::PlatformDocumentationProvider,
    },
};

/// –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–∏–ø–æ–≤
#[tokio::main]
async fn main() -> Result<()> {
    println!("üîç –ê–ù–ê–õ–ò–ó: –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–∏–ø–æ–≤");
    println!("{}", "=".repeat(70));

    // 1. PlatformTypeResolver (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
    println!("\nüìä 1. PlatformTypeResolver (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞):");
    let platform_resolver = PlatformTypeResolver::new();
    let resolver_globals_count = platform_resolver.get_platform_globals_count();
    println!("   ‚Ä¢ Platform globals count: {}", resolver_globals_count);

    // 2. PlatformDocumentationProvider (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏)
    println!("\nüìö 2. PlatformDocumentationProvider (–∏–µ—Ä–∞—Ä—Ö–∏—è):");
    let platform_provider = PlatformDocumentationProvider::new();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    let config = ProviderConfig::default();
    match platform_provider.initialize(&config).await {
        Ok(_) => {
            let provider_types = platform_provider.get_all_types().await?;
            println!(
                "   ‚Ä¢ Documentation provider types: {}",
                provider_types.len()
            );

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–∏–ø–æ–≤
            for (i, doc_node) in provider_types.iter().take(10).enumerate() {
                match doc_node {
                    bsl_gradual_types::documentation::core::hierarchy::DocumentationNode::PlatformType(pt) => {
                        println!("   ‚îî‚îÄ [{}] Platform: '{}'", i + 1, pt.base_info.russian_name);
                    },
                    bsl_gradual_types::documentation::core::hierarchy::DocumentationNode::SubCategory(sc) => {
                        println!("   ‚îî‚îÄ [{}] SubCategory: '{}' ({} –¥–æ—á–µ—Ä–Ω–∏—Ö)", i + 1, sc.name, sc.children.len());
                    },
                    _ => {
                        println!("   ‚îî‚îÄ [{}] Other type", i + 1);
                    }
                }
            }
        }
        Err(e) => {
            println!("   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", e);
        }
    }

    // 3. BslDocumentationSystem (–ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
    println!("\nüèóÔ∏è 3. BslDocumentationSystem (–ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞):");
    let documentation_system = BslDocumentationSystem::new();
    let docs_config = DocumentationConfig::default();

    match documentation_system.initialize(docs_config).await {
        Ok(_) => {
            let hierarchy = documentation_system.get_type_hierarchy().await?;

            println!(
                "   ‚Ä¢ –ö–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}",
                hierarchy.root_categories.len()
            );

            let mut total_subcategories = 0;
            let mut total_types_in_hierarchy = 0;
            let mut non_empty_subcategories = 0;

            for category in &hierarchy.root_categories {
                println!(
                    "   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: '{}' ({} –¥–æ—á–µ—Ä–Ω–∏—Ö)",
                    category.name,
                    category.children.len()
                );

                for child in &category.children {
                    match child {
                        bsl_gradual_types::documentation::core::hierarchy::DocumentationNode::SubCategory(sub_cat) => {
                            total_subcategories += 1;
                            if !sub_cat.children.is_empty() {
                                non_empty_subcategories += 1;
                                total_types_in_hierarchy += sub_cat.children.len();
                                
                                if non_empty_subcategories <= 5 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                                    println!("      ‚îî‚îÄ üìÇ '{}': {} —Ç–∏–ø–æ–≤", sub_cat.name, sub_cat.children.len());
                                }
                            }
                        },
                        bsl_gradual_types::documentation::core::hierarchy::DocumentationNode::PlatformType(_) => {
                            total_types_in_hierarchy += 1;
                        },
                        _ => {}
                    }
                }
            }

            println!("   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}", total_subcategories);
            println!("   ‚Ä¢ –ù–µ–ø—É—Å—Ç—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}", non_empty_subcategories);
            println!("   ‚Ä¢ –¢–∏–ø–æ–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏: {}", total_types_in_hierarchy);
        }
        Err(e) => {
            println!("   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {}", e);
        }
    }

    println!("\nüéØ –í–´–í–û–î–´:");
    println!("   ‚Ä¢ 13,607 = PlatformTypeResolver.get_platform_globals() - –í–°–ï –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã");
    println!("   ‚Ä¢ 3,884 = DocumentationProvider - —Ç–∏–ø—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏");
    println!("   ‚Ä¢ 195 = –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ (–º–Ω–æ–≥–∏–µ –ø—É—Å—Ç—ã–µ)");
    println!("   ‚Ä¢ ? = –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–µ—Ä–µ–≤–µ");

    Ok(())
}
