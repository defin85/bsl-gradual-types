//! –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤

use anyhow::Result;
use async_trait::async_trait;
use std::sync::Arc;
use tokio::sync::RwLock;

use super::core::hierarchy::{
    CategoryStatistics, DocumentationNode, DocumentationSourceType, RootCategoryNode,
    TypeDocumentationFull, UiMetadata,
};
use super::core::providers::{DocumentationProvider, ProviderConfig};
use super::core::statistics::{InitializationStatus, ProviderStatistics};
use super::search::AdvancedSearchQuery;
use crate::data::loaders::config_parser_quick_xml::ConfigurationQuickXmlParser;
use crate::data::loaders::config_parser_xml::ConfigParserXml;
use crate::domain::types::{MetadataKind, TypeResolution};

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
pub struct ConfigurationDocumentationProvider {
    /// –ü–∞—Ä—Å–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ XML (—Å—Ç–∞—Ä—ã–π)
    config_parser: Arc<RwLock<Option<ConfigParserXml>>>,

    /// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å quick-xml
    quick_parser: Arc<RwLock<Option<ConfigurationQuickXmlParser>>>,

    /// –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    initialization_status: Arc<RwLock<InitializationStatus>>,

    /// –ö–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    configuration_cache: Arc<RwLock<std::collections::HashMap<String, TypeDocumentationFull>>>,

    /// –ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    root_category_cache: Arc<RwLock<Option<RootCategoryNode>>>,
}

impl ConfigurationDocumentationProvider {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    pub fn new() -> Self {
        Self {
            config_parser: Arc::new(RwLock::new(None)),
            quick_parser: Arc::new(RwLock::new(None)),
            initialization_status: Arc::new(RwLock::new(InitializationStatus::default())),
            configuration_cache: Arc::new(RwLock::new(std::collections::HashMap::new())),
            root_category_cache: Arc::new(RwLock::new(None)),
        }
    }

    /// –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    async fn analyze_configuration(&self, config_path: &str) -> Result<()> {
        println!("üìÅ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", config_path);

        // –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        let mut quick_parser = ConfigurationQuickXmlParser::new(config_path);

        match quick_parser.parse_configuration() {
            Ok(parsed_config) => {
                println!(
                    "‚úÖ Quick XML –ø–∞—Ä—Å–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–ª {} —Ç–∏–ø–æ–≤",
                    parsed_config.len()
                );

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—Å–µ—Ä
                *self.quick_parser.write().await = Some(quick_parser);

                // –°—Ç—Ä–æ–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏–∑ –Ω–æ–≤—ã—Ö TypeResolution
                self.build_configuration_documentation(&parsed_config)
                    .await?;
            }
            Err(e) => {
                println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ quick XML –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", e);

                // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä
                println!("üîÑ Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π XML –ø–∞—Ä—Å–µ—Ä...");
                let mut old_parser = ConfigParserXml::new(config_path);

                match old_parser.parse_configuration() {
                    Ok(parsed_config) => {
                        println!("‚úÖ –°—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–ª {} —Ç–∏–ø–æ–≤", parsed_config.len());
                        *self.config_parser.write().await = Some(old_parser);
                        self.build_configuration_documentation(&parsed_config)
                            .await?;
                    }
                    Err(e2) => {
                        println!("‚ùå –û–±–∞ –ø–∞—Ä—Å–µ—Ä–∞ failed: quick={}, old={}", e, e2);
                    }
                }
            }
        }

        Ok(())
    }

    /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    async fn build_configuration_documentation(
        &self,
        config_types: &[TypeResolution],
    ) -> Result<()> {
        use crate::core::types::{ConcreteType, ResolutionResult};

        let mut cache = self.configuration_cache.write().await;

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–∞—Ä—Å–µ—Ä—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω
        let quick_parser = self.quick_parser.read().await;

        for type_resolution in config_types {
            if let ResolutionResult::Concrete(ConcreteType::Configuration(config_type)) =
                &type_resolution.result
            {
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
                let qualified_name = format!(
                    "{}.{}",
                    self.get_kind_prefix(&config_type.kind),
                    &config_type.name
                );
                let metadata = quick_parser
                    .as_ref()
                    .and_then(|parser| parser.get_metadata(&qualified_name));

                let real_name = metadata
                    .map(|m| m.name.clone())
                    .unwrap_or_else(|| config_type.name.clone());
                let synonym = metadata.and_then(|m| m.synonym.clone());
                let attributes_count = metadata.map(|m| m.attributes.len()).unwrap_or(0);
                let ts_count = metadata.map(|m| m.tabular_sections.len()).unwrap_or(0);

                let type_doc = TypeDocumentationFull {
                    id: format!(
                        "config_{}_{}",
                        self.get_kind_prefix(&config_type.kind),
                        real_name
                    ),
                    russian_name: real_name.clone(),
                    english_name: real_name.clone(),
                    aliases: if let Some(ref syn) = synonym {
                        vec![syn.clone()]
                    } else {
                        Vec::new()
                    },
                    source_type: DocumentationSourceType::UserDefined {
                        module_path: format!("{}.xml", real_name),
                    },
                    hierarchy_path: vec![
                        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è".to_string(),
                        self.get_kind_prefix(&config_type.kind).to_string(),
                        real_name.clone(),
                    ],
                    type_resolution: type_resolution.clone(),
                    available_facets: type_resolution.available_facets.clone(),
                    active_facet: type_resolution.active_facet,
                    methods: Vec::new(),    // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                    properties: Vec::new(), // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                    constructors: Vec::new(),
                    description: format!(
                        "{} {} {}",
                        self.get_kind_display_name(&config_type.kind),
                        real_name,
                        if let Some(ref syn) = synonym {
                            format!("({})", syn)
                        } else {
                            String::new()
                        }
                    ),
                    examples: Vec::new(),
                    availability: Vec::new(),
                    since_version: "8.0".to_string(),
                    notes: vec![
                        format!("–ê—Ç—Ä–∏–±—É—Ç–æ–≤: {}", attributes_count),
                        format!("–¢–∞–±–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π: {}", ts_count),
                    ],
                    related_types: Vec::new(),
                    parent_type: None,
                    child_types: Vec::new(),
                    source_file: Some(format!("{}.xml", real_name)),
                    ui_metadata: UiMetadata {
                        icon: self.get_icon_for_kind(&config_type.kind),
                        color: self.get_color_for_kind(&config_type.kind),
                        tree_path: vec![
                            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è".to_string(),
                            self.get_kind_prefix(&config_type.kind).to_string(),
                            real_name.clone(),
                        ],
                        expanded: false,
                        sort_weight: 0,
                        css_classes: vec![
                            "config-type".to_string(),
                            format!("{:?}-type", config_type.kind),
                        ],
                    },
                };

                cache.insert(type_doc.id.clone(), type_doc);
            }
        }

        println!(
            "üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è {} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤",
            cache.len()
        );
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
    fn get_kind_display_name(&self, kind: &MetadataKind) -> &str {
        match kind {
            MetadataKind::Catalog => "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫",
            MetadataKind::Document => "–î–æ–∫—É–º–µ–Ω—Ç",
            MetadataKind::Register => "–†–µ–≥–∏—Å—Ç—Ä —Å–≤–µ–¥–µ–Ω–∏–π",
            MetadataKind::Enum => "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ",
            _ => "–û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ç–∏–ø–∞
    fn get_kind_prefix(&self, kind: &MetadataKind) -> &str {
        match kind {
            MetadataKind::Catalog => "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏",
            MetadataKind::Document => "–î–æ–∫—É–º–µ–Ω—Ç—ã",
            MetadataKind::Register => "–†–µ–≥–∏—Å—Ç—Ä—ã–°–≤–µ–¥–µ–Ω–∏–π",
            MetadataKind::Enum => "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è",
            _ => "–ü—Ä–æ—á–∏–µ–û–±—ä–µ–∫—Ç—ã",
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞
    fn get_icon_for_kind(&self, kind: &MetadataKind) -> String {
        match kind {
            MetadataKind::Catalog => "üìÅ".to_string(),
            MetadataKind::Document => "üìÑ".to_string(),
            MetadataKind::Register => "üìä".to_string(),
            MetadataKind::Enum => "üìã".to_string(),
            _ => "‚öôÔ∏è".to_string(),
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–∏–ø–∞
    fn get_color_for_kind(&self, kind: &MetadataKind) -> String {
        match kind {
            MetadataKind::Catalog => "#4CAF50".to_string(),
            MetadataKind::Document => "#2196F3".to_string(),
            MetadataKind::Register => "#FF9800".to_string(),
            MetadataKind::Enum => "#9C27B0".to_string(),
            _ => "#9E9E9E".to_string(),
        }
    }

    /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    async fn build_configuration_root_category(&self) -> Result<RootCategoryNode> {
        Ok(RootCategoryNode {
            id: "configuration_root".to_string(),
            name: "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è".to_string(),
            description: "–û–±—ä–µ–∫—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ä–µ–≥–∏—Å—Ç—Ä—ã)".to_string(),
            children: Vec::new(),
            ui_metadata: UiMetadata {
                icon: "‚öôÔ∏è".to_string(),
                color: "#FF9800".to_string(),
                tree_path: vec!["–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è".to_string()],
                expanded: false,
                sort_weight: 200,
                css_classes: vec![
                    "root-category".to_string(),
                    "configuration-root".to_string(),
                ],
            },
            statistics: CategoryStatistics {
                child_types_count: self.configuration_cache.read().await.len(),
                total_methods_count: 0,
                total_properties_count: 0,
                most_popular_type: None,
            },
        })
    }
}

#[async_trait]
impl DocumentationProvider for ConfigurationDocumentationProvider {
    fn provider_id(&self) -> &str {
        "configuration_types"
    }

    fn display_name(&self) -> &str {
        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã"
    }

    async fn initialize(&self, config: &ProviderConfig) -> Result<()> {
        if !config.data_source.is_empty() && std::path::Path::new(&config.data_source).exists() {
            self.analyze_configuration(&config.data_source).await?;
        } else {
            println!("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {}", config.data_source);
        }
        Ok(())
    }

    async fn get_root_category(&self) -> Result<RootCategoryNode> {
        let cache = self.root_category_cache.read().await;
        match cache.as_ref() {
            Some(category) => Ok(category.clone()),
            None => {
                drop(cache);
                let category = self.build_configuration_root_category().await?;
                *self.root_category_cache.write().await = Some(category.clone());
                Ok(category)
            }
        }
    }

    async fn get_type_details(&self, type_id: &str) -> Result<Option<TypeDocumentationFull>> {
        let cache = self.configuration_cache.read().await;
        Ok(cache.get(type_id).cloned())
    }

    async fn search_types(&self, _query: &AdvancedSearchQuery) -> Result<Vec<DocumentationNode>> {
        Ok(Vec::new())
    }

    async fn get_all_types(&self) -> Result<Vec<TypeDocumentationFull>> {
        let cache = self.configuration_cache.read().await;
        Ok(cache.values().cloned().collect())
    }

    async fn get_statistics(&self) -> Result<ProviderStatistics> {
        let cache = self.configuration_cache.read().await;

        Ok(ProviderStatistics {
            total_types: cache.len(),
            total_methods: cache.values().map(|t| t.methods.len()).sum(),
            total_properties: cache.values().map(|t| t.properties.len()).sum(),
            last_load_time_ms: 0,
            memory_usage_mb: (cache.len() * 512) as f64 / (1024.0 * 1024.0),
        })
    }

    async fn get_initialization_status(&self) -> Result<InitializationStatus> {
        Ok(self.initialization_status.read().await.clone())
    }

    async fn check_availability(&self) -> Result<bool> {
        Ok(self.config_parser.read().await.is_some())
    }

    async fn refresh(&self) -> Result<()> {
        self.configuration_cache.write().await.clear();
        *self.root_category_cache.write().await = None;
        Ok(())
    }
}
