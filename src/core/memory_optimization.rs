//! –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–¥–æ–≤—ã—Ö –±–∞–∑
//!
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
//! –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ 1–°.

use std::collections::HashMap;
use std::sync::Arc;
use std::mem;
use serde::{Serialize, Deserialize};

use crate::core::types::TypeResolution;
use crate::core::type_checker::TypeContext;

/// –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MemoryProfile {
    /// –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö
    pub total_memory_bytes: usize,
    /// –ü–∞–º—è—Ç—å –¥–ª—è —Ç–∏–ø–æ–≤
    pub types_memory_bytes: usize,
    /// –ü–∞–º—è—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    pub context_memory_bytes: usize,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏
    pub object_counts: ObjectCounts,
    /// –í—Ä–µ–º—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    pub timestamp: std::time::SystemTime,
}

/// –°—á–µ—Ç—á–∏–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct ObjectCounts {
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ TypeResolution –æ–±—ä–µ–∫—Ç–æ–≤
    pub type_resolutions: usize,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ TypeContext –æ–±—ä–µ–∫—Ç–æ–≤
    pub type_contexts: usize,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö AST
    pub cached_asts: usize,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—É–ª–µ
    pub interned_strings: usize,
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
#[derive(Debug, Clone)]
pub struct MemoryStats {
    pub current_memory_bytes: usize,
    pub peak_memory_bytes: usize,
    pub average_memory_bytes: usize,
    pub total_objects: usize,
    pub memory_efficiency: f64,
}

impl MemoryStats {
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    pub fn format(&self) -> String {
        format!(
            "üß† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏:\n\
             üìä –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {:.2} MB\n\
             üìà –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {:.2} MB\n\
             üìâ –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {:.2} MB\n\
             üî¢ –û–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {}\n\
             ‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {:.1}%",
            self.current_memory_bytes as f64 / (1024.0 * 1024.0),
            self.peak_memory_bytes as f64 / (1024.0 * 1024.0),
            self.average_memory_bytes as f64 / (1024.0 * 1024.0),
            self.total_objects,
            self.memory_efficiency * 100.0
        )
    }
}

/// –ú–æ–Ω–∏—Ç–æ—Ä –ø–∞–º—è—Ç–∏
pub struct MemoryMonitor {
    /// –ü—Ä–æ—Ñ–∏–ª–∏ –ø–∞–º—è—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    profiles: Vec<MemoryProfile>,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    max_profiles: usize,
}

impl Default for MemoryMonitor {
    fn default() -> Self {
        Self::new()
    }
}

impl MemoryMonitor {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä –ø–∞–º—è—Ç–∏
    pub fn new() -> Self {
        Self {
            profiles: Vec::new(),
            max_profiles: 100,
        }
    }
    
    /// –°–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    pub fn take_snapshot(&mut self, contexts: &[&TypeContext]) -> MemoryProfile {
        let mut total_memory = 0;
        let mut types_memory = 0;
        let mut context_memory = 0;
        let mut object_counts = ObjectCounts::default();
        
        for context in contexts {
            // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä TypeContext
            let ctx_size = mem::size_of::<TypeContext>() +
                context.variables.len() * (mem::size_of::<String>() + mem::size_of::<TypeResolution>()) +
                context.functions.len() * mem::size_of::<(String, crate::core::type_checker::FunctionSignature)>();
            
            context_memory += ctx_size;
            total_memory += ctx_size;
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
            object_counts.type_contexts += 1;
            object_counts.type_resolutions += context.variables.len() + context.functions.len();
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–∏–ø–æ–≤
            for type_res in context.variables.values() {
                types_memory += Self::estimate_type_resolution_size(type_res);
            }
        }
        
        let profile = MemoryProfile {
            total_memory_bytes: total_memory,
            types_memory_bytes: types_memory,
            context_memory_bytes: context_memory,
            object_counts,
            timestamp: std::time::SystemTime::now(),
        };
        
        self.profiles.push(profile.clone());
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π
        if self.profiles.len() > self.max_profiles {
            self.profiles.remove(0);
        }
        
        profile
    }
    
    /// –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä TypeResolution
    fn estimate_type_resolution_size(type_res: &TypeResolution) -> usize {
        let mut size = mem::size_of::<TypeResolution>();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        size += type_res.metadata.notes.iter()
            .map(|note| note.len())
            .sum::<usize>();
        
        size
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    pub fn get_memory_stats(&self) -> Option<MemoryStats> {
        if self.profiles.is_empty() {
            return None;
        }
        
        let latest = self.profiles.last().unwrap();
        let peak_memory = self.profiles.iter()
            .map(|p| p.total_memory_bytes)
            .max()
            .unwrap_or(0);
        
        let avg_memory = if !self.profiles.is_empty() {
            self.profiles.iter()
                .map(|p| p.total_memory_bytes)
                .sum::<usize>() / self.profiles.len()
        } else {
            0
        };
        
        Some(MemoryStats {
            current_memory_bytes: latest.total_memory_bytes,
            peak_memory_bytes: peak_memory,
            average_memory_bytes: avg_memory,
            total_objects: latest.object_counts.type_resolutions + 
                          latest.object_counts.type_contexts,
            memory_efficiency: Self::calculate_efficiency(latest),
        })
    }
    
    /// –í—ã—á–∏—Å–ª–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    fn calculate_efficiency(profile: &MemoryProfile) -> f64 {
        if profile.total_memory_bytes == 0 {
            return 1.0;
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = –ø–æ–ª–µ–∑–Ω–∞—è –ø–∞–º—è—Ç—å / –æ–±—â–∞—è –ø–∞–º—è—Ç—å
        let useful_memory = profile.types_memory_bytes + profile.context_memory_bytes;
        useful_memory as f64 / profile.total_memory_bytes as f64
    }
}

/// String interning pool –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Ç—Ä–æ–∫–∞—Ö
pub struct StringInterner {
    /// –ü—É–ª –∏–Ω—Ç–µ—Ä–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    strings: HashMap<String, Arc<str>>,
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_strings: usize,
    saved_bytes: usize,
}

impl Default for StringInterner {
    fn default() -> Self {
        Self::new()
    }
}

impl StringInterner {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π string interner
    pub fn new() -> Self {
        Self {
            strings: HashMap::new(),
            total_strings: 0,
            saved_bytes: 0,
        }
    }
    
    /// –ò–Ω—Ç–µ—Ä–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É
    pub fn intern(&mut self, s: &str) -> Arc<str> {
        self.total_strings += 1;
        
        if let Some(interned) = self.strings.get(s) {
            self.saved_bytes += s.len();
            interned.clone()
        } else {
            let arc_str: Arc<str> = Arc::from(s);
            self.strings.insert(s.to_string(), arc_str.clone());
            arc_str
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω—Ç–µ—Ä–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    pub fn get_stats(&self) -> StringInterningStats {
        StringInterningStats {
            unique_strings: self.strings.len(),
            total_requests: self.total_strings,
            saved_bytes: self.saved_bytes,
            hit_rate: if self.total_strings > 0 {
                (self.total_strings - self.strings.len()) as f64 / self.total_strings as f64
            } else {
                0.0
            },
        }
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ string interning
#[derive(Debug, Clone)]
pub struct StringInterningStats {
    pub unique_strings: usize,
    pub total_requests: usize,
    pub saved_bytes: usize,
    pub hit_rate: f64,
}

impl StringInterningStats {
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    pub fn format(&self) -> String {
        format!(
            "üßµ String Interning:\n\
             üìù –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {}\n\
             üîÑ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}\n\
             üíæ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: {:.2} KB\n\
             üéØ Hit rate: {:.1}%",
            self.unique_strings,
            self.total_requests,
            self.saved_bytes as f64 / 1024.0,
            self.hit_rate * 100.0
        )
    }
}

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
pub struct MemoryOptimizationManager {
    monitor: MemoryMonitor,
    interner: StringInterner,
}

impl Default for MemoryOptimizationManager {
    fn default() -> Self {
        Self::new()
    }
}

impl MemoryOptimizationManager {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    pub fn new() -> Self {
        Self {
            monitor: MemoryMonitor::new(),
            interner: StringInterner::new(),
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    pub fn generate_optimization_report(&self) -> MemoryOptimizationReport {
        let memory_stats = self.monitor.get_memory_stats();
        let string_stats = self.interner.get_stats();
        
        MemoryOptimizationReport {
            memory_stats,
            string_interning_stats: string_stats,
            total_saved_bytes: 0, // TODO: –í—ã—á–∏—Å–ª–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—é
        }
    }
}

/// –û—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
#[derive(Debug, Clone)]
pub struct MemoryOptimizationReport {
    pub memory_stats: Option<MemoryStats>,
    pub string_interning_stats: StringInterningStats,
    pub total_saved_bytes: usize,
}

impl MemoryOptimizationReport {
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
    pub fn format_human_readable(&self) -> String {
        let mut report = String::new();
        
        report.push_str("üß† –û—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏\n\n");
        
        if let Some(ref stats) = self.memory_stats {
            report.push_str(&stats.format());
            report.push('\n');
        }
        
        report.push_str(&format!(
            "\nüíæ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {:.2} KB\n\n",
            self.total_saved_bytes as f64 / 1024.0
        ));
        
        report.push_str(&self.string_interning_stats.format());
        
        report
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::collections::HashMap;
    
    fn create_test_context() -> TypeContext {
        let mut variables = HashMap::new();
        variables.insert("var1".to_string(), crate::core::standard_types::primitive_type(
            crate::core::types::PrimitiveType::String
        ));
        variables.insert("var2".to_string(), crate::core::standard_types::primitive_type(
            crate::core::types::PrimitiveType::Number
        ));
        
        TypeContext {
            variables,
            functions: HashMap::new(),
            current_scope: crate::core::dependency_graph::Scope::Global,
            scope_stack: vec![],
        }
    }
    
    #[test]
    fn test_memory_monitor() {
        let mut monitor = MemoryMonitor::new();
        let context = create_test_context();
        
        let profile = monitor.take_snapshot(&[&context]);
        
        assert!(profile.total_memory_bytes > 0);
        assert!(profile.object_counts.type_resolutions > 0);
        assert_eq!(monitor.profiles.len(), 1);
    }
    
    #[test]
    fn test_string_interner() {
        let mut interner = StringInterner::new();
        
        let s1 = interner.intern("test");
        let s2 = interner.intern("test");
        let s3 = interner.intern("other");
        
        // –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–µ–º –∂–µ Arc
        assert!(Arc::ptr_eq(&s1, &s2));
        assert!(!Arc::ptr_eq(&s1, &s3));
        
        let stats = interner.get_stats();
        assert_eq!(stats.unique_strings, 2);
        assert_eq!(stats.total_requests, 3);
        assert!(stats.hit_rate > 0.0);
    }
    
    #[test]
    fn test_memory_optimization_manager() {
        let manager = MemoryOptimizationManager::new();
        
        let report = manager.generate_optimization_report();
        // –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        assert!(report.format_human_readable().contains("üß† –û—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"));
    }
}