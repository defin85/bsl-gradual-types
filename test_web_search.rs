use bsl_gradual_types::core::platform_resolver::PlatformTypeResolver;

fn main() {
    println!("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...");
    
    let resolver = PlatformTypeResolver::new();
    
    println!("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ '–ú–∞—Å—Å–∏–≤':");
    let completions = resolver.get_completions("–ú–∞—Å—Å–∏–≤");
    println!("–ù–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", completions.len());
    
    for (i, completion) in completions.iter().take(5).enumerate() {
        println!("  {}. {} - {:?}", i+1, completion.label, completion.kind);
    }
    
    println!("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ '–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π':");
    let completions = resolver.get_completions("–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π");
    println!("–ù–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", completions.len());
    
    for (i, completion) in completions.iter().take(5).enumerate() {
        println!("  {}. {} - {:?}", i+1, completion.label, completion.kind);
    }
    
    println!("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ 'Array':");
    let completions = resolver.get_completions("Array");
    println!("–ù–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", completions.len());
    
    for (i, completion) in completions.iter().take(5).enumerate() {
        println!("  {}. {} - {:?}", i+1, completion.label, completion.kind);
    }
}