//! CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ BSL Type System

use anyhow::Result;
use clap::{Parser, Subcommand};
use colored::*;
use std::path::PathBuf;

use bsl_gradual_types::core::parallel_analysis::{
    ParallelAnalysisCLI, ParallelAnalysisConfig, ParallelAnalyzer,
};
use bsl_gradual_types::core::performance::{global_profiler, BenchmarkSuite, PerformanceOptimizer};
use bsl_gradual_types::parsing::bsl::common::ParserFactory;

#[derive(Parser)]
#[command(name = "bsl-profiler")]
#[command(about = "–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è BSL Type System")]
struct Cli {
    #[command(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
    Benchmark {
        /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞
        #[arg(short, long, default_value = "10")]
        iterations: usize,

        /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
        #[arg(short, long)]
        output: Option<PathBuf>,
    },

    /// –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π BSL —Ñ–∞–π–ª
    Profile {
        /// –ü—É—Ç—å –∫ BSL —Ñ–∞–π–ª—É
        file: PathBuf,

        /// –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        #[arg(short, long)]
        verbose: bool,

        /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª  
        #[arg(short, long)]
        output: Option<PathBuf>,
    },

    /// –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
    Compare {
        /// –ë–∞–∑–æ–≤—ã–π BSL —Ñ–∞–π–ª
        baseline: PathBuf,

        /// –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π BSL —Ñ–∞–π–ª
        modified: PathBuf,

        /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
        #[arg(short, long, default_value = "5")]
        iterations: usize,
    },

    /// –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    Analyze {
        /// JSON —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        report: PathBuf,
    },

    /// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ 1–°
    Project {
        /// –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ 1–°
        path: PathBuf,

        /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = CPU cores)
        #[arg(short, long)]
        threads: Option<usize>,

        /// –ü–æ–∫–∞–∑–∞—Ç—å –±–µ–Ω—á–º–∞—Ä–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π vs –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π
        #[arg(short, long)]
        benchmark: bool,

        /// –û—Ç–∫–ª—é—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        #[arg(long)]
        no_cache: bool,
    },
}

#[tokio::main]
async fn main() -> Result<()> {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    tracing_subscriber::fmt()
        .with_env_filter("bsl_gradual_types=info")
        .init();

    let cli = Cli::parse();

    match cli.command {
        Commands::Benchmark {
            iterations: _,
            output,
        } => {
            println!("{}", "üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤...".cyan().bold());

            let report = BenchmarkSuite::run_full_benchmark_suite();

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            println!("{}", report.format_human_readable());

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if let Some(output_path) = output {
                let json_report = serde_json::to_string_pretty(&report)?;
                std::fs::write(&output_path, json_report)?;
                println!("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {}", output_path.display());
            }

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            let suggestions = PerformanceOptimizer::analyze_and_suggest(&report);
            if !suggestions.is_empty() {
                println!("\n{}", "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:".yellow().bold());
                for (i, suggestion) in suggestions.iter().enumerate() {
                    let priority_color = match suggestion.priority {
                        bsl_gradual_types::core::performance::OptimizationPriority::Critical => {
                            "red"
                        }
                        bsl_gradual_types::core::performance::OptimizationPriority::High => {
                            "yellow"
                        }
                        bsl_gradual_types::core::performance::OptimizationPriority::Medium => {
                            "blue"
                        }
                        bsl_gradual_types::core::performance::OptimizationPriority::Low => "green",
                    };

                    println!(
                        "  {}. {} [{}]",
                        i + 1,
                        suggestion.suggestion,
                        format!("{:?}", suggestion.priority).color(priority_color)
                    );
                }
            }
        }

        Commands::Profile {
            file,
            verbose,
            output,
        } => {
            println!(
                "{}",
                format!("üî¨ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {}", file.display())
                    .cyan()
                    .bold()
            );

            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            let source_code = std::fs::read_to_string(&file)?;

            // –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            let profiler = global_profiler();
            profiler.enable();

            // –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            let parsing_time = std::time::Instant::now();
            let mut parser = ParserFactory::create();
            let program = parser.parse(&source_code)?;
            let parsing_elapsed = parsing_time.elapsed();

            println!("üìù –ü–∞—Ä—Å–∏–Ω–≥: {:.2?}", parsing_elapsed);

            // –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º type checking
            let type_check_time = std::time::Instant::now();
            let type_checker = bsl_gradual_types::core::type_checker::TypeChecker::new(
                file.file_name().unwrap().to_str().unwrap().to_string(),
            );
            let (context, diagnostics) = type_checker.check(&program);
            let type_check_elapsed = type_check_time.elapsed();

            println!("üîç Type checking: {:.2?}", type_check_elapsed);
            println!("üìä –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {}", context.variables.len());
            println!("üìä –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {}", context.functions.len());
            println!("üö® –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {}", diagnostics.len());

            if verbose {
                println!("\n{}", "üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:".yellow().bold());

                if !context.variables.is_empty() {
                    println!("üì¶ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:");
                    for (name, type_res) in context.variables.iter().take(10) {
                        println!("  ‚Ä¢ {} -> {:?}", name, type_res.result);
                    }
                }

                if !context.functions.is_empty() {
                    println!("üîß –§—É–Ω–∫—Ü–∏–∏:");
                    for (name, sig) in context.functions.iter().take(5) {
                        println!("  ‚Ä¢ {} -> {:?}", name, sig.return_type.result);
                    }
                }

                if !diagnostics.is_empty() {
                    println!("üö® –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:");
                    for diag in diagnostics.iter().take(5) {
                        let severity_color = match diag.severity {
                            bsl_gradual_types::core::type_checker::DiagnosticSeverity::Error => {
                                "red"
                            }
                            bsl_gradual_types::core::type_checker::DiagnosticSeverity::Warning => {
                                "yellow"
                            }
                            _ => "blue",
                        };
                        println!(
                            "  ‚Ä¢ {} [{}:{}] {}",
                            diag.message.color(severity_color),
                            diag.line,
                            diag.column,
                            format!("{:?}", diag.severity).color(severity_color)
                        );
                    }
                }
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            let report = profiler.generate_report();

            if let Some(output_path) = output {
                let json_report = serde_json::to_string_pretty(&report)?;
                std::fs::write(&output_path, json_report)?;
                println!("\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {}", output_path.display());
            }
        }

        Commands::Compare {
            baseline,
            modified,
            iterations,
        } => {
            println!("{}", "‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...".cyan().bold());

            let baseline_code = std::fs::read_to_string(&baseline)?;
            let modified_code = std::fs::read_to_string(&modified)?;

            println!("üìä –ë–µ–Ω—á–º–∞—Ä–∫ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ ({} –∏—Ç–µ—Ä–∞—Ü–∏–π)...", iterations);
            let baseline_metrics = BenchmarkSuite::benchmark_parsing(&baseline_code, iterations);

            println!("üìä –ë–µ–Ω—á–º–∞—Ä–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ({} –∏—Ç–µ—Ä–∞—Ü–∏–π)...", iterations);
            let modified_metrics = BenchmarkSuite::benchmark_parsing(&modified_code, iterations);

            // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            let speedup = baseline_metrics.avg_time.as_nanos() as f64
                / modified_metrics.avg_time.as_nanos() as f64;

            println!("\n{}", "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:".green().bold());
            println!(
                "  –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {:.2?} (—Å—Ä–µ–¥–Ω–µ–µ)",
                baseline_metrics.avg_time
            );
            println!(
                "  –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {:.2?} (—Å—Ä–µ–¥–Ω–µ–µ)",
                modified_metrics.avg_time
            );

            if speedup > 1.0 {
                println!("  üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {:.2}x", speedup.to_string().green().bold());
            } else if speedup < 1.0 {
                println!(
                    "  üêå –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ: {:.2}x",
                    (1.0 / speedup).to_string().red().bold()
                );
            } else {
                println!("  ‚öñÔ∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π");
            }
        }

        Commands::Analyze { report } => {
            println!(
                "{}",
                "üîç –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...".cyan().bold()
            );

            let report_json = std::fs::read_to_string(&report)?;
            let perf_report: bsl_gradual_types::core::performance::PerformanceReport =
                serde_json::from_str(&report_json)?;

            // –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
            println!("{}", perf_report.format_human_readable());

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            let suggestions = PerformanceOptimizer::analyze_and_suggest(&perf_report);
            let cache_recommendations = PerformanceOptimizer::cache_recommendations(&perf_report);

            if !suggestions.is_empty() {
                println!("\n{}", "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:".yellow().bold());
                for (i, suggestion) in suggestions.iter().enumerate() {
                    println!("  {}. {}", i + 1, suggestion.suggestion);
                }
            }

            if !cache_recommendations.is_empty() {
                println!("\n{}", "üóÑÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—é:".blue().bold());
                for (i, rec) in cache_recommendations.iter().enumerate() {
                    println!(
                        "  {}. {}: {} ({:?})",
                        i + 1,
                        rec.component,
                        rec.reason,
                        rec.strategy
                    );
                }
            }
        }

        Commands::Project {
            path,
            threads,
            benchmark,
            no_cache,
        } => {
            println!(
                "{}",
                format!("üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: {}", path.display())
                    .cyan()
                    .bold()
            );

            let config = ParallelAnalysisConfig {
                num_threads: threads,
                use_cache: !no_cache,
                show_progress: true,
                ..Default::default()
            };

            if benchmark {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫
                let analyzer = ParallelAnalyzer::new(config.clone())?;
                let files = ParallelAnalyzer::find_bsl_files(&path)?;

                if files.len() < 2 {
                    println!("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)");
                } else {
                    let files_sample = files.into_iter().take(10).collect(); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
                    println!("üìä –ë–µ–Ω—á–º–∞—Ä–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ vs –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...");

                    let benchmark_result =
                        analyzer.benchmark_parallel_vs_sequential(files_sample)?;
                    println!("\n{}", benchmark_result.format_results());
                }
            }

            // –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
            ParallelAnalysisCLI::run_project_analysis(path, config)?;
        }
    }

    Ok(())
}
