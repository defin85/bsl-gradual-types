//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å syntax helper

use bsl_gradual_types::adapters::platform_types_v2::create_platform_resolver_with_syntax_helper;

fn main() -> anyhow::Result<()> {
    println!("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è PlatformTypesResolverV2 ===\n");
    
    // –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–æ–ª–≤–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π syntax helper
    let resolver = create_platform_resolver_with_syntax_helper();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:");
    let stats = resolver.get_statistics();
    for (key, value) in &stats {
        println!("  {}: {}", key, value);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
    if resolver.is_loaded() {
        println!("\n‚úÖ –î–∞–Ω–Ω—ã–µ syntax helper –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    } else {
        println!("\n‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ hardcoded —Ç–∏–ø—ã (syntax helper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)");
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    let global_functions = resolver.get_global_functions();
    println!("\nüîß –ü—Ä–∏–º–µ—Ä—ã –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–≤—Å–µ–≥–æ {}):", global_functions.len());
    for (name, _) in global_functions.iter().take(15) {
        println!("  - {}", name);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    let platform_globals = resolver.get_platform_globals();
    println!("\nüì¶ –í—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤—Å–µ–≥–æ {}):", platform_globals.len());
    for (name, _) in platform_globals.iter().take(20) {
        println!("  - {}", name);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã
    let primitive_types = resolver.get_primitive_types();
    println!("\nüß± –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã (–≤—Å–µ–≥–æ {}):", primitive_types.len());
    for (name, _) in primitive_types.iter().take(10) {
        println!("  - {}", name);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    let keywords = resolver.get_keywords();
    println!("\nüî§ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–≤—Å–µ–≥–æ {}):", keywords.len());
    for keyword in keywords.iter().take(15) {
        print!("{}, ", keyword);
    }
    println!();
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    let operators = resolver.get_operators();
    println!("\n‚ûï –û–ø–µ—Ä–∞—Ç–æ—Ä—ã (–≤—Å–µ–≥–æ {}):", operators.len());
    for op in operators.iter().take(10) {
        print!("{}, ", op);
    }
    println!();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    println!("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:");
    
    let test_functions = vec![
        "–°–æ–æ–±—â–∏—Ç—å", "Message", 
        "–¢–∏–ø", "Type",
        "–°—Ç—Ä–æ–∫–∞", "String",
        "–ó–Ω–∞—á–µ–Ω–∏–µ–ó–∞–ø–æ–ª–Ω–µ–Ω–æ", "ValueIsFilled",
    ];
    
    for func_name in test_functions {
        if platform_globals.contains_key(func_name) {
            println!("  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {}", func_name);
        } else {
            println!("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {}", func_name);
        }
    }
    
    println!("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    
    Ok(())
}