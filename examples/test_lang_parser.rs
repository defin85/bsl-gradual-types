//! –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —è–∑—ã–∫–æ–≤–æ–π —Å–ø—Ä–∞–≤–∫–∏

use bsl_gradual_types::adapters::syntax_helper_parser::SyntaxHelperParser;
use std::path::Path;

fn main() -> anyhow::Result<()> {
    println!("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —è–∑—ã–∫–æ–≤–æ–π —Å–ø—Ä–∞–≤–∫–∏ ===\n");
    
    let lang_path = "examples/syntax_helper/rebuilt.shlang_ru.zip";
    
    if !Path::new(lang_path).exists() {
        anyhow::bail!("–§–∞–π–ª —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —è–∑—ã–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", lang_path);
    }
    
    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä —Ç–æ–ª—å–∫–æ —Å —è–∑—ã–∫–æ–≤–æ–π —Å–ø—Ä–∞–≤–∫–æ–π
    let mut parser = SyntaxHelperParser::new()
        .with_lang_archive(lang_path);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    println!("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...");
    parser.parse()?;
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    let database = parser.database();
    
    // –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    println!("\nüìä –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {}", database.keywords.len());
    println!("\n–ü—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n");
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    use std::collections::HashMap;
    let mut by_category: HashMap<String, Vec<String>> = HashMap::new();
    
    for keyword in &database.keywords {
        let category = format!("{:?}", keyword.category);
        let entry = format!("{} / {}", keyword.russian, keyword.english);
        by_category.entry(category).or_default().push(entry);
    }
    
    // –í—ã–≤–æ–¥–∏–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for (category, keywords) in by_category {
        println!("{}:", category);
        for (i, keyword) in keywords.iter().enumerate() {
            if i >= 5 {
                println!("  ... –∏ –µ—â—ë {}", keywords.len() - 5);
                break;
            }
            println!("  - {}", keyword);
        }
        println!();
    }
    
    Ok(())
}