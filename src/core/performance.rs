//! –ú–æ–¥—É–ª—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//!
//! –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//! —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤.

use std::collections::HashMap;
use std::time::{Duration, Instant};
use serde::{Serialize, Deserialize};

/// –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ComponentMetrics {
    /// –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    pub name: String,
    /// –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    pub total_time: Duration,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤
    pub call_count: usize,
    /// –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    pub avg_time: Duration,
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    pub min_time: Duration,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    pub max_time: Duration,
    /// –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π
    pub recent_times: Vec<Duration>,
}

impl ComponentMetrics {
    pub fn new(name: String) -> Self {
        Self {
            name,
            total_time: Duration::ZERO,
            call_count: 0,
            avg_time: Duration::ZERO,
            min_time: Duration::MAX,
            max_time: Duration::ZERO,
            recent_times: Vec::new(),
        }
    }
    
    /// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
    pub fn add_measurement(&mut self, time: Duration) {
        self.total_time += time;
        self.call_count += 1;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º min/max
        if time < self.min_time {
            self.min_time = time;
        }
        if time > self.max_time {
            self.max_time = time;
        }
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ
        self.avg_time = self.total_time / self.call_count as u32;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        self.recent_times.push(time);
        if self.recent_times.len() > 10 {
            self.recent_times.remove(0);
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    pub fn get_percentile(&self, percentile: f64) -> Duration {
        if self.recent_times.is_empty() {
            return Duration::ZERO;
        }
        
        let mut sorted_times = self.recent_times.clone();
        sorted_times.sort();
        
        let index = ((sorted_times.len() - 1) as f64 * percentile / 100.0) as usize;
        sorted_times[index]
    }
}

/// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
pub struct PerformanceProfiler {
    /// –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    metrics: HashMap<String, ComponentMetrics>,
    /// –í–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
    enabled: bool,
    /// –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    session_start: Instant,
}

impl PerformanceProfiler {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
    pub fn new() -> Self {
        Self {
            metrics: HashMap::new(),
            enabled: false,
            session_start: Instant::now(),
        }
    }
    
    /// –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    pub fn enable(&mut self) {
        self.enabled = true;
        self.session_start = Instant::now();
    }
    
    /// –í—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    pub fn disable(&mut self) {
        self.enabled = false;
    }
    
    /// –ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞ –∫–æ–¥–∞
    pub fn measure<F, R>(&mut self, component: &str, func: F) -> R
    where
        F: FnOnce() -> R,
    {
        if !self.enabled {
            return func();
        }
        
        let start = Instant::now();
        let result = func();
        let elapsed = start.elapsed();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ
        let metrics = self.metrics.entry(component.to_string())
            .or_insert_with(|| ComponentMetrics::new(component.to_string()));
        metrics.add_measurement(elapsed);
        
        result
    }
    
    /// –°–æ–∑–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    pub fn start_timer(&self, component: &str) -> PerformanceTimer {
        PerformanceTimer {
            component: component.to_string(),
            start_time: Instant::now(),
            enabled: self.enabled,
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    pub fn get_metrics(&self, component: &str) -> Option<&ComponentMetrics> {
        self.metrics.get(component)
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
    pub fn get_all_metrics(&self) -> &HashMap<String, ComponentMetrics> {
        &self.metrics
    }
    
    /// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub fn generate_report(&self) -> PerformanceReport {
        let mut total_time = Duration::ZERO;
        let mut total_calls = 0;
        
        for metrics in self.metrics.values() {
            total_time += metrics.total_time;
            total_calls += metrics.call_count;
        }
        
        PerformanceReport {
            session_duration: self.session_start.elapsed(),
            total_analysis_time: total_time,
            total_calls,
            avg_call_time: if total_calls > 0 { 
                total_time / total_calls as u32 
            } else { 
                Duration::ZERO 
            },
            components: self.metrics.clone(),
            slowest_components: self.get_slowest_components(5),
            most_called_components: self.get_most_called_components(5),
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    fn get_slowest_components(&self, limit: usize) -> Vec<(String, Duration)> {
        let mut components: Vec<_> = self.metrics.iter()
            .map(|(name, metrics)| (name.clone(), metrics.avg_time))
            .collect();
        
        components.sort_by(|a, b| b.1.cmp(&a.1));
        components.truncate(limit);
        components
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–µ –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    fn get_most_called_components(&self, limit: usize) -> Vec<(String, usize)> {
        let mut components: Vec<_> = self.metrics.iter()
            .map(|(name, metrics)| (name.clone(), metrics.call_count))
            .collect();
        
        components.sort_by(|a, b| b.1.cmp(&a.1));
        components.truncate(limit);
        components
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
    pub fn reset(&mut self) {
        self.metrics.clear();
        self.session_start = Instant::now();
    }
    
    /// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ JSON
    pub fn export_json(&self) -> anyhow::Result<String> {
        let report = self.generate_report();
        Ok(serde_json::to_string_pretty(&report)?)
    }
}

/// –¢–∞–π–º–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
pub struct PerformanceTimer {
    component: String,
    start_time: Instant,
    enabled: bool,
}

impl PerformanceTimer {
    /// –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    pub fn finish(self, profiler: &mut PerformanceProfiler) {
        if !self.enabled {
            return;
        }
        
        let elapsed = self.start_time.elapsed();
        let metrics = profiler.metrics.entry(self.component.clone())
            .or_insert_with(|| ComponentMetrics::new(self.component));
        metrics.add_measurement(elapsed);
    }
}

/// –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PerformanceReport {
    /// –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    pub session_duration: Duration,
    /// –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
    pub total_analysis_time: Duration,
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤
    pub total_calls: usize,
    /// –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞
    pub avg_call_time: Duration,
    /// –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    pub components: HashMap<String, ComponentMetrics>,
    /// –°–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    pub slowest_components: Vec<(String, Duration)>,
    /// –°–∞–º—ã–µ –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    pub most_called_components: Vec<(String, usize)>,
}

impl PerformanceReport {
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    pub fn format_human_readable(&self) -> String {
        let mut report = String::new();
        
        report.push_str(&format!("üîç –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ BSL Type System\n"));
        report.push_str(&format!("üìä –°–µ—Å—Å–∏—è: {:.2?}\n", self.session_duration));
        report.push_str(&format!("‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {:.2?}\n", self.total_analysis_time));
        report.push_str(&format!("üî¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤: {}\n", self.total_calls));
        report.push_str(&format!("üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞: {:.2?}\n\n", self.avg_call_time));
        
        report.push_str("üêå –°–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n");
        for (i, (name, time)) in self.slowest_components.iter().enumerate() {
            report.push_str(&format!("  {}. {} - {:.2?}\n", i + 1, name, time));
        }
        
        report.push_str("\nüî• –°–∞–º—ã–µ –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n");
        for (i, (name, count)) in self.most_called_components.iter().enumerate() {
            report.push_str(&format!("  {}. {} - {} –≤—ã–∑–æ–≤–æ–≤\n", i + 1, name, count));
        }
        
        report.push_str("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\n");
        for (name, metrics) in &self.components {
            report.push_str(&format!(
                "  ‚Ä¢ {}: {:.2?} avg, {} calls, {:.2?}-{:.2?} range\n",
                name, metrics.avg_time, metrics.call_count, 
                metrics.min_time, metrics.max_time
            ));
        }
        
        report
    }
}

/// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞
static mut GLOBAL_PROFILER: Option<PerformanceProfiler> = None;
static PROFILER_INIT: std::sync::Once = std::sync::Once::new();

/// –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
pub fn global_profiler() -> &'static mut PerformanceProfiler {
    unsafe {
        PROFILER_INIT.call_once(|| {
            GLOBAL_PROFILER = Some(PerformanceProfiler::new());
        });
        GLOBAL_PROFILER.as_mut().unwrap()
    }
}

/// –ú–∞–∫—Ä–æ—Å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
#[macro_export]
macro_rules! profile {
    ($component:expr, $block:block) => {{
        let mut profiler = $crate::core::performance::global_profiler();
        profiler.measure($component, || $block)
    }};
}

/// –ú–∞–∫—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è async –±–ª–æ–∫–æ–≤
#[macro_export]
macro_rules! profile_async {
    ($component:expr, $block:expr) => {{
        let timer = $crate::core::performance::global_profiler().start_timer($component);
        let result = $block.await;
        timer.finish($crate::core::performance::global_profiler());
        result
    }};
}

/// –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
pub struct PerformanceOptimizer;

impl PerformanceOptimizer {
    /// –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    pub fn analyze_and_suggest(report: &PerformanceReport) -> Vec<OptimizationSuggestion> {
        let mut suggestions = Vec::new();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        for (component, avg_time) in &report.slowest_components {
            if avg_time.as_millis() > 100 {
                suggestions.push(OptimizationSuggestion {
                    component: component.clone(),
                    issue: "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ".to_string(),
                    suggestion: format!(
                        "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {} –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {:.2?} –≤ —Å—Ä–µ–¥–Ω–µ–º. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                        component, avg_time
                    ),
                    priority: OptimizationPriority::High,
                });
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        for (component, call_count) in &report.most_called_components {
            if *call_count > 1000 {
                if let Some(metrics) = report.components.get(component) {
                    if metrics.avg_time.as_millis() > 10 {
                        suggestions.push(OptimizationSuggestion {
                            component: component.clone(),
                            issue: "–ß–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞".to_string(),
                            suggestion: format!(
                                "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {} –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è {} —Ä–∞–∑ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –≤—Ä–µ–º–µ–Ω–µ–º {:.2?}. –î–æ–±–∞–≤—å—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                                component, call_count, metrics.avg_time
                            ),
                            priority: OptimizationPriority::Medium,
                        });
                    }
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if report.avg_call_time.as_millis() > 50 {
            suggestions.push(OptimizationSuggestion {
                component: "–û–±—â–∞—è —Å–∏—Å—Ç–µ–º–∞".to_string(),
                issue: "–û–±—â–∞—è –º–µ–¥–ª–µ–Ω–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã".to_string(),
                suggestion: format!(
                    "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ {:.2?} –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ (50ms). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—â—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.",
                    report.avg_call_time
                ),
                priority: OptimizationPriority::Medium,
            });
        }
        
        suggestions
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—é
    pub fn cache_recommendations(report: &PerformanceReport) -> Vec<CacheRecommendation> {
        let mut recommendations = Vec::new();
        
        for (component, metrics) in &report.components {
            // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∏ —á–∞—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if metrics.call_count > 100 && metrics.avg_time.as_millis() > 20 {
                recommendations.push(CacheRecommendation {
                    component: component.clone(),
                    strategy: CacheStrategy::LRU,
                    estimated_speedup: format!("{}x", metrics.call_count / 10),
                    reason: format!(
                        "{} –≤—ã–∑–æ–≤–æ–≤ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º {:.2?}",
                        metrics.call_count, metrics.avg_time
                    ),
                });
            }
        }
        
        recommendations
    }
}

/// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OptimizationSuggestion {
    pub component: String,
    pub issue: String,
    pub suggestion: String,
    pub priority: OptimizationPriority,
}

/// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub enum OptimizationPriority {
    Low,
    Medium,
    High,
    Critical,
}

/// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—é
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CacheRecommendation {
    pub component: String,
    pub strategy: CacheStrategy,
    pub estimated_speedup: String,
    pub reason: String,
}

/// –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum CacheStrategy {
    LRU,      // Least Recently Used
    TTL,      // Time To Live
    WriteThrough, // Write-through cache
    WriteBack,    // Write-back cache
}

/// –ë–µ–Ω—á–º–∞—Ä–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
pub struct BenchmarkSuite;

impl BenchmarkSuite {
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    pub fn benchmark_parsing(source_code: &str, iterations: usize) -> ComponentMetrics {
        let mut metrics = ComponentMetrics::new("parsing".to_string());
        
        for _ in 0..iterations {
            let start = Instant::now();
            
            let mut parser = crate::parser::common::ParserFactory::create();
            let _result = parser.parse(source_code);
            
            metrics.add_measurement(start.elapsed());
        }
        
        metrics
    }
    
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫ type checking
    pub fn benchmark_type_checking(program: &crate::parser::ast::Program, iterations: usize) -> ComponentMetrics {
        let mut metrics = ComponentMetrics::new("type_checking".to_string());
        
        for _ in 0..iterations {
            let start = Instant::now();
            
            let type_checker = crate::core::type_checker::TypeChecker::new("benchmark.bsl".to_string());
            let _result = type_checker.check(program);
            
            metrics.add_measurement(start.elapsed());
        }
        
        metrics
    }
    
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫ flow-sensitive –∞–Ω–∞–ª–∏–∑–∞
    pub fn benchmark_flow_analysis(
        program: &crate::parser::ast::Program, 
        iterations: usize
    ) -> ComponentMetrics {
        let mut metrics = ComponentMetrics::new("flow_analysis".to_string());
        
        for _ in 0..iterations {
            let start = Instant::now();
            
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            let context = crate::core::type_checker::TypeContext {
                variables: std::collections::HashMap::new(),
                functions: std::collections::HashMap::new(),
                current_scope: crate::core::dependency_graph::Scope::Global,
                scope_stack: vec![],
            };
            
            let mut analyzer = crate::core::flow_sensitive::FlowSensitiveAnalyzer::new(context);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ statements
            for statement in &program.statements {
                analyzer.analyze_statement(statement);
            }
            
            metrics.add_measurement(start.elapsed());
        }
        
        metrics
    }
    
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
    pub fn run_full_benchmark_suite() -> PerformanceReport {
        let mut profiler = PerformanceProfiler::new();
        profiler.enable();
        
        // –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
        let test_code = r#"
            –§—É–Ω–∫—Ü–∏—è –¢–µ—Å—Ç–æ–≤–∞—è–§—É–Ω–∫—Ü–∏—è(–ø–∞—Ä–∞–º–µ—Ç—Ä1, –ø–∞—Ä–∞–º–µ—Ç—Ä2)
                –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä1 > 0 –¢–æ–≥–¥–∞
                    —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –ø–∞—Ä–∞–º–µ—Ç—Ä1 + –ø–∞—Ä–∞–º–µ—Ç—Ä2;
                    –í–æ–∑–≤—Ä–∞—Ç –°—Ç—Ä–æ–∫–∞(—Ä–µ–∑—É–ª—å—Ç–∞—Ç);
                –ò–Ω–∞—á–µ
                    –í–æ–∑–≤—Ä–∞—Ç "–æ—à–∏–±–∫–∞";
                –ö–æ–Ω–µ—Ü–ï—Å–ª–∏;
            –ö–æ–Ω–µ—Ü–§—É–Ω–∫—Ü–∏–∏
            
            –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¢–µ—Å—Ç–æ–≤–∞—è–ü—Ä–æ—Ü–µ–¥—É—Ä–∞()
                –î–ª—è —Å—á = 1 –ü–æ 10 –¶–∏–∫–ª
                    –∑–Ω–∞—á–µ–Ω–∏–µ = –¢–µ—Å—Ç–æ–≤–∞—è–§—É–Ω–∫—Ü–∏—è(—Å—á, —Å—á * 2);
                    –°–æ–æ–±—â–∏—Ç—å(–∑–Ω–∞—á–µ–Ω–∏–µ);
                –ö–æ–Ω–µ—Ü–¶–∏–∫–ª–∞;
            –ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã
        "#;
        
        // –ü–∞—Ä—Å–∏–Ω–≥
        let parsing_metrics = Self::benchmark_parsing(test_code, 50);
        
        // –ü–∞—Ä—Å–∏–º –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AST
        let mut parser = crate::parser::common::ParserFactory::create();
        if let Ok(program) = parser.parse(test_code) {
            // Type checking
            let type_checking_metrics = Self::benchmark_type_checking(&program, 20);
            
            // Flow analysis
            let flow_metrics = Self::benchmark_flow_analysis(&program, 20);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
            profiler.metrics.insert("parsing".to_string(), parsing_metrics);
            profiler.metrics.insert("type_checking".to_string(), type_checking_metrics);
            profiler.metrics.insert("flow_analysis".to_string(), flow_metrics);
        }
        
        profiler.generate_report()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_component_metrics() {
        let mut metrics = ComponentMetrics::new("test".to_string());
        
        metrics.add_measurement(Duration::from_millis(10));
        metrics.add_measurement(Duration::from_millis(20));
        metrics.add_measurement(Duration::from_millis(15));
        
        assert_eq!(metrics.call_count, 3);
        assert_eq!(metrics.avg_time, Duration::from_millis(15));
        assert_eq!(metrics.min_time, Duration::from_millis(10));
        assert_eq!(metrics.max_time, Duration::from_millis(20));
    }
    
    #[test]
    fn test_performance_profiler() {
        let mut profiler = PerformanceProfiler::new();
        profiler.enable();
        
        let result = profiler.measure("test_component", || {
            std::thread::sleep(Duration::from_millis(1));
            42
        });
        
        assert_eq!(result, 42);
        
        let metrics = profiler.get_metrics("test_component").unwrap();
        assert_eq!(metrics.call_count, 1);
        assert!(metrics.avg_time.as_millis() >= 1);
    }
    
    #[test]
    fn test_performance_timer() {
        let mut profiler = PerformanceProfiler::new();
        profiler.enable();
        
        let timer = profiler.start_timer("manual_test");
        std::thread::sleep(Duration::from_millis(1));
        timer.finish(&mut profiler);
        
        let metrics = profiler.get_metrics("manual_test").unwrap();
        assert_eq!(metrics.call_count, 1);
    }
    
    #[test]
    fn test_benchmark_suite() {
        let simple_code = "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¢–µ—Å—Ç() –ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã";
        let metrics = BenchmarkSuite::benchmark_parsing(simple_code, 5);
        
        assert_eq!(metrics.call_count, 5);
        assert!(metrics.avg_time.as_nanos() > 0);
    }
    
    #[test]
    fn test_optimization_suggestions() {
        // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç —Å –º–µ–¥–ª–µ–Ω–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
        let mut components = HashMap::new();
        let mut slow_metrics = ComponentMetrics::new("slow_component".to_string());
        slow_metrics.add_measurement(Duration::from_millis(200));
        components.insert("slow_component".to_string(), slow_metrics);
        
        let report = PerformanceReport {
            session_duration: Duration::from_secs(60),
            total_analysis_time: Duration::from_millis(200),
            total_calls: 1,
            avg_call_time: Duration::from_millis(200),
            components,
            slowest_components: vec![("slow_component".to_string(), Duration::from_millis(200))],
            most_called_components: vec![],
        };
        
        let suggestions = PerformanceOptimizer::analyze_and_suggest(&report);
        assert!(!suggestions.is_empty());
        assert_eq!(suggestions[0].priority, OptimizationPriority::High);
    }
}