name: Nightly Tests

on:
  schedule:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 2:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é

jobs:
  nightly-tests:
    name: Nightly Rust Tests
    runs-on: ubuntu-latest
    continue-on-error: true # Nightly –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install nightly Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt, clippy, miri
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-nightly-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run tests with nightly
      run: cargo test --all-features
      
    - name: Run Miri for unsafe code detection
      run: |
        # Miri –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ unsafe –∫–æ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        cargo miri test --all-features || echo "Miri tests failed or no unsafe code"
        
    - name: Future compatibility check
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å future Rust features
        cargo check -Z future-incompat-report
        
  large-project-simulation:
    name: Large Project Simulation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Generate large test project
      run: |
        mkdir -p large_test_project/src/CommonModules
        mkdir -p large_test_project/src/Catalogs
        mkdir -p large_test_project/src/Documents
        mkdir -p large_test_project/src/Reports
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ BSL —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –±–æ–ª—å—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        for i in {1..50}; do
          cat > large_test_project/src/CommonModules/Module$i.bsl << EOF
        –§—É–Ω–∫—Ü–∏—è –§—É–Ω–∫—Ü–∏—è${i}(–ø–∞—Ä–∞–º–µ—Ç—Ä1, –ø–∞—Ä–∞–º–µ—Ç—Ä2, –ø–∞—Ä–∞–º–µ—Ç—Ä3)
            –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä1 > –ø–∞—Ä–∞–º–µ—Ç—Ä2 –¢–æ–≥–¥–∞
                —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –ø–∞—Ä–∞–º–µ—Ç—Ä1 * –ø–∞—Ä–∞–º–µ—Ç—Ä3;
                –º–∞—Å—Å–∏–≤ = –ù–æ–≤—ã–π –ú–∞—Å—Å–∏–≤;
                –î–ª—è —Å—á = 1 –ü–æ –ø–∞—Ä–∞–º–µ—Ç—Ä2 –¶–∏–∫–ª
                    –º–∞—Å—Å–∏–≤.–î–æ–±–∞–≤–∏—Ç—å(—Å—á * —Ä–µ–∑—É–ª—å—Ç–∞—Ç);
                –ö–æ–Ω–µ—Ü–¶–∏–∫–ª–∞;
                –í–æ–∑–≤—Ä–∞—Ç –º–∞—Å—Å–∏–≤;
            –ò–Ω–∞—á–µ–ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä2 > –ø–∞—Ä–∞–º–µ—Ç—Ä3 –¢–æ–≥–¥–∞
                —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ = –ù–æ–≤—ã–π –°—Ç—Ä—É–∫—Ç—É—Ä–∞;
                —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.–í—Å—Ç–∞–≤–∏—Ç—å("–∑–Ω–∞—á–µ–Ω–∏–µ1", –ø–∞—Ä–∞–º–µ—Ç—Ä1);
                —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.–í—Å—Ç–∞–≤–∏—Ç—å("–∑–Ω–∞—á–µ–Ω–∏–µ2", –ø–∞—Ä–∞–º–µ—Ç—Ä2);
                —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.–í—Å—Ç–∞–≤–∏—Ç—å("–∑–Ω–∞—á–µ–Ω–∏–µ3", –ø–∞—Ä–∞–º–µ—Ç—Ä3);
                –í–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞;
            –ò–Ω–∞—á–µ
                –í–æ–∑–≤—Ä–∞—Ç –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ;
            –ö–æ–Ω–µ—Ü–ï—Å–ª–∏;
        –ö–æ–Ω–µ—Ü–§—É–Ω–∫—Ü–∏–∏
        
        –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞${i}()
            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –§—É–Ω–∫—Ü–∏—è${i}(${i}, $((i*2)), $((i*3)));
            –ï—Å–ª–∏ –¢–∏–ø–ó–Ω—á(—Ä–µ–∑—É–ª—å—Ç–∞—Ç) = –¢–∏–ø("–ú–∞—Å—Å–∏–≤") –¢–æ–≥–¥–∞
                –î–ª—è –ö–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç –ò–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¶–∏–∫–ª
                    –°–æ–æ–±—â–∏—Ç—å("–≠–ª–µ–º–µ–Ω—Ç: " + –°—Ç—Ä–æ–∫–∞(—ç–ª–µ–º–µ–Ω—Ç));
                –ö–æ–Ω–µ—Ü–¶–∏–∫–ª–∞;
            –ò–Ω–∞—á–µ–ï—Å–ª–∏ –¢–∏–ø–ó–Ω—á(—Ä–µ–∑—É–ª—å—Ç–∞—Ç) = –¢–∏–ø("–°—Ç—Ä—É–∫—Ç—É—Ä–∞") –¢–æ–≥–¥–∞
                –î–ª—è –ö–∞–∂–¥–æ–≥–æ –ö–ª—é—á–ó–Ω–∞—á–µ–Ω–∏–µ –ò–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¶–∏–∫–ª
                    –°–æ–æ–±—â–∏—Ç—å(–ö–ª—é—á–ó–Ω–∞—á–µ–Ω–∏–µ.–ö–ª—é—á + ": " + –°—Ç—Ä–æ–∫–∞(–ö–ª—é—á–ó–Ω–∞—á–µ–Ω–∏–µ.–ó–Ω–∞—á–µ–Ω–∏–µ));
                –ö–æ–Ω–µ—Ü–¶–∏–∫–ª–∞;
            –ö–æ–Ω–µ—Ü–ï—Å–ª–∏;
        –ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã
        EOF
        done
        
    - name: Test large project analysis
      run: |
        echo "üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –±–æ–ª—å—à–æ–º –ø—Ä–æ–µ–∫—Ç–µ (50 –º–æ–¥—É–ª–µ–π)..."
        time cargo run --bin bsl-profiler project large_test_project --threads 4 --benchmark
        
    - name: Memory usage test
      run: |
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        /usr/bin/time -v cargo run --bin bsl-profiler project large_test_project --threads 1 2>&1 | grep "Maximum resident set size"
        
  cross-platform-compatibility:
    name: Cross-Platform Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, windows-2019, windows-2022, macos-11, macos-12]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Test platform-specific functionality
      run: |
        cargo test --all-features
        cargo run --bin bsl-profiler benchmark --iterations 3
        
    - name: Test file path handling
      run: |
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        mkdir -p "test dir with spaces/–º–æ–¥—É–ª—å —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"
        echo '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¢–µ—Å—Ç() –ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã' > "test dir with spaces/–º–æ–¥—É–ª—å —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏/—Ç–µ—Å—Ç.bsl"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–∫–∏–µ –ø—É—Ç–∏
        cargo run --bin type-check -- --file "test dir with spaces/–º–æ–¥—É–ª—å —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏/—Ç–µ—Å—Ç.bsl" || echo "Path handling test completed"