//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ DocumentationSearchEngine

use anyhow::Result;
use bsl_gradual_types::documentation::{
    PlatformDocumentationProvider, 
    DocumentationSearchEngine, AdvancedSearchQuery
};
use bsl_gradual_types::documentation::core::{DocumentationProvider, ProviderConfig};

#[tokio::main]
async fn main() -> Result<()> {
    println!("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ BSL –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏");
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    let search_engine = DocumentationSearchEngine::new();
    println!("‚úÖ DocumentationSearchEngine —Å–æ–∑–¥–∞–Ω");
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    let mut platform_provider = PlatformDocumentationProvider::new();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤)
    let config = ProviderConfig::default();
    match platform_provider.initialize(&config).await {
        Ok(_) => println!("‚úÖ PlatformDocumentationProvider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"),
        Err(e) => {
            println!("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {}", e);
            println!("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å–ø—Ä–∞–≤–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞");
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤
    let types_count = platform_provider.get_loaded_types_count().await;
    println!("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Ç–∏–ø–æ–≤ –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä", types_count);
    
    if types_count > 0 {
        // –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å—ã
        println!("\n=== üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ ===");
        let config_provider = bsl_gradual_types::documentation::ConfigurationDocumentationProvider::new();
        search_engine.build_indexes(&platform_provider, &config_provider).await?;
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
        println!("\n=== üîç –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ ===");
        let simple_query = AdvancedSearchQuery {
            query: "–¢–∞–±–ª–∏—Ü–∞".to_string(),
            ..Default::default()
        };
        
        let results = search_engine.search(simple_query).await?;
        println!("–ù–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", results.total_count);
        
        for (i, item) in results.items.iter().take(3).enumerate() {
            println!("  {}. {} - {}", i + 1, item.display_name, 
                item.description.chars().take(50).collect::<String>());
        }
        
        // –¢–µ—Å—Ç 2: –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        println!("\n=== üí° –¢–µ—Å—Ç 2: –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ===");
        let suggestions = search_engine.get_suggestions("–¢–∞–±–ª–∏").await?;
        println!("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è '–¢–∞–±–ª–∏': {:?}", suggestions.iter().take(5).collect::<Vec<_>>());
        
        // –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        println!("\n=== üìä –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===");
        let stats = search_engine.get_statistics().await?;
        println!("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", stats.total_queries);
        println!("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:.2}ms", stats.average_search_time_ms);
        
    } else {
        println!("‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞");
        println!("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å —Ñ–∞–π–ª—ã —Å–ø—Ä–∞–≤–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ examples/syntax_helper/");
    }
    
    println!("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    Ok(())
}