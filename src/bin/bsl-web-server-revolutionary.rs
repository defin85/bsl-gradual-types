//! –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –∏–¥–µ–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
//!
//! –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CentralTypeSystem
//! –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

use anyhow::Result;
use clap::Parser;
use serde::{Serialize, Deserialize};
use std::path::PathBuf;
use std::sync::Arc;
use warp::Filter;

use bsl_gradual_types::ideal::system::{CentralTypeSystem, CentralSystemConfig};
use bsl_gradual_types::ideal::presentation::{
    WebSearchRequest, WebHierarchyResponse, WebSearchResponse, WebTypeDetailsResponse
};

#[derive(Parser)]
#[command(name = "bsl-web-server-revolutionary")]
#[command(about = "–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä BSL —Ç–∏–ø–æ–≤ –Ω–∞ –∏–¥–µ–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ")]
struct Cli {
    /// –ü–æ—Ä—Ç –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
    #[arg(short, long, default_value = "8080")]
    port: u16,
    
    /// –ü—É—Ç—å –∫ HTML —Å–ø—Ä–∞–≤–∫–µ
    #[arg(long, default_value = "examples/syntax_helper/rebuilt.shcntx_ru")]
    html_path: String,
    
    /// –ü—É—Ç—å –∫ XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    #[arg(long)]
    config_path: Option<PathBuf>,
    
    /// –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    #[arg(long)]
    verbose: bool,
    
    /// –ü—É—Ç—å –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
    #[arg(long, default_value = "web")]
    static_dir: PathBuf,
}

/// –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
#[derive(Clone)]
struct RevolutionaryAppState {
    /// –ï–¥–∏–Ω–∞—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤
    central_system: Arc<CentralTypeSystem>,
}

#[tokio::main]
async fn main() -> Result<()> {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    tracing_subscriber::fmt()
        .with_env_filter("bsl_web_server_revolutionary=info,warp=info")
        .init();
    
    let cli = Cli::parse();
    
    println!("üöÄ –ó–∞–ø—É—Å–∫ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ì–û –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ BSL —Ç–∏–ø–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {}", cli.port);
    
    // === –ï–î–ò–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ ===
    println!("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ CentralTypeSystem...");
    
    let central_config = CentralSystemConfig {
        html_path: cli.html_path.clone(),
        configuration_path: cli.config_path.map(|p| p.to_string_lossy().to_string()),
        verbose_logging: cli.verbose,
        ..Default::default()
    };
    
    let central_system = Arc::new(CentralTypeSystem::new(central_config));
    
    println!("‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–ª–æ—ë–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...");
    if let Err(e) = central_system.initialize().await {
        println!("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", e);
        return Err(e);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    let metrics = central_system.get_system_metrics().await;
    println!("üìä –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞:");
    println!("   - –¢–∏–ø–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {}", metrics.total_types);
    println!("   - –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö: {}", metrics.platform_types);
    println!("   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö: {}", metrics.configuration_types);
    println!("   - –ü–∞–º—è—Ç—å: {:.2} MB", metrics.cache_memory_mb);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    let health = central_system.health_check().await;
    println!("üè• –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {} (score: {:.2})", health.status, health.overall_score);
    
    // –°–æ–∑–¥–∞—ë–º —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    let app_state = RevolutionaryAppState {
        central_system: central_system.clone(),
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    start_revolutionary_web_server(cli.port, app_state, cli.static_dir).await?;
    
    Ok(())
}

/// –ó–∞–ø—É—Å–∫ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
async fn start_revolutionary_web_server(port: u16, app_state: RevolutionaryAppState, static_dir: PathBuf) -> Result<()> {
    // CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    let cors = warp::cors()
        .allow_any_origin()
        .allow_headers(vec!["content-type"])
        .allow_methods(vec!["GET", "POST", "OPTIONS"]);
    
    // === –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï API ROUTES ===
    let api = warp::path("api").and(
        // GET /api/v2/hierarchy - –Ω–æ–≤–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è —á–µ—Ä–µ–∑ CentralTypeSystem
        warp::path("v2")
            .and(warp::path("hierarchy"))
            .and(warp::get())
            .and(with_revolutionary_state(app_state.clone()))
            .and_then(handle_hierarchy_revolutionary)
        .or(
            // POST /api/v2/search - –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ CentralTypeSystem
            warp::path("v2")
                .and(warp::path("search"))
                .and(warp::post())
                .and(warp::body::json())
                .and(with_revolutionary_state(app_state.clone()))
                .and_then(handle_search_revolutionary)
        )
        .or(
            // GET /api/v2/types/{name} - –¥–µ—Ç–∞–ª–∏ —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ CentralTypeSystem
            warp::path("v2")
                .and(warp::path("types"))
                .and(warp::path::param::<String>())
                .and(warp::get())
                .and(with_revolutionary_state(app_state.clone()))
                .and_then(handle_type_details_revolutionary)
        )
        .or(
            // GET /api/v2/health - –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
            warp::path("v2")
                .and(warp::path("health"))
                .and(warp::get())
                .and(with_revolutionary_state(app_state.clone()))
                .and_then(handle_health_check_revolutionary)
        )
        .or(
            // GET /api/v2/metrics - –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            warp::path("v2")
                .and(warp::path("metrics"))
                .and(warp::get())
                .and(with_revolutionary_state(app_state.clone()))
                .and_then(handle_metrics_revolutionary)
        )
    ).with(cors);
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    let static_files = warp::fs::dir(static_dir);
    
    // –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    let index = warp::path::end()
        .and(warp::get())
        .and(with_revolutionary_state(app_state.clone()))
        .and_then(handle_index_revolutionary);
    
    // –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏
    let hierarchy_page = warp::path("hierarchy")
        .and(warp::get())
        .and(with_revolutionary_state(app_state.clone()))
        .and_then(handle_hierarchy_page_revolutionary);
    
    let routes = api.or(static_files).or(hierarchy_page).or(index);
    
    println!("üåê –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{}", port);
    println!("üìñ –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:{}/hierarchy –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç–∏–ø–æ–≤", port);
    println!("üîç API v2: http://localhost:{}/api/v2/hierarchy", port);
    
    warp::serve(routes)
        .run(([127, 0, 0, 1], port))
        .await;
    
    Ok(())
}

/// Helper –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
fn with_revolutionary_state(
    state: RevolutionaryAppState,
) -> impl Filter<Extract = (RevolutionaryAppState,), Error = std::convert::Infallible> + Clone {
    warp::any().map(move || state.clone())
}

// === –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï HANDLERS ===

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —á–µ—Ä–µ–∑ CentralTypeSystem
async fn handle_hierarchy_revolutionary(state: RevolutionaryAppState) -> Result<impl warp::Reply, warp::Rejection> {
    println!("üå≥ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–µ—Ä–∞—Ä—Ö–∏–∏ —á–µ—Ä–µ–∑ CentralTypeSystem");
    
    match state.central_system.web_interface().handle_hierarchy_request().await {
        Ok(response) => {
            println!("‚úÖ –ò–µ—Ä–∞—Ä—Ö–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {} –∫–∞—Ç–µ–≥–æ—Ä–∏–π", response.categories.len());
            Ok(warp::reply::json(&response))
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏: {}", e);
            let error_response = ErrorResponse {
                error: e.to_string(),
                code: 500,
            };
            Ok(warp::reply::json(&error_response))
        }
    }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ CentralTypeSystem
async fn handle_search_revolutionary(
    request: WebSearchRequest,
    state: RevolutionaryAppState,
) -> Result<impl warp::Reply, warp::Rejection> {
    println!("üîç –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: '{}'", request.query);
    
    match state.central_system.web_interface().handle_search_request(request).await {
        Ok(response) => {
            println!("‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", response.results.len());
            Ok(warp::reply::json(&response))
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {}", e);
            let error_response = ErrorResponse {
                error: e.to_string(),
                code: 500,
            };
            Ok(warp::reply::json(&error_response))
        }
    }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ CentralTypeSystem
async fn handle_type_details_revolutionary(
    type_name: String,
    state: RevolutionaryAppState,
) -> Result<impl warp::Reply, warp::Rejection> {
    println!("üìã –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π —Ç–∏–ø–∞: '{}'", type_name);
    
    match state.central_system.web_interface().handle_type_details_request(&type_name).await {
        Ok(response) => {
            println!("‚úÖ –î–µ—Ç–∞–ª–∏ —Ç–∏–ø–∞ –ø–æ–ª—É—á–µ–Ω—ã: {} –º–µ—Ç–æ–¥–æ–≤, {} —Å–≤–æ–π—Å—Ç–≤", 
                    response.methods.len(), response.properties.len());
            Ok(warp::reply::json(&response))
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {}", e);
            let error_response = ErrorResponse {
                error: e.to_string(),
                code: 404,
            };
            Ok(warp::reply::json(&error_response))
        }
    }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
async fn handle_health_check_revolutionary(state: RevolutionaryAppState) -> Result<impl warp::Reply, warp::Rejection> {
    println!("üè• –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã");
    
    let health = state.central_system.health_check().await;
    println!("‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", health.components.len());
    
    Ok(warp::reply::json(&health))
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã
async fn handle_metrics_revolutionary(state: RevolutionaryAppState) -> Result<impl warp::Reply, warp::Rejection> {
    println!("üìä –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã");
    
    let metrics = state.central_system.get_system_metrics().await;
    
    Ok(warp::reply::json(&metrics))
}

/// –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
async fn handle_index_revolutionary(state: RevolutionaryAppState) -> Result<impl warp::Reply, warp::Rejection> {
    println!("üè† –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
    
    let metrics = state.central_system.get_system_metrics().await;
    let health = state.central_system.health_check().await;
    
    let html = generate_revolutionary_index_html(&metrics, &health);
    Ok(warp::reply::html(html))
}

/// –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏
async fn handle_hierarchy_page_revolutionary(state: RevolutionaryAppState) -> Result<impl warp::Reply, warp::Rejection> {
    println!("üå≥ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏");
    
    match state.central_system.web_interface().handle_hierarchy_request().await {
        Ok(hierarchy_data) => {
            let html = generate_revolutionary_hierarchy_html(&hierarchy_data);
            Ok(warp::reply::html(html))
        }
        Err(e) => {
            let error_html = format!(
                "<html><body><h1>‚ùå –û—à–∏–±–∫–∞</h1><p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é: {}</p></body></html>", 
                e
            );
            Ok(warp::reply::html(error_html))
        }
    }
}

/// –û—à–∏–±–∫–∞ API
#[derive(Serialize)]
struct ErrorResponse {
    error: String,
    code: u16,
}

/// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
fn generate_revolutionary_index_html(metrics: &bsl_gradual_types::ideal::system::SystemMetrics, health: &bsl_gradual_types::ideal::system::HealthStatus) -> String {
    format!(r#"
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π BSL Type Browser</title>
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; }}
        body {{ 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: #1e1e1e; 
            color: #d4d4d4; 
            line-height: 1.6;
        }}
        .container {{ max-width: 1200px; margin: 0 auto; padding: 20px; }}
        .header {{ text-align: center; margin-bottom: 40px; }}
        .header h1 {{ color: #569cd6; font-size: 2.5em; margin-bottom: 10px; }}
        .header p {{ color: #9cdcfe; font-size: 1.2em; }}
        
        .revolution-banner {{
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
            text-align: center;
        }}
        
        .metrics-grid {{ 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 20px; 
            margin-bottom: 40px; 
        }}
        .metric-card {{ 
            background: #2d2d30; 
            padding: 20px; 
            border-radius: 10px; 
            border-left: 4px solid #4ec9b0;
            text-align: center; 
        }}
        .metric-value {{ color: #4fc1ff; font-size: 2em; font-weight: bold; }}
        .metric-label {{ color: #9cdcfe; margin-top: 5px; }}
        
        .health-status {{
            background: {};
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: bold;
        }}
        
        .navigation {{
            display: flex;
            gap: 20px;
            margin-top: 30px;
            justify-content: center;
        }}
        .nav-button {{
            background: #0e639c;
            color: white;
            padding: 15px 30px;
            border-radius: 8px;
            text-decoration: none;
            font-weight: bold;
            transition: background 0.3s;
        }}
        .nav-button:hover {{ background: #1177bb; }}
        
        .architecture-info {{
            background: #2d2d30;
            padding: 20px;
            border-radius: 10px;
            margin-top: 30px;
            border-left: 4px solid #569cd6;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π BSL Type Browser</h1>
            <p>–ò–¥–µ–∞–ª—å–Ω–∞—è —Å–ª–æ–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ</p>
        </div>
        
        <div class="revolution-banner">
            <h2>üèóÔ∏è –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ê–ö–¢–ò–í–ù–ê!</h2>
            <p>Data ‚Üí Domain ‚Üí Application ‚Üí Presentation —Å–ª–æ–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –µ–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</p>
        </div>
        
        <div class="health-status">
            üè• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {} (–æ—Ü–µ–Ω–∫–∞: {:.1}/10)
        </div>
        
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-value">{}</div>
                <div class="metric-label">–í—Å–µ–≥–æ —Ç–∏–ø–æ–≤</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{}</div>
                <div class="metric-label">–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{}</div>
                <div class="metric-label">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{:.1} MB</div>
                <div class="metric-label">–ü–∞–º—è—Ç—å</div>
            </div>
        </div>
        
        <div class="navigation">
            <a href="/hierarchy" class="nav-button">üå≥ –ò–µ—Ä–∞—Ä—Ö–∏—è —Ç–∏–ø–æ–≤</a>
            <a href="/api/v2/hierarchy" class="nav-button">üìä API v2</a>
            <a href="/api/v2/health" class="nav-button">üè• –ó–¥–æ—Ä–æ–≤—å–µ</a>
            <a href="/api/v2/metrics" class="nav-button">üìà –ú–µ—Ç—Ä–∏–∫–∏</a>
        </div>
        
        <div class="architecture-info">
            <h3>üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</h3>
            <ul>
                <li>‚úÖ <strong>Single Source of Truth</strong> - –≤—Å–µ —Ç–∏–ø—ã –≤ –µ–¥–∏–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏</li>
                <li>‚úÖ <strong>–°–ª–æ–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</strong> - —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏</li>
                <li>‚úÖ <strong>TreeSitter –ø–∞—Ä—Å–µ—Ä</strong> - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π BSL –ø–∞—Ä—Å–∏–Ω–≥</li>
                <li>‚úÖ <strong>Dependency Inversion</strong> - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π</li>
                <li>‚úÖ <strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</strong> - –µ–¥–∏–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π</li>
                <li>‚úÖ <strong>–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å</strong> - –∫–∞–∂–¥—ã–π —Å–ª–æ–π —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ</li>
            </ul>
        </div>
    </div>
</body>
</html>
    "#,
        // –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
        match health.status.as_str() {
            "healthy" => "#4CAF50",
            "degraded" => "#FF9800", 
            "unhealthy" => "#F44336",
            _ => "#9E9E9E"
        },
        // –°—Ç–∞—Ç—É—Å –∏ –æ—Ü–µ–Ω–∫–∞
        health.status.to_uppercase(),
        health.overall_score * 10.0,
        // –ú–µ—Ç—Ä–∏–∫–∏
        metrics.total_types,
        metrics.platform_types,
        metrics.configuration_types,
        metrics.cache_memory_mb
    )
}

/// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏
fn generate_revolutionary_hierarchy_html(hierarchy: &WebHierarchyResponse) -> String {
    let mut html = String::new();
    
    html.push_str(r#"
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üå≥ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è —Ç–∏–ø–æ–≤ BSL</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: #1e1e1e; 
            color: #d4d4d4; 
            line-height: 1.6;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 40px; }
        .header h1 { color: #569cd6; font-size: 2.5em; margin-bottom: 10px; }
        
        .revolution-badge {
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            color: white;
            padding: 10px 20px;
            border-radius: 20px;
            display: inline-block;
            margin-bottom: 20px;
            font-weight: bold;
        }
        
        .stats { 
            background: #2d2d30; 
            padding: 20px; 
            border-radius: 10px; 
            margin-bottom: 30px;
            border-left: 4px solid #4ec9b0;
        }
        .stats h3 { color: #4ec9b0; margin-bottom: 15px; }
        .stats-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); 
            gap: 15px; 
        }
        .stat-item { text-align: center; }
        .stat-value { color: #4fc1ff; font-size: 1.5em; font-weight: bold; }
        .stat-label { color: #9cdcfe; font-size: 0.9em; }
        
        .categories { margin-top: 30px; }
        .category-item { 
            background: #2d2d30; 
            border: 1px solid #3c3c3c; 
            border-radius: 10px; 
            margin-bottom: 20px; 
            padding: 20px;
            transition: all 0.3s ease;
        }
        .category-item:hover { 
            border-color: #569cd6; 
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(86, 156, 214, 0.3);
        }
        .category-title { color: #569cd6; font-size: 1.3em; margin-bottom: 10px; }
        .category-description { color: #d4d4d4; margin-bottom: 15px; }
        .category-stats { 
            display: flex; 
            gap: 20px; 
            color: #9cdcfe; 
            font-size: 0.9em; 
        }
        
        .back-link {
            display: inline-block;
            background: #0e639c;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            text-decoration: none;
            margin-bottom: 20px;
        }
        .back-link:hover { background: #1177bb; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="revolution-badge">üöÄ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê</div>
            <h1>üå≥ –ò–µ—Ä–∞—Ä—Ö–∏—è —Ç–∏–ø–æ–≤ BSL</h1>
            <p>–ß–µ—Ä–µ–∑ CentralTypeSystem —Å –∏–¥–µ–∞–ª—å–Ω–æ–π —Å–ª–æ–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π</p>
        </div>
        
        <a href="/" class="back-link">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
        
        <div class="stats">
            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</h3>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value">{}</div>
                    <div class="stat-label">–ö–∞—Ç–µ–≥–æ—Ä–∏–π</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ —Ç–∏–ø–æ–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{}</div>
                    <div class="stat-label">–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{}</div>
                    <div class="stat-label">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö</div>
                </div>
            </div>
        
        <div class="categories">"#,
        categories_count,
        total_types,  
        platform_types,
        configuration_types
        </div>
        
        <div class="categories">
    "#);
    
    let categories_count = hierarchy.categories.len();
    let total_types = hierarchy.total_types;
    let platform_types = hierarchy.statistics.platform_types;
    let configuration_types = hierarchy.statistics.configuration_types;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (i, category) in hierarchy.categories.iter().enumerate() {
        html.push_str(&format!(
            r#"
            <div class="category-item">
                <div class="category-title">üìÇ {}. {}</div>
                <div class="category-description">{}</div>
                <div class="category-stats">
                    <span>üìä –¢–∏–ø–æ–≤: {}</span>
                    <span>üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}</span>
                    <span>üîó <a href="{}" style="color: #4fc1ff;">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a></span>
                </div>
            </div>
            "#,
            i + 1,
            category.name,
            category.description,
            category.types_count,
            category.subcategories_count,
            category.url
        ));
    }
    
    html.push_str("</div></div></body></html>");
    
    html
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[tokio::test]
    async fn test_revolutionary_web_server_creation() {
        let config = CentralSystemConfig::default();
        let central_system = Arc::new(CentralTypeSystem::new(config));
        
        let app_state = RevolutionaryAppState {
            central_system: central_system.clone(),
        };
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        let _web_interface = app_state.central_system.web_interface();
    }
}