//! –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ConfigurationGuidedParser —Å PlatformTypeResolver

use anyhow::Result;
use bsl_gradual_types::core::platform_resolver::PlatformTypeResolver;

fn main() -> Result<()> {
    println!("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ConfigurationGuidedParser");
    
    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ resolver'–∞ —Å –æ–±—ã—á–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º (fallback)
    println!("\n=== –¢–µ—Å—Ç 1: –û–±—ã—á–Ω—ã–π resolver ===");
    let normal_resolver = PlatformTypeResolver::new();
    println!("‚úÖ –û–±—ã—á–Ω—ã–π resolver —Å–æ–∑–¥–∞–Ω, platform globals: {}", normal_resolver.get_platform_globals_count());
    
    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å guided resolver —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—É—Ç–µ–º
    println!("\n=== –¢–µ—Å—Ç 2: Guided resolver —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—É—Ç–µ–º ===");
    let fake_path = "non_existent_path";
    match PlatformTypeResolver::with_guided_config(fake_path) {
        Ok(_) => println!("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å resolver —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—É—Ç–µ–º"),
        Err(e) => println!("‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {}", e),
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è platform globals
    println!("\n=== –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ platform globals ===");
    let resolver = PlatformTypeResolver::new();
    
    let globals_to_check = vec![
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏", "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è",
        "Catalogs", "Documents", "Enums"
    ];
    
    for global in &globals_to_check {
        if resolver.has_platform_global(global) {
            println!("‚úÖ –ù–∞–π–¥–µ–Ω platform global: {}", global);
        } else {
            println!("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω platform global: {}", global);
        }
    }
    
    println!("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
    Ok(())
}