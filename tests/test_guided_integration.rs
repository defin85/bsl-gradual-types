//! Unit-—Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ConfigurationGuidedParser —Å PlatformTypeResolver

#[cfg(test)]
mod tests {
    use bsl_gradual_types::adapters::config_parser_guided_discovery::ConfigurationGuidedParser;

    #[test]
    fn test_configuration_guided_parser_creation() {
        println!("üöÄ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è ConfigurationGuidedParser");

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø—É—Ç–µ–º
        let guided_parser = ConfigurationGuidedParser::new("test_path");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–ª—Å—è
        println!("‚úÖ ConfigurationGuidedParser —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");

        // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Debug trait
        let debug_output = format!("{:?}", guided_parser);
        assert!(debug_output.contains("ConfigurationGuidedParser"));
        println!("‚úÖ Debug trait —Ä–∞–±–æ—Ç–∞–µ—Ç: {}", debug_output.len() > 0);
    }

    #[test]
    fn test_integration_types_compilation() {
        println!("üöÄ –¢–µ—Å—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Ç–∏–ø–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∏–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        use bsl_gradual_types::core::types::{
            Certainty, MetadataKind, ResolutionMetadata, ResolutionResult, ResolutionSource,
            TypeResolution,
        };

        // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
        let metadata = ResolutionMetadata {
            file: Some("test.bsl".to_string()),
            line: Some(1),
            column: Some(1),
            notes: vec!["test note".to_string()],
        };

        let resolution = TypeResolution {
            certainty: Certainty::Unknown,
            result: ResolutionResult::Dynamic,
            source: ResolutionSource::Static,
            metadata,
            active_facet: None,
            available_facets: vec![],
        };

        println!("‚úÖ TypeResolution —Å–æ–∑–¥–∞–Ω: {:?}", resolution.certainty);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ MetadataKind
        let kind = MetadataKind::Catalog;
        println!("‚úÖ MetadataKind —Å–æ–∑–¥–∞–Ω: {:?}", kind);

        assert!(true);
    }

    #[test]
    fn test_guided_parser_error_handling() {
        println!("üöÄ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ConfigurationGuidedParser");

        let mut guided_parser = ConfigurationGuidedParser::new("non_existent_path");

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—É—Ç–∏ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
        let result = guided_parser.parse_with_configuration_guide();

        match result {
            Ok(_) => {
                println!("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å");
                assert!(false, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—É—Ç–∏");
            }
            Err(e) => {
                println!("‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {}", e);
                assert!(true);
            }
        }
    }
}
