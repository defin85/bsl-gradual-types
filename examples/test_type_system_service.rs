//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ TypeSystemService

use anyhow::Result;
use bsl_gradual_types::core::type_system_service::{
    InitializationStage, TypeSystemService, TypeSystemServiceConfig, TypeSystemServiceFactory,
};

#[tokio::main]
async fn main() -> Result<()> {
    println!("üè¢ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ TypeSystemService");

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    println!("\n=== üîß –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ ===");
    let service = TypeSystemService::with_defaults();

    let initial_state = service.get_initialization_state().await;
    println!("–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {:?}", initial_state.current_stage);
    assert!(!initial_state.is_initialized);

    // –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    println!("\n=== ‚ö° –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ ===");
    match service.initialize().await {
        Ok(_) => {
            let final_state = service.get_initialization_state().await;
            println!(
                "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {:?}",
                final_state.current_stage
            );
            println!("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {}%", final_state.progress);
            println!("üìù –°—Ç–∞—Ç—É—Å: {}", final_state.status_message);

            if let Some(start_time) = final_state.start_time {
                println!(
                    "‚è±Ô∏è –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {:.2}s",
                    start_time.elapsed().as_secs_f64()
                );
            }
        }
        Err(e) => {
            println!("‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {}", e);
            println!("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏");
        }
    }

    // –¢–µ—Å—Ç 3: LSP API
    println!("\n=== üì° –¢–µ—Å—Ç 3: LSP API ===");
    let expressions = vec![
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã",
        "–î–æ–∫—É–º–µ–Ω—Ç—ã.–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞",
        "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π",
        "–°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π",
    ];

    for expression in expressions {
        let resolution = service.resolve_expression(expression).await;
        println!("üîç '{}' ‚Üí {:?}", expression, resolution.certainty);

        let completions = service.get_completions(expression).await;
        println!(
            "üí° –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è '{}': {} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            expression,
            completions.len()
        );
    }

    // –¢–µ—Å—Ç 4: –í–µ–± API
    println!("\n=== üåê –¢–µ—Å—Ç 4: –í–µ–± API ===");
    let search_queries = vec!["–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏", "HTTP"];

    for query in search_queries {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        use bsl_gradual_types::documentation::AdvancedSearchQuery;
        let search_query = AdvancedSearchQuery {
            query: query.to_string(),
            ..Default::default()
        };

        match service.search(search_query).await {
            Ok(results) => {
                println!(
                    "üîç –ü–æ–∏—Å–∫ '{}': {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {}ms",
                    query, results.total_count, results.search_time_ms
                );
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{}': {}", query, e);
            }
        }

        // –¢–µ—Å—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        match service.get_suggestions(query).await {
            Ok(suggestions) => {
                println!(
                    "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è '{}': {:?}",
                    query,
                    suggestions.iter().take(3).collect::<Vec<_>>()
                );
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π '{}': {}", query, e);
            }
        }
    }

    // –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    println!("\n=== üìä –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===");
    let stats = service.get_usage_stats().await;
    println!("LSP –∑–∞–ø—Ä–æ—Å—ã: {}", stats.lsp_requests);
    println!("–í–µ–± –∑–∞–ø—Ä–æ—Å—ã: {}", stats.web_requests);
    println!("–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {}", stats.search_requests);
    println!("–ó–∞–ø—Ä–æ—Å—ã –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {}", stats.completion_requests);

    match service.get_performance_stats().await {
        Ok(perf_stats) => {
            println!("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", perf_stats.total_requests);
            println!("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {:.2} MB", perf_stats.memory_usage_mb);
            println!("Cache hit ratio: {:.2}", perf_stats.cache_hit_ratio);
        }
        Err(e) => {
            println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {}", e);
        }
    }

    // –¢–µ—Å—Ç 6: Factory –º–µ—Ç–æ–¥—ã
    println!("\n=== üè≠ –¢–µ—Å—Ç 6: Factory –º–µ—Ç–æ–¥—ã ===");

    println!("–¢–µ—Å—Ç–∏—Ä—É–µ–º TypeSystemServiceFactory::create_for_development()");
    match TypeSystemServiceFactory::create_for_development().await {
        Ok(dev_service) => {
            println!("‚úÖ Development —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω");
            let dev_stats = dev_service.get_usage_stats().await;
            println!("Development —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
        }
        Err(e) => {
            println!("‚ö†Ô∏è Development —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {}", e);
        }
    }

    println!("\nüéâ TypeSystemService –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!");
    println!("üè¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ shared service –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");

    Ok(())
}
