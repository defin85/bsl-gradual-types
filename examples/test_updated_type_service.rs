//! –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ TypeSystemService v2.0 –Ω–∞ –±–∞–∑–µ UnifiedTypeSystem

use anyhow::Result;
use bsl_gradual_types::core::type_system_service::{
    TypeSystemService, TypeSystemServiceConfig, TypeSystemServiceFactory,
};

#[tokio::main]
async fn main() -> Result<()> {
    println!("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TypeSystemService v2.0 –Ω–∞ –±–∞–∑–µ UnifiedTypeSystem");

    // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    println!("\n=== üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ TypeSystemService v2.0 ===");
    let service = TypeSystemService::with_defaults();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    let initial_state = service.get_initialization_state().await;
    println!("–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {:?}", initial_state.current_stage);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    println!("\n=== ‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å UnifiedTypeSystem ===");
    match service.initialize().await {
        Ok(_) => {
            let final_state = service.get_initialization_state().await;
            println!(
                "‚úÖ TypeSystemService v2.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {:?}",
                final_state.current_stage
            );
            println!("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {}%", final_state.progress);
            println!("üìù –°—Ç–∞—Ç—É—Å: {}", final_state.status_message);
        }
        Err(e) => {
            println!("‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {}", e);
        }
    }

    // –¢–µ—Å—Ç 1: LSP API (–Ω–∞ –±–∞–∑–µ UnifiedTypeSystem)
    println!("\n=== üì° –¢–µ—Å—Ç 1: LSP API —á–µ—Ä–µ–∑ UnifiedTypeSystem ===");
    let test_expressions = vec![
        "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π",
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã",
        "–°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π",
        "–î–æ–∫—É–º–µ–Ω—Ç—ã.–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞",
        "HTTP–ó–∞–ø—Ä–æ—Å",
    ];

    for expression in &test_expressions {
        // –†–µ–∑–æ–ª—é—Ü–∏—è —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        let resolution = service.resolve_expression(expression).await;
        println!(
            "üîç '{}' ‚Üí {:?} (–∏—Å—Ç–æ—á–Ω–∏–∫: {:?})",
            expression, resolution.certainty, resolution.source
        );

        // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        let completions = service.get_completions(expression).await;
        println!("üí° –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", completions.len());

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        for (i, completion) in completions.iter().take(3).enumerate() {
            println!(
                "    {}. {} ({:?})",
                i + 1,
                completion.label,
                completion.kind
            );
        }
    }

    // –¢–µ—Å—Ç 2: –í–µ–± API (–Ω–∞ –±–∞–∑–µ UnifiedTypeSystem)
    println!("\n=== üåê –¢–µ—Å—Ç 2: –í–µ–± API —á–µ—Ä–µ–∑ UnifiedTypeSystem ===");

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let display_types = service.get_all_types_for_display().await;
    println!("üé® –¢–∏–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", display_types.len());

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ç–∏–ø—ã
    for (i, display_type) in display_types.iter().take(5).enumerate() {
        println!(
            "  {}. {} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:?})",
            i + 1,
            display_type.name,
            display_type.category,
            display_type.certainty
        );
    }

    // –ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let search_queries = vec!["–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏", "HTTP"];
    for query in search_queries {
        let search_results = service.search_types_for_display(query).await;
        println!(
            "üîç –í–µ–± –ø–æ–∏—Å–∫ '{}': {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            query,
            search_results.len()
        );

        if let Some(first_result) = search_results.first() {
            println!(
                "    –ü–µ—Ä–≤—ã–π: {} - {}",
                first_result.name, first_result.description
            );
        }
    }

    // –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    println!("\n=== üìñ –¢–µ—Å—Ç 3: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–∏–ø–æ–≤ ===");
    let type_ids = vec!["–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "–°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π", "HTTP–ó–∞–ø—Ä–æ—Å"];

    for type_id in type_ids {
        if let Some(details) = service.get_type_details(type_id).await {
            println!("üìã –î–µ—Ç–∞–ª–∏ '{}':", details.name);
            println!("  - –ú–µ—Ç–æ–¥—ã: {}", details.methods.len());
            println!("  - –°–≤–æ–π—Å—Ç–≤–∞: {}", details.properties.len());
            println!("  - –§–∞—Å–µ—Ç—ã: {:?}", details.facets);
            println!("  - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:?}", details.full_resolution.certainty);
        } else {
            println!("‚ùå –î–µ—Ç–∞–ª–∏ –¥–ª—è '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", type_id);
        }
    }

    // –¢–µ—Å—Ç 4: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    println!("\n=== üìä –¢–µ—Å—Ç 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===");

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TypeSystemService
    let service_stats = service.get_usage_stats().await;
    println!("üìà TypeSystemService —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("  - LSP –∑–∞–ø—Ä–æ—Å—ã: {}", service_stats.lsp_requests);
    println!("  - –í–µ–± –∑–∞–ø—Ä–æ—Å—ã: {}", service_stats.web_requests);
    println!("  - –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {}", service_stats.search_requests);
    println!("  - –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {}", service_stats.completion_requests);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ UnifiedTypeSystem
    let unified_stats = service.get_unified_system_stats().await;
    println!("üèóÔ∏è UnifiedTypeSystem —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!(
        "  - –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã: {}",
        unified_stats.platform_types_count
    );
    println!(
        "  - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã: {}",
        unified_stats.configuration_types_count
    );
    println!(
        "  - –í—Å–µ–≥–æ TypeResolution: {}",
        unified_stats.total_resolutions
    );
    println!(
        "  - –ó–∞–ø—Ä–æ—Å—ã —Ä–µ–∑–æ–ª—é—Ü–∏–∏: {}",
        unified_stats.resolution_requests
    );

    if unified_stats.cache_hits + unified_stats.cache_misses > 0 {
        let hit_ratio = unified_stats.cache_hits as f64
            / (unified_stats.cache_hits + unified_stats.cache_misses) as f64;
        println!("  - Cache hit ratio: {:.2}", hit_ratio);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    match service.get_performance_stats().await {
        Ok(perf_stats) => {
            println!("‚ö° Performance —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
            println!("  - –û–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã: {}", perf_stats.total_requests);
            println!("  - Cache ratio: {:.2}", perf_stats.cache_hit_ratio);
            println!("  - –ü–∞–º—è—Ç—å: {:.2} MB", perf_stats.memory_usage_mb);
        }
        Err(e) => {
            println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {}", e);
        }
    }

    println!("\nüéâ TypeSystemService v2.0 –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!");
    println!("üèÜ –ï–¥–∏–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å TypeResolution –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏—Å—Ç–∏–Ω—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!");

    Ok(())
}
