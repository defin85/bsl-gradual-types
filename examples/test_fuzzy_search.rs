//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ (Fuzzy Search)

use anyhow::Result;
use bsl_gradual_types::documentation::search::fuzzy::{FuzzyMatcher, FuzzyMatchType};

fn main() -> Result<()> {
    println!("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ (Fuzzy Search) –¥–ª—è BSL");
    
    let mut fuzzy_matcher = FuzzyMatcher::default_for_bsl();
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤—ã—Ö BSL —Ç–µ—Ä–º–∏–Ω–æ–≤
    let bsl_terms = vec![
        "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π".to_string(),
        "–°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π".to_string(), 
        "–î–µ—Ä–µ–≤–æ–ó–Ω–∞—á–µ–Ω–∏–π".to_string(),
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏".to_string(),
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–ú–µ–Ω–µ–¥–∂–µ—Ä".to_string(),
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–û–±—ä–µ–∫—Ç".to_string(),
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–°—Å—ã–ª–∫–∞".to_string(),
        "–î–æ–∫—É–º–µ–Ω—Ç—ã".to_string(),
        "–î–æ–∫—É–º–µ–Ω—Ç–ú–µ–Ω–µ–¥–∂–µ—Ä".to_string(),
        "–î–æ–∫—É–º–µ–Ω—Ç–û–±—ä–µ–∫—Ç".to_string(),
        "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è".to_string(),
        "–†–µ–≥–∏—Å—Ç—Ä—ã–°–≤–µ–¥–µ–Ω–∏–π".to_string(),
        "–†–µ–≥–∏—Å—Ç—Ä—ã–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è".to_string(),
        "–û–±—Ä–∞–±–æ—Ç–∫–∞–û–±—ä–µ–∫—Ç".to_string(),
        "–û—Ç—á–µ—Ç–û–±—ä–µ–∫—Ç".to_string(),
        "HTTP–ó–∞–ø—Ä–æ—Å".to_string(),
        "HTTP–û—Ç–≤–µ—Ç".to_string(),
        "XML–ß—Ç–µ–Ω–∏–µ".to_string(),
        "XML–ó–∞–ø–∏—Å—å".to_string(),
        "JSON–ß—Ç–µ–Ω–∏–µ".to_string(),
        "JSON–ó–∞–ø–∏—Å—å".to_string(),
    ];
    
    println!("üìö –ë–∞–∑–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤: {} BSL —Ç–∏–ø–æ–≤", bsl_terms.len());
    
    // –¢–µ—Å—Ç 1: –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    println!("\n=== –¢–µ—Å—Ç 1: –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ===");
    test_search(&mut fuzzy_matcher, "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", &bsl_terms);
    
    // –¢–µ—Å—Ç 2: –û–ø–µ—á–∞—Ç–∫–∏
    println!("\n=== –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏ ===");
    test_search(&mut fuzzy_matcher, "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–∏", &bsl_terms); // –û—à–∏–±–∫–∞ –≤ –æ–∫–æ–Ω—á–∞–Ω–∏–∏
    test_search(&mut fuzzy_matcher, "–°–ø—Ä–∞–≤–æ—á–Ω–∫–∏", &bsl_terms);      // –ü—Ä–æ–ø—É—â–µ–Ω–∞ –±—É–∫–≤–∞
    test_search(&mut fuzzy_matcher, "HTTP–ó–æ–ø—Ä–æ—Å", &bsl_terms);      // –ó–∞–º–µ–Ω–∞ –±—É–∫–≤—ã
    
    // –¢–µ—Å—Ç 3: –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    println!("\n=== –¢–µ—Å—Ç 3: –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ===");
    test_search(&mut fuzzy_matcher, "–¢–∞–±–ª–∏—Ü–∞", &bsl_terms);
    test_search(&mut fuzzy_matcher, "–ó–Ω–∞—á–µ–Ω–∏–π", &bsl_terms);
    test_search(&mut fuzzy_matcher, "HTTP", &bsl_terms);
    
    // –¢–µ—Å—Ç 4: –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏
    println!("\n=== –¢–µ—Å—Ç 4: –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏ ===");
    test_search(&mut fuzzy_matcher, "–¢–∞–±–ª–∏—á–∫–∞–ó–Ω–∞—á–µ–Ω–∏–π", &bsl_terms); // –õ–∏—à–Ω—è—è –±—É–∫–≤–∞
    test_search(&mut fuzzy_matcher, "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–û–±—ä–µ–∫—Ç", &bsl_terms);  // –°–æ—Å—Ç–∞–≤–Ω–æ–µ —Å–ª–æ–≤–æ
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
    println!("\n=== üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ ===");
    let cache_stats = fuzzy_matcher.cache_stats();
    println!("–ó–∞–ø–∏—Å–µ–π –≤ –∫–µ—à–µ: {}", cache_stats.entries_count);
    println!("–ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏: {} –±–∞–π—Ç", cache_stats.memory_estimate_bytes);
    
    println!("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è fuzzy –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    Ok(())
}

fn test_search(fuzzy_matcher: &mut FuzzyMatcher, query: &str, terms: &[String]) {
    println!("–ü–æ–∏—Å–∫: '{}'", query);
    
    let matches = fuzzy_matcher.find_matches(query, terms);
    
    if matches.is_empty() {
        println!("  ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        return;
    }
    
    println!("  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:", matches.len());
    
    for (i, fuzzy_match) in matches.iter().take(3).enumerate() {
        let match_icon = match fuzzy_match.match_type {
            FuzzyMatchType::Exact => "üéØ",
            FuzzyMatchType::Prefix => "üìç",
            FuzzyMatchType::Contains => "üîç",
            FuzzyMatchType::Fuzzy => "üåü",
        };
        
        println!("    {}. {} {} (—Å—Ö–æ–∂–µ—Å—Ç—å: {:.2}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {})", 
            i + 1, 
            match_icon,
            fuzzy_match.term,
            fuzzy_match.similarity,
            fuzzy_match.distance
        );
    }
}