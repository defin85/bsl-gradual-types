//! System Layer - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ü–µ–ª–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
//!
//! CentralTypeSystem –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Å–ª–æ–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
//! –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —Ç–∏–ø–æ–≤ BSL

use anyhow::Result;
use serde::Serialize;
use std::sync::Arc;
use tracing::{info, warn};

use super::application::{AnalysisTypeService, LspTypeService, WebTypeService};
use super::data::{InMemoryTypeRepository, ParseMetadata, RawTypeData, TypeRepository, TypeSource};
use super::domain::{TypeContext, TypeResolutionService};
use super::presentation::{CliInterface, LspInterface, WebInterface};
use crate::data::loaders::config_parser_guided_discovery::ConfigurationGuidedParser;
use crate::domain::types::TypeResolution;

/// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ BSL
///
/// –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ª–æ–∏ —Ü–µ–ª–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç
/// –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
pub struct CentralTypeSystem {
    // === DATA LAYER ===
    /// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ (–µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã)
    repository: Arc<dyn TypeRepository>,

    // === DOMAIN LAYER ===
    /// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–∏–ø–æ–≤
    resolution_service: Arc<TypeResolutionService>,

    // === APPLICATION LAYER ===
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è LSP (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
    lsp_service: Arc<LspTypeService>,

    /// –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–±–æ–≥–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ)
    web_service: Arc<WebTypeService>,

    /// –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
    analysis_service: Arc<AnalysisTypeService>,

    // === PRESENTATION LAYER ===
    /// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è LSP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    lsp_interface: LspInterface,

    /// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–µ–± API
    web_interface: WebInterface,

    /// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è CLI
    cli_interface: CliInterface,

    // === INFRASTRUCTURE ===
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    config: CentralSystemConfig,

    /// –ú–µ—Ç—Ä–∏–∫–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
    system_metrics: Arc<tokio::sync::RwLock<SystemMetrics>>,

    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    initialization_state: Arc<tokio::sync::RwLock<InitializationState>>,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤
#[derive(Debug, Clone)]
pub struct CentralSystemConfig {
    /// –ü—É—Ç—å –∫ HTML —Å–ø—Ä–∞–≤–∫–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    pub html_path: String,

    /// –ü—É—Ç—å –∫ XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    pub configuration_path: Option<String>,

    /// –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    pub verbose_logging: bool,

    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    pub cache_settings: CacheSettings,

    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub performance_settings: PerformanceSettings,
}

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
#[derive(Debug, Clone)]
pub struct CacheSettings {
    pub enable_repository_cache: bool,
    pub enable_resolution_cache: bool,
    pub enable_lsp_cache: bool,
    pub cache_ttl_seconds: u64,
    pub max_cache_size: usize,
}

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
#[derive(Debug, Clone)]
pub struct PerformanceSettings {
    pub enable_parallel_parsing: bool,
    pub max_parser_threads: usize,
    pub lsp_response_timeout_ms: u64,
    pub web_request_timeout_ms: u64,
}

/// –ú–µ—Ç—Ä–∏–∫–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
#[derive(Debug, Clone, Default, Serialize)]
pub struct SystemMetrics {
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    pub total_types: usize,
    pub platform_types: usize,
    pub configuration_types: usize,
    pub user_defined_types: usize,

    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub average_lsp_response_ms: f64,
    pub average_web_response_ms: f64,
    pub total_requests: u64,

    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    pub cache_hit_rate: f64,
    pub cache_memory_mb: f64,

    /// –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    pub uptime_seconds: u64,
    pub last_updated: Option<std::time::SystemTime>,
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
#[derive(Debug, Clone, Default)]
pub struct InitializationState {
    pub is_initializing: bool,
    pub progress_percent: u8,
    pub current_operation: String,
    pub errors: Vec<String>,

    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ—ë–≤
    pub data_layer_ready: bool,
    pub domain_layer_ready: bool,
    pub application_layer_ready: bool,
    pub presentation_layer_ready: bool,

    /// –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    pub initialization_start: Option<std::time::Instant>,
    pub initialization_duration: Option<std::time::Duration>,
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
#[derive(Debug, Clone, Serialize)]
pub struct HealthStatus {
    pub status: String, // "healthy" | "degraded" | "unhealthy"
    pub components: Vec<ComponentHealth>,
    pub overall_score: f32, // 0.0-1.0
    pub last_check: std::time::SystemTime,
}

/// –ó–¥–æ—Ä–æ–≤—å–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
#[derive(Debug, Clone, Serialize)]
pub struct ComponentHealth {
    pub name: String,
    pub status: String,
    pub response_time_ms: Option<f64>,
    pub error_rate: Option<f32>,
    pub last_error: Option<String>,
}

impl CentralTypeSystem {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤
    pub fn new(config: CentralSystemConfig) -> Self {
        // –°–æ–∑–¥–∞—ë–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        let repository: Arc<dyn TypeRepository> = Arc::new(InMemoryTypeRepository::new());

        // –°–æ–∑–¥–∞—ë–º Domain Layer
        let resolution_service = Arc::new(TypeResolutionService::new(repository.clone()));

        // –°–æ–∑–¥–∞—ë–º Application Layer
        let lsp_service = Arc::new(LspTypeService::new(resolution_service.clone()));
        let web_service = Arc::new(WebTypeService::new(resolution_service.clone()));
        let analysis_service = Arc::new(AnalysisTypeService::new(resolution_service.clone()));

        // –°–æ–∑–¥–∞—ë–º Presentation Layer
        let lsp_interface = LspInterface::new(lsp_service.clone());
        let web_interface = WebInterface::new(web_service.clone());
        let cli_interface = CliInterface::new(analysis_service.clone());

        Self {
            repository,
            resolution_service,
            lsp_service,
            web_service,
            analysis_service,
            lsp_interface,
            web_interface,
            cli_interface,
            config,
            system_metrics: Arc::new(tokio::sync::RwLock::new(SystemMetrics::default())),
            initialization_state: Arc::new(
                tokio::sync::RwLock::new(InitializationState::default()),
            ),
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å –∏ —Å—Ä–∞–∑—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤.
    ///
    /// –£–¥–æ–±–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π `new(config)` –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤
    /// –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ `initialize()`. –ù–µ –º–µ–Ω—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    /// —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ API; –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–∏–Ω–∞—Ä—è—Ö
    /// (LSP/Web/CLI) –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π —Ü–µ–ª–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
    ///
    /// –ü—Ä–∏–º–µ—Ä
    /// ```ignore
    /// use bsl_gradual_types::unified::system::{CentralTypeSystem, CentralSystemConfig};
    /// # async fn run() -> anyhow::Result<()> {
    /// let cfg = CentralSystemConfig::default();
    /// let system = CentralTypeSystem::initialize_with_config(cfg).await?;
    /// let health = system.health_check().await;
    /// println!("status={} score={}", health.status, health.overall_score);
    /// # Ok(()) }
    /// ```
    pub async fn initialize_with_config(config: CentralSystemConfig) -> Result<Self> {
        let system = Self::new(config);
        system.initialize().await?;
        Ok(system)
    }

    /// –°–∏–Ω–æ–Ω–∏–º `initialize_with_config` –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏.
    pub async fn try_new(config: CentralSystemConfig) -> Result<Self> {
        Self::initialize_with_config(config).await
    }

    /// –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
    pub async fn initialize(&self) -> Result<()> {
        let start_time = std::time::Instant::now();

        {
            let mut state = self.initialization_state.write().await;
            state.is_initializing = true;
            state.initialization_start = Some(start_time);
            state.current_operation = "–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤".to_string();
            state.progress_percent = 0;
        }

        info!("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CentralTypeSystem...");

        // === –≠–¢–ê–ü 1: DATA LAYER ===
        self.update_progress(10, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Data Layer...")
            .await;
        self.initialize_data_layer().await?;

        // === –≠–¢–ê–ü 2: DOMAIN LAYER ===
        self.update_progress(30, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Domain Layer...")
            .await;
        self.initialize_domain_layer().await?;

        // === –≠–¢–ê–ü 3: APPLICATION LAYER ===
        self.update_progress(60, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application Layer...")
            .await;
        self.initialize_application_layer().await?;

        // === –≠–¢–ê–ü 4: PRESENTATION LAYER ===
        self.update_progress(80, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Presentation Layer...")
            .await;
        self.initialize_presentation_layer().await?;

        // === –ó–ê–í–ï–†–®–ï–ù–ò–ï ===
        let total_time = start_time.elapsed();
        self.update_progress(100, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞").await;

        {
            let mut state = self.initialization_state.write().await;
            state.is_initializing = false;
            state.initialization_duration = Some(total_time);
            state.data_layer_ready = true;
            state.domain_layer_ready = true;
            state.application_layer_ready = true;
            state.presentation_layer_ready = true;
        }

        self.update_system_metrics().await?;

        info!("üéâ CentralTypeSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {:?}", total_time);
        self.print_initialization_summary().await;

        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å LSP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    pub fn lsp_interface(&self) -> &LspInterface {
        &self.lsp_interface
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    pub fn web_interface(&self) -> &WebInterface {
        &self.web_interface
    }

    /// –ü–æ–ª—É—á–∏—Ç—å CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    pub fn cli_interface(&self) -> &CliInterface {
        &self.cli_interface
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    pub async fn get_system_metrics(&self) -> SystemMetrics {
        self.system_metrics.read().await.clone()
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    pub async fn health_check(&self) -> HealthStatus {
        let mut components = Vec::new();
        let mut total_score = 0.0;
        let mut component_count = 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Data Layer
        let data_health = self.check_data_layer_health().await;
        total_score += self.health_score(&data_health);
        component_count += 1;
        components.push(data_health);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Domain Layer
        let domain_health = self.check_domain_layer_health().await;
        total_score += self.health_score(&domain_health);
        component_count += 1;
        components.push(domain_health);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Application Layer
        let app_health = self.check_application_layer_health().await;
        total_score += self.health_score(&app_health);
        component_count += 1;
        components.push(app_health);

        let overall_score = if component_count > 0 {
            total_score / component_count as f32
        } else {
            0.0
        };

        let status = if overall_score > 0.8 {
            "healthy".to_string()
        } else if overall_score > 0.5 {
            "degraded".to_string()
        } else {
            "unhealthy".to_string()
        };

        HealthStatus {
            status,
            components,
            overall_score,
            last_check: std::time::SystemTime::now(),
        }
    }

    /// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
    pub async fn reload_data(&self) -> Result<()> {
        info!("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö CentralTypeSystem...");

        // –û—á–∏—â–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        self.repository.clear().await?;

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.initialize_data_layer().await?;

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self.update_system_metrics().await?;

        info!("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã");
        Ok(())
    }

    // === –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ===

    async fn initialize_data_layer(&self) -> Result<()> {
        info!("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Data Layer...");

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∏–∑ HTML
        let platform_types = self.load_platform_types().await?;
        info!("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤", platform_types.len());

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
        let mut all_types = platform_types;
        if let Some(config_path) = &self.config.configuration_path {
            let config_types = self.load_configuration_types(config_path).await?;
            info!("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤", config_types.len());
            all_types.extend(config_types);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        self.repository.save_types(all_types).await?;

        info!("‚úÖ Data Layer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        Ok(())
    }

    async fn initialize_domain_layer(&self) -> Result<()> {
        info!("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Domain Layer...");

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä—ã –≤ TypeResolutionService (–∫–µ—à–∏, tree-sitter)
        if let Err(e) = self.resolution_service.initialize().await {
            warn!("‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–æ–ª–≤–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {}", e);
        }

        info!("‚úÖ Domain Layer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        Ok(())
    }

    async fn initialize_application_layer(&self) -> Result<()> {
        info!("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application Layer...");

        // LSP Service –≥–æ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç Domain Layer)
        // Web Service –≥–æ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç Domain Layer)
        // Analysis Service –≥–æ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç Domain Layer)

        info!("‚úÖ Application Layer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        Ok(())
    }

    async fn initialize_presentation_layer(&self) -> Result<()> {
        info!("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Presentation Layer...");

        // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≥–æ—Ç–æ–≤—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç Application Layer)

        info!("‚úÖ Presentation Layer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        Ok(())
    }

    // === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===

    async fn load_platform_types(&self) -> Result<Vec<RawTypeData>> {
        info!("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑ HTML...");

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PlatformTypeResolver –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        let platform_resolver = crate::core::platform_resolver::PlatformTypeResolver::new();
        let platform_globals = platform_resolver.get_platform_globals();

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TypeResolution –≤ RawTypeData
        let mut raw_types = Vec::new();
        for (name, resolution) in platform_globals {
            let raw_type = self.convert_resolution_to_raw_data(name, resolution)?;
            raw_types.push(raw_type);
        }

        Ok(raw_types)
    }

    async fn load_configuration_types(&self, config_path: &str) -> Result<Vec<RawTypeData>> {
        info!("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑ XML: {}", config_path);

        let mut guided_parser = ConfigurationGuidedParser::new(config_path);
        let config_resolutions = guided_parser.parse_with_configuration_guide()?;

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TypeResolution –≤ RawTypeData
        let mut raw_types = Vec::new();
        for resolution in config_resolutions {
            if let crate::core::types::ResolutionResult::Concrete(
                crate::core::types::ConcreteType::Configuration(config),
            ) = &resolution.result
            {
                let raw_type = RawTypeData {
                    id: format!("{:?}.{}", config.kind, config.name),
                    russian_name: config.name.clone(),
                    english_name: config.name.clone(), // TODO: –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è
                    source: TypeSource::Configuration {
                        config_version: "8.3".to_string(),
                    },
                    category_path: vec![format!("{:?}", config.kind)],
                    methods: Vec::new(), // TODO: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã
                    properties: config
                        .attributes
                        .iter()
                        .map(|attr| super::data::RawPropertyData {
                            name: attr.name.clone(),
                            type_name: attr.type_.clone(),
                            is_readonly: false,          // TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ XML
                            description: "".to_string(), // TODO: –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
                        })
                        .collect(),
                    documentation: format!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç: {}", config.name),
                    examples: vec![format!("–æ–±—ä–µ–∫—Ç = {}.–°–æ–∑–¥–∞—Ç—å–≠–ª–µ–º–µ–Ω—Ç();", config.name)],
                    available_facets: resolution
                        .available_facets
                        .iter()
                        .map(|kind| crate::core::types::Facet {
                            kind: *kind,
                            methods: vec![],
                            properties: vec![],
                        })
                        .collect(),
                    parse_metadata: ParseMetadata {
                        file_path: format!("{}.xml", config.name),
                        line: 0,
                        column: 0,
                    },
                };
                raw_types.push(raw_type);
            }
        }

        Ok(raw_types)
    }

    fn convert_resolution_to_raw_data(
        &self,
        name: &str,
        resolution: &TypeResolution,
    ) -> Result<RawTypeData> {
        let source = match &resolution.result {
            crate::core::types::ResolutionResult::Concrete(
                crate::core::types::ConcreteType::Platform(_),
            ) => TypeSource::Platform {
                version: "8.3".to_string(),
            },
            crate::core::types::ResolutionResult::Concrete(
                crate::core::types::ConcreteType::Configuration(_),
            ) => TypeSource::Configuration {
                config_version: "8.3".to_string(),
            },
            _ => TypeSource::Platform {
                version: "8.3".to_string(),
            },
        };

        let mut methods = Vec::new();
        let mut properties = Vec::new();

        if let crate::core::types::ResolutionResult::Concrete(
            crate::core::types::ConcreteType::Platform(platform_type),
        ) = &resolution.result
        {
            methods = platform_type
                .methods
                .iter()
                .map(|method| {
                    let params: Vec<super::data::RawParameterData> = method
                        .parameters
                        .iter()
                        .map(|param| super::data::RawParameterData {
                            name: param.name.clone(),
                            type_name: param.type_.clone().unwrap_or_else(String::new),
                            description: String::new(),
                            is_optional: false, // Not available in source, using default
                            is_by_value: true,  // Not available in source, using default
                        })
                        .collect();

                    super::data::RawMethodData {
                        name: method.name.clone(),
                        documentation: String::new(),
                        parameters: params.clone(),
                        return_type: method.return_type.clone(),
                        return_type_name: method.return_type.clone(),
                        params,
                        is_function: method.return_type.is_some(),
                        examples: Vec::new(),
                    }
                })
                .collect();

            properties = platform_type
                .properties
                .iter()
                .map(|prop| super::data::RawPropertyData {
                    name: prop.name.clone(),
                    type_name: prop.type_.clone(),
                    is_readonly: false, // Default value, cannot be determined from PlatformType
                    description: "".to_string(), // Default value, cannot be determined from PlatformType
                })
                .collect();
        }

        Ok(RawTypeData {
            id: name.to_string(),
            russian_name: name.to_string(),
            english_name: name.to_string(), // TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            source,
            category_path: vec!["–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞".to_string()], // TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            methods,
            properties,
            documentation: format!("–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π —Ç–∏–ø: {}", name),
            examples: vec![format!("–æ–±—ä–µ–∫—Ç = –ù–æ–≤—ã–π {};", name)],
            available_facets: resolution
                .available_facets
                .iter()
                .map(|kind| crate::core::types::Facet {
                    kind: *kind,
                    methods: vec![],
                    properties: vec![],
                })
                .collect(),
            parse_metadata: ParseMetadata {
                file_path: format!("{}.html", name),
                line: 0,
                column: 0,
            },
        })
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú ===

    async fn update_progress(&self, percent: u8, operation: &str) {
        let mut state = self.initialization_state.write().await;
        state.progress_percent = percent;
        state.current_operation = operation.to_string();

        if self.config.verbose_logging {
            info!("üìä [{:3}%] {}", percent, operation);
        }
    }

    async fn update_system_metrics(&self) -> Result<()> {
        let repo_stats = self.repository.get_stats();

        let mut metrics = self.system_metrics.write().await;
        metrics.total_types = repo_stats.total_types;
        metrics.platform_types = repo_stats.platform_types;
        metrics.configuration_types = repo_stats.configuration_types;
        metrics.user_defined_types = repo_stats.user_defined_types;
        metrics.cache_memory_mb = 0.0; // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        metrics.last_updated = Some(std::time::SystemTime::now());
        // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LSP
        let lsp_metrics = self.lsp_service.get_performance_metrics().await;
        metrics.total_requests = lsp_metrics.total_requests;
        metrics.average_lsp_response_ms = lsp_metrics.average_response_time_ms;
        metrics.cache_hit_rate = lsp_metrics.cache_hit_rate; // –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏

        // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Web
        let web_metrics = self.web_service.get_performance_metrics().await;
        metrics.average_web_response_ms = web_metrics.average_response_time_ms;
        // –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–º–µ–Ω–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        Ok(())
    }

    async fn print_initialization_summary(&self) {
        let metrics = self.system_metrics.read().await;
        let state = self.initialization_state.read().await;

        info!("\nüìä –°–≤–æ–¥–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CentralTypeSystem:");
        info!(
            "   - –û–±—â–µ–µ –≤—Ä–µ–º—è: {:?}",
            state.initialization_duration.unwrap_or_default()
        );
        info!("   - –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤: {}", metrics.total_types);
        info!("   - –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö: {}", metrics.platform_types);
        info!("   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö: {}", metrics.configuration_types);
        info!("   - –ü–∞–º—è—Ç—å: {:.2} MB", metrics.cache_memory_mb);

        if !state.errors.is_empty() {
            warn!("   - –û—à–∏–±–∫–∏: {}", state.errors.len());
            for error in &state.errors {
                warn!("     ‚Ä¢ {}", error);
            }
        }

        info!("\nüéØ –ì–æ—Ç–æ–≤–æ –∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤!");
    }

    // === –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø ===

    async fn check_data_layer_health(&self) -> ComponentHealth {
        let start_time = std::time::Instant::now();

        let stats = self.repository.get_stats();
        let response_time = start_time.elapsed().as_millis() as f64;
        ComponentHealth {
            name: "DataLayer".to_string(),
            status: if stats.total_types > 0 {
                "healthy"
            } else {
                "degraded"
            }
            .to_string(),
            response_time_ms: Some(response_time),
            error_rate: Some(0.0),
            last_error: None,
        }
    }

    async fn check_domain_layer_health(&self) -> ComponentHealth {
        let start_time = std::time::Instant::now();

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∏–ø–∞
        let test_context = TypeContext {
            file_path: None,
            line: None,
            column: None,
            local_variables: std::collections::HashMap::new(),
            current_function: None,
            current_facet: None,
        };

        let _resolution = self
            .resolution_service
            .resolve_expression("–ú–∞—Å—Å–∏–≤", &test_context)
            .await;
        let response_time = start_time.elapsed().as_millis() as f64;

        ComponentHealth {
            name: "DomainLayer".to_string(),
            status: "healthy".to_string(),
            response_time_ms: Some(response_time),
            error_rate: Some(0.0),
            last_error: None,
        }
    }

    async fn check_application_layer_health(&self) -> ComponentHealth {
        // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å LSP, Web, Analysis —Å–µ—Ä–≤–∏—Å—ã
        ComponentHealth {
            name: "ApplicationLayer".to_string(),
            status: "healthy".to_string(),
            response_time_ms: Some(1.0),
            error_rate: Some(0.0),
            last_error: None,
        }
    }

    fn health_score(&self, component: &ComponentHealth) -> f32 {
        match component.status.as_str() {
            "healthy" => 1.0,
            "degraded" => 0.5,
            "unhealthy" => 0.0,
            _ => 0.0,
        }
    }
}

impl Default for CentralSystemConfig {
    fn default() -> Self {
        Self {
            html_path: "examples/syntax_helper/rebuilt.shcntx_ru".to_string(),
            configuration_path: None,
            verbose_logging: false,
            cache_settings: CacheSettings {
                enable_repository_cache: true,
                enable_resolution_cache: true,
                enable_lsp_cache: true,
                cache_ttl_seconds: 3600, // 1 —á–∞—Å
                max_cache_size: 10000,
            },
            performance_settings: PerformanceSettings {
                enable_parallel_parsing: true,
                max_parser_threads: num_cpus::get(),
                lsp_response_timeout_ms: 100,
                web_request_timeout_ms: 5000,
            },
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_central_type_system_creation() {
        let config = CentralSystemConfig::default();
        let system = CentralTypeSystem::new(config);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        assert!(!system.config.html_path.is_empty());

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        let _lsp_interface = system.lsp_interface();
        let _web_interface = system.web_interface();
        let _cli_interface = system.cli_interface();

        println!("‚úÖ CentralTypeSystem —Å–æ–∑–¥–∞–Ω–∞");
    }

    #[tokio::test]
    async fn test_system_initialization() {
        let config = CentralSystemConfig {
            verbose_logging: true,
            ..Default::default()
        };

        let system = CentralTypeSystem::new(config);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        match system.initialize().await {
            Ok(_) => {
                println!("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                let metrics = system.get_system_metrics().await;
                println!("üìä –¢–∏–ø–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {}", metrics.total_types);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
                let health = system.health_check().await;
                println!("üè• –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {}", health.status);
            }
            Err(e) => {
                println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", e);
                // –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            }
        }
    }
}
