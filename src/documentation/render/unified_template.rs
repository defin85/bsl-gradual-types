//! –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü

/// –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
pub struct UnifiedPageTemplate {
    /// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pub title: String,

    /// –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    pub active_section: String,

    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è header
    pub stats: PageStatistics,

    /// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    pub content: String,

    /// –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞
    pub theme: String,
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ header
#[derive(Debug, Clone)]
pub struct PageStatistics {
    pub functions_count: usize,
    pub variables_count: usize,
    pub platform_types_count: usize,
    pub memory_usage_mb: f32,
}

impl UnifiedPageTemplate {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    pub fn new(title: &str, active_section: &str) -> Self {
        Self {
            title: title.to_string(),
            active_section: active_section.to_string(),
            stats: PageStatistics::default(),
            content: String::new(),
            theme: "dark".to_string(),
        }
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    pub fn with_stats(mut self, stats: PageStatistics) -> Self {
        self.stats = stats;
        self
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
    pub fn with_content(mut self, content: String) -> Self {
        self.content = content;
        self
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É
    pub fn with_theme(mut self, theme: String) -> Self {
        self.theme = theme;
        self
    }

    /// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pub fn render(&self) -> String {
        format!(
            r#"<!DOCTYPE html>
<html lang="ru" class="theme-{}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{}</title>
    {}
    {}
</head>
<body class="theme-{}">
    <div class="page-layout">
        {}
        <div class="page-content">
            {}
        </div>
        {}
    </div>
    {}
</body>
</html>"#,
            self.theme,               // html class
            self.title,               // title
            self.render_shared_css(), // CSS
            self.render_page_css(),   // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π CSS
            self.theme,               // body class
            self.render_header(),     // header
            self.content,             // main content
            self.render_footer(),     // footer
            self.render_javascript()  // JavaScript
        )
    }

    /// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–±—â–∏—Ö CSS —Å—Ç–∏–ª–µ–π
    fn render_shared_css(&self) -> String {
        // –í–∫–ª—é—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ shared_styles.css
        let shared_css = include_str!("shared_styles.css");
        format!("<style>\n{}\n</style>", shared_css)
    }

    /// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö CSS –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    fn render_page_css(&self) -> String {
        match self.active_section.as_str() {
            "hierarchy" => self.render_hierarchy_css(),
            "search" => self.render_search_css(),
            _ => String::new(),
        }
    }

    /// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ header —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    fn render_header(&self) -> String {
        format!(
            r#"<header class="page-header">
                <div class="theme-switcher">
                    <button class="theme-btn" onclick="switchTheme('dark')">üåô –¢–µ–º–Ω–∞—è</button>
                    <button class="theme-btn" onclick="switchTheme('light')">‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è</button>
                    <button class="theme-btn" onclick="switchTheme('vscode')">üíª VSCode</button>
                </div>
                
                <div class="header-brand">
                    <h1>üöÄ BSL Type Browser</h1>
                    <p>Production-ready —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ –¥–ª—è 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ</p>
                </div>
                
                <nav class="main-navigation">
                    <a href="/" class="nav-tab {}">üè† –ì–ª–∞–≤–Ω–∞—è</a>
                    <a href="/hierarchy" class="nav-tab {}">üå≥ –ò–µ—Ä–∞—Ä—Ö–∏—è</a>
                    <a href="/search" class="nav-tab {}">üîç –ü–æ–∏—Å–∫</a>
                    <a href="/analyzer" class="nav-tab {}">‚ö° –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä</a>
                    <a href="/stats" class="nav-tab {}">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                    <a href="/api" class="nav-tab {}">üîó API</a>
                </nav>
                
                {}
            </header>"#,
            if self.active_section == "home" {
                "active"
            } else {
                ""
            },
            if self.active_section == "hierarchy" {
                "active"
            } else {
                ""
            },
            if self.active_section == "search" {
                "active"
            } else {
                ""
            },
            if self.active_section == "analyzer" {
                "active"
            } else {
                ""
            },
            if self.active_section == "stats" {
                "active"
            } else {
                ""
            },
            if self.active_section == "api" {
                "active"
            } else {
                ""
            },
            self.render_stats_section()
        )
    }

    /// –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    fn render_stats_section(&self) -> String {
        if self.active_section == "home" {
            format!(
                r#"<div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value">{}</div>
                        <div class="stat-label">–§—É–Ω–∫—Ü–∏–π</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">{}</div>
                        <div class="stat-label">–ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">{}</div>
                        <div class="stat-label">–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">{:.1}</div>
                        <div class="stat-label">–ü–∞–º—è—Ç—å (MB)</div>
                    </div>
                </div>"#,
                self.stats.functions_count,
                self.stats.variables_count,
                self.stats.platform_types_count,
                self.stats.memory_usage_mb
            )
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü - —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            format!(
                r#"<div class="compact-stats">
                    <span class="compact-stat">üìä {} —Ç–∏–ø–æ–≤</span>
                    <span class="compact-stat">üíæ {:.1} MB</span>
                </div>"#,
                self.stats.platform_types_count, self.stats.memory_usage_mb
            )
        }
    }

    /// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ footer
    fn render_footer(&self) -> String {
        r#"<footer class="page-footer">
            <p>BSL Gradual Type System v1.0.0 | Enterprise Documentation | 
               <a href="https://github.com/your-repo/bsl-gradual-types" style="color: var(--accent-color);">GitHub</a>
            </p>
        </footer>"#.to_string()
    }

    /// CSS —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏
    fn render_hierarchy_css(&self) -> String {
        r#"<style>
/* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏ */
.hierarchy-layout {
    display: flex;
    height: 100%;
}

.hierarchy-sidebar {
    width: var(--sidebar-width);
    background: var(--bg-secondary);
    border-right: 1px solid var(--border-color);
}

.hierarchy-content {
    flex: 1;
    padding: var(--spacing-xl);
    background: var(--bg-primary);
}

/* –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è */
.tree-node {
    font-family: var(--font-family);
    font-size: 0.9em;
}

.tree-node.selected {
    background: var(--accent-color);
    color: white;
}

.tree-node:hover {
    background: var(--bg-tertiary);
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç–∏–ø–æ–≤ */
.type-hierarchy-fixed {
    padding: var(--spacing-lg);
    background: var(--bg-primary);
    border-radius: var(--border-radius);
    margin: var(--spacing-md) 0;
}

.system-status {
    background: var(--bg-secondary);
    padding: var(--spacing-md);
    border-radius: var(--border-radius);
    margin: var(--spacing-md) 0;
    border-left: 4px solid var(--success-color, #4CAF50);
}

.system-status p {
    margin: var(--spacing-xs) 0;
    color: var(--text-secondary);
}

.categories-list {
    margin: var(--spacing-lg) 0;
}

.category-item {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    margin: var(--spacing-md) 0;
    padding: var(--spacing-md);
    transition: all 0.2s ease;
}

.category-item:hover {
    border-color: var(--accent-color);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.category-item h4 {
    color: var(--accent-color);
    margin: 0 0 var(--spacing-sm) 0;
    font-size: 1.1em;
}

.types-in-category {
    display: grid;
    gap: var(--spacing-xs);
}

.type-item {
    display: grid;
    grid-template-columns: 1fr auto auto;
    gap: var(--spacing-sm);
    padding: var(--spacing-xs);
    background: var(--bg-primary);
    border-radius: calc(var(--border-radius) / 2);
    align-items: center;
}

.type-name {
    font-family: var(--font-mono);
    color: var(--primary-color);
    font-weight: 500;
}

.type-certainty {
    background: var(--accent-color);
    color: white;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.75em;
    text-transform: uppercase;
}

.type-facets {
    color: var(--text-secondary);
    font-size: 0.8em;
    font-family: var(--font-mono);
}

.more-types {
    color: var(--text-secondary);
    font-style: italic;
    text-align: center;
    padding: var(--spacing-xs);
    background: var(--bg-tertiary);
    border-radius: calc(var(--border-radius) / 2);
}

.success-message {
    background: var(--success-bg, #e8f5e8);
    border: 1px solid var(--success-color, #4CAF50);
    border-radius: var(--border-radius);
    padding: var(--spacing-lg);
    margin: var(--spacing-lg) 0;
}

.success-message h4 {
    color: var(--success-color, #4CAF50);
    margin: 0 0 var(--spacing-sm) 0;
}

.success-message ul {
    margin: var(--spacing-sm) 0;
    padding-left: var(--spacing-lg);
}

.success-message li {
    margin: var(--spacing-xs) 0;
    color: var(--text-primary);
}

/* –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º */
:root.theme-dark {
    --success-color: #4CAF50;
    --success-bg: #1e2e1e;
}

:root.theme-light {
    --success-color: #2E7D32;
    --success-bg: #f1f8e9;
}

:root.theme-vscode {
    --success-color: #4EC9B0;
    --success-bg: #1e1e1e;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ */
.category-description {
    background: var(--bg-tertiary);
    padding: var(--spacing-sm);
    border-radius: calc(var(--border-radius) / 2);
    margin: var(--spacing-sm) 0;
    border-left: 3px solid var(--accent-color);
}

.category-description p {
    margin: var(--spacing-xs) 0;
    color: var(--text-secondary);
    font-size: 0.9em;
}

.subcategories-section, .types-section {
    margin: var(--spacing-md) 0;
    padding: var(--spacing-sm);
    background: var(--bg-tertiary);
    border-radius: calc(var(--border-radius) / 2);
}

.subcategories-section h5, .types-section h5 {
    margin: 0 0 var(--spacing-sm) 0;
    color: var(--accent-color);
    font-size: 0.9em;
    text-transform: uppercase;
    font-weight: 600;
}

.subcategory-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-xs);
    margin: var(--spacing-xs) 0;
    background: var(--bg-primary);
    border-radius: calc(var(--border-radius) / 3);
    border-left: 2px solid var(--accent-color);
}

.subcategory-name {
    font-family: var(--font-mono);
    color: var(--primary-color);
    font-weight: 500;
}

.subcategory-counts {
    color: var(--text-secondary);
    font-size: 0.8em;
    font-style: italic;
}

.more-subcategories {
    color: var(--text-secondary);
    font-style: italic;
    text-align: center;
    padding: var(--spacing-xs);
    background: var(--bg-secondary);
    border-radius: calc(var(--border-radius) / 3);
    margin: var(--spacing-xs) 0;
}
</style>"#
            .to_string()
    }

    /// CSS –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞
    fn render_search_css(&self) -> String {
        r#"<style>
/* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞ */
.search-layout {
    padding: var(--spacing-xl);
}
</style>"#
            .to_string()
    }

    /// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ JavaScript
    fn render_javascript(&self) -> String {
        r#"<script>
// === –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–ê–í–ò–ì–ê–¶–ò–ò ===

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
window.bslBrowser = {
    currentTheme: localStorage.getItem('bsl-theme') || 'dark',
    currentSection: '',
    isLoading: false
};

// === –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–ï–ú ===
function switchTheme(themeName) {
    // –û–±–Ω–æ–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å
    document.documentElement.className = 'theme-' + themeName;
    document.body.className = 'theme-' + themeName;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('bsl-theme', themeName);
    window.bslBrowser.currentTheme = themeName;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Ç–µ–º—ã
    document.querySelectorAll('.theme-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[onclick="switchTheme('${themeName}')"]`)?.classList.add('active');
    
    console.log('üé® Theme switched to:', themeName);
}

// === SPA-–ü–û–î–û–ë–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
function navigateToSection(section, pushState = true) {
    if (window.bslBrowser.isLoading) return;
    
    window.bslBrowser.isLoading = true;
    window.bslBrowser.currentSection = section;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelector(`[href="/${section}"]`)?.classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    if (pushState) {
        const url = section === 'home' ? '/' : `/${section}`;
        history.pushState({section}, '', url);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingIndicator();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç (–µ—Å–ª–∏ —ç—Ç–æ SPA)
    if (window.loadSectionContent) {
        window.loadSectionContent(section);
    }
    
    window.bslBrowser.isLoading = false;
}

// === –ò–ù–î–ò–ö–ê–¢–û–† –ó–ê–ì–†–£–ó–ö–ò ===
function showLoadingIndicator() {
    const indicator = document.getElementById('loading-indicator');
    if (indicator) {
        indicator.style.display = 'block';
    }
}

function hideLoadingIndicator() {
    const indicator = document.getElementById('loading-indicator');
    if (indicator) {
        indicator.style.display = 'none';
    }
}

// === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-text">${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
        </div>
    `;
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'error' ? 'var(--error-color)' : 'var(--accent-color)'};
        color: white;
        padding: 1rem;
        border-radius: var(--border-radius);
        z-index: 9999;
        min-width: 300px;
        animation: slideIn 0.3s ease;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    `;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
    switchTheme(window.bslBrowser.currentTheme);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ–∫—Ü–∏—é –ø–æ URL
    const path = window.location.pathname;
    const section = path === '/' ? 'home' : path.substring(1);
    window.bslBrowser.currentSection = section;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.classList.remove('active');
        if (tab.getAttribute('href') === (section === 'home' ? '/' : `/${section}`)) {
            tab.classList.add('active');
        }
    });
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏
    if (section === 'hierarchy') {
        setTimeout(() => {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏ –∫–æ—Ä–Ω–µ–≤—ã–º–∏ —É–∑–ª–∞–º–∏
            document.querySelectorAll('.tree-node[data-node-type="Category"]').forEach(categoryNode => {
                const nodeId = categoryNode.dataset.nodeId;
                if (nodeId) {
                    treeState.expandedNodes.add(nodeId);
                    categoryNode.classList.add('expanded');
                    
                    // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    const children = document.querySelector(`.tree-children[data-parent-id="${nodeId}"]`);
                    if (children) {
                        children.style.display = 'block';
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    const indicator = categoryNode.querySelector('.expand-indicator');
                    if (indicator) {
                        indicator.textContent = '‚ñº';
                        indicator.dataset.expanded = 'true';
                    }
                    
                    console.log('üìÇ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', nodeId);
                }
            });
            
            console.log('üìä Expanded nodes initialized:', Array.from(treeState.expandedNodes));
        }, 100);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä–µ–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    window.addEventListener('popstate', function(event) {
        if (event.state && event.state.section) {
            navigateToSection(event.state.section, false);
        }
    });
    
    console.log('üöÄ BSL Browser Unified UI initialized');
    console.log('üìç Current section:', section);
    console.log('üé® Current theme:', window.bslBrowser.currentTheme);
});

// === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ê–ù–ò–ú–ê–¶–ò–ò ===
const additionalCSS = `
<style>
@keyframes slideOut {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(100%); opacity: 0; }
}

.notification {
    animation: slideIn 0.3s ease;
}

.notification-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.notification-close {
    background: none;
    border: none;
    color: white;
    font-size: 1.2em;
    cursor: pointer;
    padding: 0 0 0 10px;
}

.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
}

.loading-spinner {
    width: 60px;
    height: 60px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-left: 4px solid var(--accent-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>
`;

// –î–æ–±–∞–≤–ª—è–µ–º CSS –≤ head
document.head.insertAdjacentHTML('beforeend', additionalCSS);

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ ===

// –ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤
function performSearch(query) {
    const resultsContainer = document.getElementById('search-results');
    
    if (query.length < 2) {
        resultsContainer.innerHTML = '';
        return;
    }
    
    console.log('üîç Performing search:', query);
    resultsContainer.innerHTML = '<div class="loading">üîÑ –ü–æ–∏—Å–∫...</div>';
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API endpoint
    fetch(`/api/types?search=${encodeURIComponent(query)}&per_page=10`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            displaySearchResults(data.types || data.results || data);
        })
        .catch(error => {
            console.error('Search error:', error);
            resultsContainer.innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}</div>`;
        });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
function displaySearchResults(results) {
    const container = document.getElementById('search-results');
    if (!container) return;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞ API
    let searchResults = [];
    if (Array.isArray(results)) {
        searchResults = results;
    } else if (results.types) {
        searchResults = results.types;
    } else if (results.results) {
        searchResults = results.results;
    }
    
    if (searchResults.length === 0) {
        container.innerHTML = '<div class="no-results">üì≠ –¢–∏–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.</div>';
        return;
    }
    
    const html = searchResults.slice(0, 8).map(result => `
        <div class="search-result-card" onclick="openTypeDetails('${result.name || result.id}')">
            <h3>${result.name || result.id}</h3>
            <p>${result.description || result.russian_name || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
            <span class="result-category">${result.category || result.type_name || '–¢–∏–ø'}</span>
        </div>
    `).join('');
    
    container.innerHTML = `
        <div class="search-results-header">
            <h3>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (${searchResults.length})</h3>
        </div>
        ${html}
        ${searchResults.length > 8 ? `<div class="more-results">... –∏ –µ—â–µ ${searchResults.length - 8} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</div>` : ''}
    `;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–∏–ø–∞
function openTypeDetails(typeName) {
    console.log('üîç Opening details for:', typeName);
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º
    window.location.href = `/hierarchy#type-${encodeURIComponent(typeName)}`;
}

// –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
function analyzeCode() {
    const code = document.getElementById('code-input').value.trim();
    
    if (code.length === 0) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', 'warning');
        return;
    }
    
    console.log('üîç Analyzing code:', code);
    
    const resultsContainer = document.getElementById('analysis-results');
    resultsContainer.innerHTML = '<div class="loading">üîÑ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...</div>';
    
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ–∫–∞ tree-sitter –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    setTimeout(() => {
        const mockResults = {
            types_found: code.split(/\b(–ú–∞—Å—Å–∏–≤|–°—Ç—Ä—É–∫—Ç—É—Ä–∞|–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π|–°—Ç—Ä–æ–∫–∞|–ß–∏—Å–ª–æ|–ë—É–ª–µ–≤–æ)\b/gi).length - 1,
            functions_found: (code.match(/\b–§—É–Ω–∫—Ü–∏—è\s+\w+/gi) || []).length,
            variables_found: (code.match(/\b–ü–µ—Ä–µ–º\s+\w+/gi) || []).length,
            success: true
        };
        
        displayAnalysisResults(mockResults);
        showNotification('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω (demo —Ä–µ–∂–∏–º)', 'info');
    }, 1000);
    
    // TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ tree-sitter –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    /*
    fetch('/api/analyze', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ code: code })
    })
    .then(response => response.json())
    .then(data => {
        displayAnalysisResults(data);
    })
    .catch(error => {
        console.error('Analysis error:', error);
        resultsContainer.innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}</div>`;
    });
    */
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
function displayAnalysisResults(results) {
    const container = document.getElementById('analysis-results');
    
    if (results.errors && results.errors.length > 0) {
        container.innerHTML = `
            <div class="analysis-errors">
                <h4>üö® –û—à–∏–±–∫–∏:</h4>
                ${results.errors.map(error => `<div class="error-item">${error}</div>`).join('')}
            </div>
        `;
        return;
    }
    
    container.innerHTML = `
        <div class="analysis-success">
            <h4>‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ</h4>
            <div class="analysis-details">
                <p><strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–∏–ø–æ–≤:</strong> ${results.types_found || 0}</p>
                <p><strong>–§—É–Ω–∫—Ü–∏–π:</strong> ${results.functions_found || 0}</p>
                <p><strong>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:</strong> ${results.variables_found || 0}</p>
            </div>
        </div>
    `;
}

// –û—á–∏—Å—Ç–∫–∞ –∫–æ–¥–∞
function clearCode() {
    document.getElementById('code-input').value = '';
    document.getElementById('analysis-results').innerHTML = '';
    showNotification('–ö–æ–¥ –æ—á–∏—â–µ–Ω', 'info');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
function loadExample() {
    const exampleCode = `–§—É–Ω–∫—Ü–∏—è –¢–µ—Å—Ç–æ–≤–∞—è–§—É–Ω–∫—Ü–∏—è(–ü–∞—Ä–∞–º–µ—Ç—Ä)
    –ü–µ—Ä–µ–º –†–µ–∑—É–ª—å—Ç–∞—Ç;
    
    –ï—Å–ª–∏ –¢–∏–ø–ó–Ω—á(–ü–∞—Ä–∞–º–µ—Ç—Ä) = –¢–∏–ø("–°—Ç—Ä–æ–∫–∞") –¢–æ–≥–¥–∞
        –†–µ–∑—É–ª—å—Ç–∞—Ç = –°—Ç—Ä–æ–∫–∞(–ü–∞—Ä–∞–º–µ—Ç—Ä);
    –ò–Ω–∞—á–µ
        –†–µ–∑—É–ª—å—Ç–∞—Ç = "";
    –ö–æ–Ω–µ—Ü–ï—Å–ª–∏;
    
    –í–æ–∑–≤—Ä–∞—Ç –†–µ–∑—É–ª—å—Ç–∞—Ç;
–ö–æ–Ω–µ—Ü–§—É–Ω–∫—Ü–∏–∏

–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¢–µ—Å—Ç–æ–≤–∞—è–ü—Ä–æ—Ü–µ–¥—É—Ä–∞()
    –ü–µ—Ä–µ–º –ú–∞—Å—Å–∏–≤, –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π;
    
    –ú–∞—Å—Å–∏–≤ = –ù–æ–≤—ã–π –ú–∞—Å—Å–∏–≤;
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ = –ù–æ–≤—ã–π –°—Ç—Ä—É–∫—Ç—É—Ä–∞("–ü–æ–ª–µ1, –ü–æ–ª–µ2");
    –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π = –ù–æ–≤—ã–π –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π;
    
    –°–æ–æ–±—â–∏—Ç—å("–°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: " + –ú–∞—Å—Å–∏–≤.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ());
–ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã`;

    document.getElementById('code-input').value = exampleCode;
    document.getElementById('analysis-results').innerHTML = '';
    showNotification('–ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω', 'info');
}

// === –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –î–ï–†–ï–í–û - –§–£–ù–ö–¶–ò–ò ===

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
let treeState = {
    expandedNodes: new Set(),
    selectedNode: null,
    searchQuery: '',
    draggedNode: null,
    contextMenu: null
};

// === –ö–õ–ò–ö –ü–û –£–ó–õ–£ ===
function handleNodeClick(event, nodeId) {
    event.stopPropagation();
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    document.querySelectorAll('.tree-node.selected').forEach(node => {
        node.classList.remove('selected');
    });
    
    // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
    const node = document.getElementById(`node_${nodeId}`);
    if (node) {
        node.classList.add('selected');
        treeState.selectedNode = nodeId;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É–∑–ª–∞
        const nodeType = node.dataset.nodeType;
        loadNodeDetails(nodeId, nodeType);
    }
}

// === –†–ê–°–ö–†–´–¢–ò–ï/–°–í–û–†–ê–ß–ò–í–ê–ù–ò–ï –£–ó–õ–ê ===
function toggleNodeExpansion(event, nodeId) {
    if (event && event.stopPropagation) {
        event.stopPropagation();
    }
    
    const node = document.getElementById(`node_${nodeId}`);
    if (!node) {
        console.log('‚ùå –£–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', nodeId);
        return;
    }
    
    const hasChildren = node.dataset.hasChildren === 'true';
    const childrenLoaded = node.dataset.childrenLoaded === 'true';
    
    if (!hasChildren) {
        console.log('‚ÑπÔ∏è –£–∑–µ–ª –Ω–µ –∏–º–µ–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', nodeId);
        return;
    }
    
    const isExpanded = treeState.expandedNodes.has(nodeId);
    const indicator = node.querySelector('.expand-indicator');
    
    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —É–∑–µ–ª ${nodeId}: ${isExpanded ? '—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º' : '—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º'}`);
    
    if (isExpanded) {
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
        treeState.expandedNodes.delete(nodeId);
        const children = document.querySelector(`.tree-children[data-parent-id="${nodeId}"]`);
        if (children) {
            children.style.display = 'none';
        }
        if (indicator) {
            indicator.textContent = '‚ñ∂';
            indicator.dataset.expanded = 'false';
        }
        node.classList.remove('expanded');
        console.log('üìÅ –£–∑–µ–ª —Å–≤–µ—Ä–Ω—É—Ç:', nodeId);
    } else {
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º
        treeState.expandedNodes.add(nodeId);
        
        const children = document.querySelector(`.tree-children[data-parent-id="${nodeId}"]`);
        
        if (!childrenLoaded) {
            console.log('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã –¥–ª—è:', nodeId);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if (children) {
                children.style.display = 'block';
            }
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —É–∑–ª—ã
            if (children) {
                children.style.display = 'block';
            }
        }
        
        if (indicator) {
            indicator.textContent = '‚ñº';
            indicator.dataset.expanded = 'true';
        }
        node.classList.add('expanded');
        console.log('üìÇ –£–∑–µ–ª —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç:', nodeId);
    }
}

// === –†–ê–ó–í–ï–†–ù–£–¢–¨ –í–°–ï –£–ó–õ–´ ===
function expandAllNodes() {
    console.log('üîÑ –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ —É–∑–ª—ã...');
    document.querySelectorAll('.tree-node[data-has-children="true"]').forEach(node => {
        const nodeId = node.dataset.nodeId;
        if (nodeId && !treeState.expandedNodes.has(nodeId)) {
            console.log('üìÇ –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —É–∑–µ–ª:', nodeId);
            toggleNodeExpansion({ stopPropagation: () => {} }, nodeId);
        }
    });
}

// === –°–í–ï–†–ù–£–¢–¨ –í–°–ï –£–ó–õ–´ ===
function collapseAllNodes() {
    console.log('üîÑ –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ —É–∑–ª—ã...');
    
    // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —É–∑–ª—ã
    const expandedNodes = Array.from(treeState.expandedNodes);
    expandedNodes.forEach(nodeId => {
        console.log('üìÅ –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —É–∑–µ–ª:', nodeId);
        toggleNodeExpansion({ stopPropagation: () => {} }, nodeId);
    });
}

// === –ü–û–ò–°–ö –í –î–ï–†–ï–í–ï ===
function searchInTree(query) {
    treeState.searchQuery = query.toLowerCase();
    
    if (query.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É–∑–ª—ã
        document.querySelectorAll('.tree-node').forEach(node => {
            node.style.display = 'flex';
            node.classList.remove('search-hidden', 'search-match');
        });
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —É–∑–ª—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    document.querySelectorAll('.tree-node').forEach(node => {
        const title = node.querySelector('.node-title')?.textContent?.toLowerCase() || '';
        const isMatch = title.includes(query);
        
        if (isMatch) {
            node.style.display = 'flex';
            node.classList.add('search-match');
            node.classList.remove('search-hidden');
            
            // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —É–∑–ª—É
            expandPathToNode(node);
        } else {
            node.style.display = 'none';
            node.classList.add('search-hidden');
            node.classList.remove('search-match');
        }
    });
}

// === –†–ê–°–ö–†–´–¢–ò–ï –ü–£–¢–ò –ö –£–ó–õ–£ ===
function expandPathToNode(node) {
    let parent = node.parentElement;
    
    while (parent && !parent.classList.contains('tree-root')) {
        if (parent.classList.contains('tree-children')) {
            parent.style.display = 'block';
            
            const parentId = parent.dataset.parentId;
            if (parentId) {
                treeState.expandedNodes.add(parentId);
                
                const parentNode = document.getElementById(`node_${parentId}`);
                if (parentNode) {
                    const indicator = parentNode.querySelector('.expand-indicator');
                    if (indicator) {
                        indicator.textContent = '‚ñº';
                        indicator.dataset.expanded = 'true';
                    }
                    parentNode.classList.add('expanded');
                }
            }
        }
        parent = parent.parentElement;
    }
}

// === –û–ß–ò–°–¢–ö–ê –ü–û–ò–°–ö–ê ===
function clearTreeSearch() {
    const searchInput = document.getElementById('tree-search-input');
    if (searchInput) {
        searchInput.value = '';
        searchInTree('');
    }
}

// === –ó–ê–ì–†–£–ó–ö–ê –î–ï–¢–ê–õ–ï–ô –£–ó–õ–ê ===
async function loadNodeDetails(nodeId, nodeType) {
    const detailsContainer = document.getElementById('type-details');
    if (!detailsContainer) return;
    
    detailsContainer.innerHTML = '<div class="loading">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π...</div>';
    
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
    setTimeout(() => {
        detailsContainer.innerHTML = `
            <div class="node-details">
                <div class="details-header">
                    <h2>üìÑ ${nodeId}</h2>
                    <div class="node-type-badge ${nodeType}">${nodeType}</div>
                </div>
                
                <div class="description">
                    <p>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.</p>
                    <p><strong>–¢–∏–ø —É–∑–ª–∞:</strong> ${nodeType}</p>
                    <p><strong>ID:</strong> ${nodeId}</p>
                </div>
                
                <div class="placeholder-message">
                    <h3>üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h3>
                    <p>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç–æ–¥–∞—Ö, —Å–≤–æ–π—Å—Ç–≤–∞—Ö –∏ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Milestone 3.3.</p>
                </div>
            </div>
        `;
    }, 500);
}

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ï–†–ê–†–•–ò–ò –ö–ê–¢–ï–ì–û–†–ò–ô ===
function toggleCategory(categoryId) {
    const categoryElement = document.getElementById(`category_${categoryId}`);
    const expandIndicator = document.querySelector(`[onclick="toggleCategory('${categoryId}')"] .expand-indicator`);
    
    if (categoryElement.style.display === 'none' || categoryElement.style.display === '') {
        categoryElement.style.display = 'block';
        expandIndicator.textContent = '‚ñº';
        console.log('üìÇ –†–∞–∑–≤–µ—Ä–Ω—É–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', categoryId);
    } else {
        categoryElement.style.display = 'none';
        expandIndicator.textContent = '‚ñ∂';
        console.log('üìÅ –°–≤–µ—Ä–Ω—É–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', categoryId);
    }
}

</script>"#.to_string()
    }
}

impl Default for PageStatistics {
    fn default() -> Self {
        Self {
            functions_count: 0,
            variables_count: 0,
            platform_types_count: 13607, // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            memory_usage_mb: 0.0,
        }
    }
}

/// –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
pub fn create_home_template(stats: PageStatistics) -> UnifiedPageTemplate {
    let content = r#"
        <div class="home-layout-clean">
            <div class="welcome-hero">
                <div class="hero-content">
                    <h2 class="hero-title">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BSL Type Browser</h2>
                    <p class="hero-subtitle">–ü–µ—Ä–≤–∞—è –≤ –º–∏—Ä–µ enterprise-ready —Å–∏—Å—Ç–µ–º–∞ –≥—Ä–∞–¥—É–∞–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–ª—è —è–∑—ã–∫–∞ 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ BSL</p>
                    
                    <div class="feature-grid">
                        <div class="feature-card">
                            <div class="feature-icon">üå≥</div>
                            <h3>–ò–µ—Ä–∞—Ä—Ö–∏—è —Ç–∏–ø–æ–≤</h3>
                            <p>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å 13,607 –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏, lazy loading –∏ –ø–æ–∏—Å–∫–æ–º</p>
                            <a href="/hierarchy" class="feature-link">–û—Ç–∫—Ä—ã—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é ‚Üí</a>
                        </div>
                        
                        <div class="feature-card">
                            <div class="feature-icon">üîç</div>
                            <h3>–ú–æ—â–Ω—ã–π –ø–æ–∏—Å–∫</h3>
                            <p>–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏ fuzzy –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–∏–ø–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º</p>
                            <a href="/search" class="feature-link">–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É ‚Üí</a>
                        </div>
                        
                        <div class="feature-card">
                            <div class="feature-icon">‚ö°</div>
                            <h3>–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞</h3>
                            <p>–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ BSL –∫–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≥—Ä–∞–¥—É–∞–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π</p>
                            <a href="/analyzer" class="feature-link">–û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä ‚Üí</a>
                        </div>
                        
                        <div class="feature-card">
                            <div class="feature-icon">üìä</div>
                            <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                            <p>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤, –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Ç—á–µ—Ç—ã</p>
                            <a href="/stats" class="feature-link">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚Üí</a>
                        </div>
                        
                        <div class="feature-card">
                            <div class="feature-icon">üîó</div>
                            <h3>API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</h3>
                            <p>REST API endpoints –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏</p>
                            <a href="/api" class="feature-link">–û—Ç–∫—Ä—ã—Ç—å API ‚Üí</a>
                        </div>
                    </div>
                    
                    <div class="getting-started">
                        <h3>üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</h3>
                        <div class="quick-actions">
                            <a href="/hierarchy" class="action-btn primary">üå≥ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–ø–æ–≤</a>
                            <a href="/search" class="action-btn secondary">üîç –ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤</a>
                            <a href="/analyzer" class="action-btn secondary">‚ö° –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>"#.to_string();

    UnifiedPageTemplate::new("BSL Type Browser", "home")
        .with_stats(stats)
        .with_content(content)
}

/// –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞
pub fn create_search_template(stats: PageStatistics) -> UnifiedPageTemplate {
    let content = r#"
        <div class="search-layout">
            <div class="search-hero">
                <h2 class="section-title-large">üîç –ú–æ—â–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø–∞–º BSL</h2>
                <p class="section-subtitle">–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏ fuzzy –ø–æ–∏—Å–∫ –ø–æ 13,607 –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–º —Ç–∏–ø–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º</p>
            </div>
            
            <div class="search-interface">
                <div class="search-input-section">
                    <div class="search-container-large">
                        <input type="text" class="search-input-large" id="search-input" 
                               placeholder="–ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ BSL... (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Å—Å–∏–≤, –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π)"
                               onkeyup="performSearch(this.value)" autofocus>
                    </div>
                    <div class="search-options">
                        <label class="search-option">
                            <input type="checkbox" id="fuzzy-search" checked> 
                            <span>üîç –ù–µ—á—ë—Ç–∫–∏–π –ø–æ–∏—Å–∫</span>
                        </label>
                        <label class="search-option">
                            <input type="checkbox" id="case-sensitive"> 
                            <span>Aa –£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä</span>
                        </label>
                        <label class="search-option">
                            <input type="checkbox" id="whole-words"> 
                            <span>üìù –¶–µ–ª—ã–µ —Å–ª–æ–≤–∞</span>
                        </label>
                    </div>
                </div>
                
                <div class="search-filters">
                    <div class="filter-group">
                        <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                        <select id="category-filter" onchange="applyFilters()">
                            <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                            <option value="platform">–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã</option>
                            <option value="configuration">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã</option>
                        </select>
                    </div>
                    
                    <div class="filter-group">
                        <label>–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:</label>
                        <select id="object-type-filter" onchange="applyFilters()">
                            <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
                            <option value="object">–û–±—ä–µ–∫—Ç—ã</option>
                            <option value="manager">–ú–µ–Ω–µ–¥–∂–µ—Ä—ã</option>
                            <option value="collection">–ö–æ–ª–ª–µ–∫—Ü–∏–∏</option>
                        </select>
                    </div>
                    
                    <button class="btn btn-secondary" onclick="clearFilters()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
                </div>
                
                <div id="search-results" class="search-results-container"></div>
                <div id="search-suggestions" class="suggestions-container"></div>
            </div>
        </div>"#.to_string();

    UnifiedPageTemplate::new("BSL Type Search", "search")
        .with_stats(stats)
        .with_content(content)
}

/// –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞
pub fn create_analyzer_template(stats: PageStatistics) -> UnifiedPageTemplate {
    let content = r#"
        <div class="analyzer-layout">
            <div class="analyzer-hero">
                <h2 class="section-title-large">‚ö° –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä BSL –∫–æ–¥–∞</h2>
                <p class="section-subtitle">–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≥—Ä–∞–¥—É–∞–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫</p>
            </div>
            
            <div class="analyzer-interface">
                <div class="code-editor-section">
                    <div class="editor-toolbar">
                        <div class="editor-controls">
                            <button class="btn btn-secondary" onclick="loadExample()">üìù –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä</button>
                            <button class="btn btn-secondary" onclick="clearCode()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>
                            <button class="btn btn-secondary" onclick="formatCode()">üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                        </div>
                        <div class="editor-stats">
                            <span id="line-count">–°—Ç—Ä–æ–∫: 0</span>
                            <span id="char-count">–°–∏–º–≤–æ–ª–æ–≤: 0</span>
                        </div>
                    </div>
                    
                    <div class="code-editor-container">
                        <textarea id="code-input" class="code-editor" 
                                  placeholder="–í–≤–µ–¥–∏—Ç–µ BSL –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...

–ü—Ä–∏–º–µ—Ä:
–§—É–Ω–∫—Ü–∏—è –†–∞—Å—á—ë—Ç–°—É–º–º—ã(–°–ª–∞–≥–∞–µ–º–æ–µ1, –°–ª–∞–≥–∞–µ–º–æ–µ2)
    –ü–µ—Ä–µ–º –†–µ–∑—É–ª—å—Ç–∞—Ç;
    
    –ï—Å–ª–∏ –¢–∏–ø–ó–Ω—á(–°–ª–∞–≥–∞–µ–º–æ–µ1) = –¢–∏–ø(&quot;–ß–∏—Å–ª–æ&quot;) –ò –¢–∏–ø–ó–Ω—á(–°–ª–∞–≥–∞–µ–º–æ–µ2) = –¢–∏–ø(&quot;–ß–∏—Å–ª–æ&quot;) –¢–æ–≥–¥–∞
        –†–µ–∑—É–ª—å—Ç–∞—Ç = –°–ª–∞–≥–∞–µ–º–æ–µ1 + –°–ª–∞–≥–∞–µ–º–æ–µ2;
    –ò–Ω–∞—á–µ
        –†–µ–∑—É–ª—å—Ç–∞—Ç = 0;
        –°–æ–æ–±—â–∏—Ç—å(&quot;–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤&quot;);
    –ö–æ–Ω–µ—Ü–ï—Å–ª–∏;
    
    –í–æ–∑–≤—Ä–∞—Ç –†–µ–∑—É–ª—å—Ç–∞—Ç;
–ö–æ–Ω–µ—Ü–§—É–Ω–∫—Ü–∏–∏

–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–¢–∏–ø–æ–≤()
    –ü–µ—Ä–µ–º –ú–∞—Å—Å–∏–≤, –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π;
    
    –ú–∞—Å—Å–∏–≤ = –ù–æ–≤—ã–π –ú–∞—Å—Å–∏–≤;
    –ú–∞—Å—Å–∏–≤.–î–æ–±–∞–≤–∏—Ç—å(&quot;–≠–ª–µ–º–µ–Ω—Ç1&quot;);
    –ú–∞—Å—Å–∏–≤.–î–æ–±–∞–≤–∏—Ç—å(123);
    
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ = –ù–æ–≤—ã–π –°—Ç—Ä—É–∫—Ç—É—Ä–∞(&quot;–ü–æ–ª–µ1, –ü–æ–ª–µ2&quot;, &quot;–ó–Ω–∞—á–µ–Ω–∏–µ1&quot;, 456);
    
    –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π = –ù–æ–≤—ã–π –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π;
    –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π.–ö–æ–ª–æ–Ω–∫–∏.–î–æ–±–∞–≤–∏—Ç—å(&quot;–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ&quot;, –ù–æ–≤—ã–π –û–ø–∏—Å–∞–Ω–∏–µ–¢–∏–ø–æ–≤(&quot;–°—Ç—Ä–æ–∫–∞&quot;));
    –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π.–ö–æ–ª–æ–Ω–∫–∏.–î–æ–±–∞–≤–∏—Ç—å(&quot;–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ&quot;, –ù–æ–≤—ã–π –û–ø–∏—Å–∞–Ω–∏–µ–¢–∏–ø–æ–≤(&quot;–ß–∏—Å–ª–æ&quot;));
–ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã"
                                  oninput="updateEditorStats()"></textarea>
                    </div>
                    
                    <div class="analyzer-actions">
                        <button class="btn btn-large" onclick="analyzeCode()">
                            <span>‚ö°</span> –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
                        </button>
                        <button class="btn btn-secondary btn-large" onclick="validateSyntax()">
                            <span>‚úÖ</span> –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                        </button>
                        <button class="btn btn-secondary btn-large" onclick="exportAnalysis()">
                            <span>üì§</span> –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        </button>
                    </div>
                </div>
                
                <div class="analysis-panel">
                    <div class="analysis-tabs">
                        <button class="tab-btn active" onclick="showAnalysisTab('overview')">üìä –û–±–∑–æ—Ä</button>
                        <button class="tab-btn" onclick="showAnalysisTab('types')">üîß –¢–∏–ø—ã</button>
                        <button class="tab-btn" onclick="showAnalysisTab('errors')">üö® –û—à–∏–±–∫–∏</button>
                        <button class="tab-btn" onclick="showAnalysisTab('suggestions')">üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</button>
                    </div>
                    
                    <div id="analysis-overview" class="analysis-tab-content active">
                        <div id="analysis-results" class="analysis-results-detailed">
                            <div class="analysis-placeholder">
                                <div class="placeholder-icon">‚ö°</div>
                                <h3>–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É</h3>
                                <p>–í–≤–µ–¥–∏—Ç–µ BSL –∫–æ–¥ —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.</p>
                            </div>
                        </div>
                    </div>
                    
                    <div id="analysis-types" class="analysis-tab-content">
                        <div id="types-analysis">–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</div>
                    </div>
                    
                    <div id="analysis-errors" class="analysis-tab-content">
                        <div id="errors-analysis">–û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</div>
                    </div>
                    
                    <div id="analysis-suggestions" class="analysis-tab-content">
                        <div id="suggestions-analysis">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</div>
                    </div>
                </div>
            </div>
        </div>"#.to_string();

    UnifiedPageTemplate::new("BSL Code Analyzer", "analyzer")
        .with_stats(stats)
        .with_content(content)
}

/// –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
pub fn create_api_template(stats: PageStatistics) -> UnifiedPageTemplate {
    let content = r#"
        <div class="api-layout">
            <div class="api-hero">
                <h2 class="section-title-large">üîó API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</h2>
                <p class="section-subtitle">REST API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π</p>
            </div>
            
            <div class="api-documentation">
                <div class="api-section">
                    <h3 class="api-section-title">üîç –ü–æ–∏—Å–∫ –∏ —Ç–∏–ø—ã</h3>
                    <div class="api-endpoints-grid">
                        <div class="api-endpoint-card">
                            <div class="endpoint-method get">GET</div>
                            <div class="endpoint-details">
                                <h4>/api/types</h4>
                                <p>–ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π</p>
                                <div class="endpoint-params">
                                    <span class="param">?search=<em>query</em></span>
                                    <span class="param">?page=<em>number</em></span>
                                    <span class="param">?per_page=<em>number</em></span>
                                </div>
                            </div>
                            <button class="test-endpoint-btn" onclick="testEndpoint('/api/types?search=–º–∞—Å—Å–∏–≤&per_page=5')">–¢–µ—Å—Ç</button>
                        </div>
                        
                        <div class="api-endpoint-card">
                            <div class="endpoint-method get">GET</div>
                            <div class="endpoint-details">
                                <h4>/api/types/{name}</h4>
                                <p>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ</p>
                                <div class="endpoint-example">
                                    <code>/api/types/–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π</code>
                                </div>
                            </div>
                            <button class="test-endpoint-btn" onclick="testEndpoint('/api/types/–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π')">–¢–µ—Å—Ç</button>
                        </div>
                    </div>
                </div>
                
                <div class="api-section">
                    <h3 class="api-section-title">üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (v1)</h3>
                    <div class="api-endpoints-grid">
                        <div class="api-endpoint-card">
                            <div class="endpoint-method post">POST</div>
                            <div class="endpoint-details">
                                <h4>/api/v1/search</h4>
                                <p>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</p>
                                <div class="endpoint-json">
                                    <pre><code>{
  "query": "–º–∞—Å—Å–∏–≤",
  "filters": {
    "category": "platform",
    "facet": "collection"
  },
  "pagination": {
    "page": 0,
    "page_size": 20
  }
}</code></pre>
                                </div>
                            </div>
                            <button class="test-endpoint-btn" onclick="testAdvancedSearch()">–¢–µ—Å—Ç</button>
                        </div>
                        
                        <div class="api-endpoint-card">
                            <div class="endpoint-method get">GET</div>
                            <div class="endpoint-details">
                                <h4>/api/v1/suggestions</h4>
                                <p>–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞</p>
                                <div class="endpoint-params">
                                    <span class="param">?partial_query=<em>text</em></span>
                                    <span class="param">?limit=<em>number</em></span>
                                </div>
                            </div>
                            <button class="test-endpoint-btn" onclick="testEndpoint('/api/v1/suggestions?partial_query=—Ç–∞–±–ª&limit=10')">–¢–µ—Å—Ç</button>
                        </div>
                        
                        <div class="api-endpoint-card">
                            <div class="endpoint-method get">GET</div>
                            <div class="endpoint-details">
                                <h4>/api/v1/categories</h4>
                                <p>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–æ–≤</p>
                                <div class="endpoint-description">
                                    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
                                </div>
                            </div>
                            <button class="test-endpoint-btn" onclick="testEndpoint('/api/v1/categories')">–¢–µ—Å—Ç</button>
                        </div>
                        
                        <div class="api-endpoint-card">
                            <div class="endpoint-method get">GET</div>
                            <div class="endpoint-details">
                                <h4>/api/v1/search-stats</h4>
                                <p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ (JSON)</p>
                                <div class="endpoint-description">
                                    –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
                                </div>
                            </div>
                            <button class="test-endpoint-btn" onclick="testEndpoint('/api/v1/search-stats')">–¢–µ—Å—Ç</button>
                        </div>
                    </div>
                </div>
                
                <div class="api-section">
                    <h3 class="api-section-title">‚ö° –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞</h3>
                    <div class="api-endpoints-grid">
                        <div class="api-endpoint-card">
                            <div class="endpoint-method post">POST</div>
                            <div class="endpoint-details">
                                <h4>/api/analyze</h4>
                                <p>–ê–Ω–∞–ª–∏–∑ BSL –∫–æ–¥–∞</p>
                                <div class="endpoint-json">
                                    <pre><code>{
  "code": "–§—É–Ω–∫—Ü–∏—è –¢–µ—Å—Ç()\n  –í–æ–∑–≤—Ä–∞—Ç \"–ü—Ä–∏–≤–µ—Ç\";\n–ö–æ–Ω–µ—Ü–§—É–Ω–∫—Ü–∏–∏"
}</code></pre>
                                </div>
                            </div>
                            <button class="test-endpoint-btn" onclick="testCodeAnalysis()">–¢–µ—Å—Ç</button>
                        </div>
                        
                        <div class="api-endpoint-card">
                            <div class="endpoint-method get">GET</div>
                            <div class="endpoint-details">
                                <h4>/api/status</h4>
                                <p>–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>
                                <div class="endpoint-description">
                                    –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤
                                </div>
                            </div>
                            <button class="test-endpoint-btn" onclick="testEndpoint('/api/status')">–¢–µ—Å—Ç</button>
                        </div>
                    </div>
                </div>
                
                <div class="api-test-area">
                    <h3>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API</h3>
                    <div class="test-interface">
                        <div class="test-request">
                            <label>Endpoint URL:</label>
                            <input type="text" id="test-url" class="test-input" placeholder="/api/types?search=–º–∞—Å—Å–∏–≤">
                            <button class="btn" onclick="customApiTest()">–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å</button>
                        </div>
                        <div class="test-response">
                            <h4>–û—Ç–≤–µ—Ç:</h4>
                            <pre id="api-response" class="response-container">–†–µ–∑—É–ª—å—Ç–∞—Ç API –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</pre>
                        </div>
                    </div>
                </div>
            </div>
        </div>"#.to_string();

    UnifiedPageTemplate::new("BSL API Documentation", "api")
        .with_stats(stats)
        .with_content(content)
}

/// –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
pub fn create_stats_template(stats: PageStatistics) -> UnifiedPageTemplate {
    let content = r#"
        <div class="stats-layout">
            <div class="stats-hero">
                <h2 class="section-title-large">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>
                <p class="section-subtitle">–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ BSL</p>
            </div>
            
            <div class="stats-dashboard">
                <div class="stats-section">
                    <h3 class="stats-section-title">üèóÔ∏è –°–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤</h3>
                    <div class="stats-cards-grid">
                        <div class="stats-detailed-card">
                            <div class="stats-card-header">
                                <span class="stats-icon">üìö</span>
                                <h4>–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã</h4>
                            </div>
                            <div class="stats-card-value" id="platform-types-count">13,607</div>
                            <div class="stats-card-detail">–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Å–ø—Ä–∞–≤–∫–∏ 1–°</div>
                        </div>
                        
                        <div class="stats-detailed-card">
                            <div class="stats-card-header">
                                <span class="stats-icon">‚öôÔ∏è</span>
                                <h4>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã</h4>
                            </div>
                            <div class="stats-card-value" id="config-types-count">0</div>
                            <div class="stats-card-detail">–ò–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</div>
                        </div>
                        
                        <div class="stats-detailed-card">
                            <div class="stats-card-header">
                                <span class="stats-icon">üîç</span>
                                <h4>–ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h4>
                            </div>
                            <div class="stats-card-value" id="indexed-docs-count">3,884</div>
                            <div class="stats-card-detail">–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–∏—Å–∫—É</div>
                        </div>
                        
                        <div class="stats-detailed-card">
                            <div class="stats-card-header">
                                <span class="stats-icon">üíæ</span>
                                <h4>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏</h4>
                            </div>
                            <div class="stats-card-value" id="memory-usage">0.0 MB</div>
                            <div class="stats-card-detail">–ö–µ—à –∏ –∏–Ω–¥–µ–∫—Å—ã</div>
                        </div>
                    </div>
                </div>
                
                <div class="stats-section">
                    <h3 class="stats-section-title">üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞</h3>
                    <div class="search-stats-container">
                        <div class="search-stat-item">
                            <span class="search-stat-label">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</span>
                            <span class="search-stat-value" id="total-queries">0</span>
                        </div>
                        <div class="search-stat-item">
                            <span class="search-stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞:</span>
                            <span class="search-stat-value" id="avg-search-time">0.0 –º—Å</span>
                        </div>
                        <div class="search-stat-item">
                            <span class="search-stat-label">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</span>
                            <div id="popular-queries" class="popular-queries-list">
                                <span class="popular-query">–ú–∞—Å—Å–∏–≤</span>
                                <span class="popular-query">–°—Ç—Ä—É–∫—Ç—É—Ä–∞</span>
                                <span class="popular-query">–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π</span>
                                <span class="popular-query">–°—Ç—Ä–æ–∫–∞</span>
                                <span class="popular-query">–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="stats-section">
                    <h3 class="stats-section-title">‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
                    <div class="performance-metrics">
                        <div class="metric-row">
                            <span class="metric-label">–í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:</span>
                            <span class="metric-value">~30 —Å–µ–∫—É–Ω–¥</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">–í—Ä–µ–º—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:</span>
                            <span class="metric-value">~5 —Å–µ–∫—É–Ω–¥</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API:</span>
                            <span class="metric-value">&lt;100 –º—Å</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">–ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏:</span>
                            <span class="metric-value">195</span>
                        </div>
                    </div>
                </div>
                
                <div class="stats-section">
                    <h3 class="stats-section-title">üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</h3>
                    <div class="usage-charts">
                        <div class="chart-placeholder">
                            <div class="chart-icon">üìà</div>
                            <h4>–ì—Ä–∞—Ñ–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</h4>
                            <p>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö</p>
                        </div>
                    </div>
                </div>
                
                <div class="stats-section">
                    <h3 class="stats-section-title">üîó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                    <div class="info-links">
                        <a href="/api" class="info-link">
                            <span class="info-icon">üîó</span>
                            <div>
                                <h4>API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</h4>
                                <p>REST API endpoints –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</p>
                            </div>
                        </a>
                        <a href="/hierarchy" class="info-link">
                            <span class="info-icon">üå≥</span>
                            <div>
                                <h4>–ò–µ—Ä–∞—Ä—Ö–∏—è —Ç–∏–ø–æ–≤</h4>
                                <p>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤</p>
                            </div>
                        </a>
                    </div>
                </div>
            </div>
        </div>"#.to_string();

    UnifiedPageTemplate::new("BSL Statistics", "stats")
        .with_stats(stats)
        .with_content(content)
}

/// –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏
pub fn create_hierarchy_template(
    stats: PageStatistics,
    tree_content: String,
) -> UnifiedPageTemplate {
    let content = format!(
        r#"<div class="hierarchy-layout">
            <div class="hierarchy-sidebar">
                {}
            </div>
            <div class="hierarchy-content">
                <div id="type-details">
                    <div class="welcome-section">
                        <h2 class="welcome-title">üå≥ BSL Type Browser v2.0 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º</h2>
                        <div class="feature-highlights">
                            <div class="feature-item">
                                <strong>üìÇ Lazy Loading</strong><br>
                                –î–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
                            </div>
                            <div class="feature-item">
                                <strong>üîç –ü–æ–∏—Å–∫ –≤ –¥–µ—Ä–µ–≤–µ</strong><br>
                                –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
                            </div>
                            <div class="feature-item">
                                <strong>üéØ Drag & Drop</strong><br>
                                –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                            </div>
                            <div class="feature-item">
                                <strong>üì± –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω—é</strong><br>
                                –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
                            </div>
                        </div>
                        <p class="instruction">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Ç–∏–ø –≤ –¥–µ—Ä–µ–≤–µ —Å–ª–µ–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>
                    </div>
                </div>
            </div>
        </div>"#,
        tree_content
    );

    UnifiedPageTemplate::new("BSL Type Hierarchy", "hierarchy")
        .with_stats(stats)
        .with_content(content)
}
