//! Web-based Type Browser –∏ Documentation Server
//!
//! HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–ø–æ–≤ BSL

use anyhow::Result;
use clap::Parser;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::path::PathBuf;
use std::sync::Arc;
use tokio::sync::RwLock;

use bsl_gradual_types::core::type_checker::{TypeChecker, TypeContext};
use bsl_gradual_types::core::types::{ConcreteType, ResolutionResult, TypeResolution};
use bsl_gradual_types::documentation::core::providers::DocumentationProvider;
use bsl_gradual_types::documentation::core::ProviderConfig;
use bsl_gradual_types::documentation::{
    AdvancedSearchQuery, ConfigurationDocumentationProvider, DocumentationSearchEngine,
    PlatformDocumentationProvider,
};
use bsl_gradual_types::parser::common::ParserFactory;
// Target architecture
use bsl_gradual_types::architecture::presentation::{WebSearchFilters, WebSearchRequest};
use bsl_gradual_types::target::system::{CentralSystemConfig, CentralTypeSystem};

#[derive(Parser)]
#[command(name = "bsl-web-server")]
#[command(about = "Web-based type browser –¥–ª—è BSL Gradual Type System")]
struct Cli {
    /// –ü–æ—Ä—Ç –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
    #[arg(short, long, default_value = "8080")]
    port: u16,

    /// –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É 1–° –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    #[arg(short = 'j', long)]
    project: Option<PathBuf>,

    /// –ü—É—Ç—å –∫ XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è target –¥–≤–∏–∂–∫–∞)
    #[arg(long)]
    config: Option<String>,

    /// –í–∫–ª—é—á–∏—Ç—å hot reload –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    #[arg(long)]
    hot_reload: bool,

    /// –ü—É—Ç—å –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
    #[arg(long, default_value = "web")]
    static_dir: PathBuf,
    // –î–≤–∏–∂–æ–∫ —É–¥–∞–ª—ë–Ω: –≤—Å–µ–≥–¥–∞ target
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ web —Å–µ—Ä–≤–µ—Ä–∞
#[derive(Clone)]
struct AppState {
    /// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–∏–ø–æ–≤
    type_context: Arc<RwLock<Option<TypeContext>>>,
    /// –ö–µ—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ (TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)
    #[allow(dead_code)]
    search_cache: Arc<RwLock<HashMap<String, Vec<SearchResult>>>>,
    /// –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    loading_status: Arc<RwLock<LoadingStatus>>,
    /// –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    search_engine: Arc<DocumentationSearchEngine>,
    /// –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    platform_provider: Arc<PlatformDocumentationProvider>,
    /// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ (target-only)
    central: Arc<CentralTypeSystem>,
}

// –î–≤–∏–∂–æ–∫ legacy —É–¥–∞–ª—ë–Ω, —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ target-—Ä–µ–∂–∏–º–µ

/// –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
#[derive(Debug, Clone, Serialize)]
struct LoadingStatus {
    /// –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å
    pub is_loading: bool,
    /// –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (0-100)
    pub progress: u8,
    /// –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤
    pub processed_files: usize,
    /// –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤
    pub total_files: usize,
    /// –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    pub current_operation: String,
    /// –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    pub errors: usize,
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Ç–∏–ø–æ–≤
#[derive(Debug, Clone, Serialize, Deserialize)]
struct SearchResult {
    /// –ò–º—è —Ç–∏–ø–∞
    name: String,
    /// –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–∏–ø–∞
    category: String,
    /// –û–ø–∏—Å–∞–Ω–∏–µ
    description: Option<String>,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤
    methods_count: usize,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–π—Å—Ç–≤
    properties_count: usize,
    /// –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_type: String,
}

/// API response –¥–ª—è —Ç–∏–ø–æ–≤
#[derive(Serialize)]
struct TypesResponse {
    types: Vec<SearchResult>,
    total: usize,
    page: usize,
    per_page: usize,
}

/// –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ
#[derive(Serialize)]
struct TypeDetails {
    name: String,
    category: String,
    description: Option<String>,
    methods: Vec<MethodInfo>,
    properties: Vec<PropertyInfo>,
    related_types: Vec<String>,
    usage_examples: Vec<String>,
}

#[derive(Serialize)]
struct MethodInfo {
    name: String,
    parameters: Vec<String>,
    return_type: Option<String>,
    description: Option<String>,
}

#[derive(Serialize)]
struct PropertyInfo {
    name: String,
    type_name: String,
    readonly: bool,
    description: Option<String>,
}

#[tokio::main]
async fn main() -> Result<()> {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    tracing_subscriber::fmt()
        .with_env_filter("bsl_web_server=info,warp=info")
        .init();

    let cli = Cli::parse();

    println!(
        "üåê Starting BSL Type Browser Web Server on port {}",
        cli.port
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    println!("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...");
    let search_engine = Arc::new(DocumentationSearchEngine::new());
    let platform_provider = Arc::new(PlatformDocumentationProvider::new());

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    let config = ProviderConfig::default();
    if let Err(e) = platform_provider.initialize(&config).await {
        println!("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {}", e);
        println!("   –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Å–ø—Ä–∞–≤–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞");
    }

    // –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    let config_provider = ConfigurationDocumentationProvider::new();
    if let Err(e) = search_engine
        .build_indexes(&*platform_provider, &config_provider)
        .await
    {
        println!("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {}", e);
    } else {
        println!("‚úÖ –ò–Ω–¥–µ–∫—Å—ã –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É (target-only)
    println!("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CentralTypeSystem (target engine)");
    let mut cfg = CentralSystemConfig::default();
    if let Some(path) = &cli.config {
        cfg.configuration_path = Some(path.clone());
    }
    let central = Arc::new(
        CentralTypeSystem::initialize_with_config(cfg)
            .await
            .unwrap_or_else(|e| {
                println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CentralTypeSystem: {}", e);
                CentralTypeSystem::new(CentralSystemConfig::default())
            }),
    );

    let app_state = AppState {
        type_context: Arc::new(RwLock::new(None)),
        search_cache: Arc::new(RwLock::new(HashMap::new())),
        loading_status: Arc::new(RwLock::new(LoadingStatus {
            is_loading: false,
            progress: 100,
            processed_files: 0,
            total_files: 0,
            current_operation: "–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞".to_string(),
            errors: 0,
        })),
        search_engine,
        platform_provider,
        central: central.clone(),
    };

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
    if let Some(project_path) = cli.project {
        println!("üìÅ Analyzing project: {}", project_path.display());
        let context = analyze_project(&project_path).await?;
        *app_state.type_context.write().await = Some(context);
        println!("‚úÖ Project analysis completed");
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º web —Å–µ—Ä–≤–µ—Ä
    start_web_server(cli.port, app_state, cli.static_dir).await?;

    Ok(())
}

/// –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤
async fn analyze_project(project_path: &PathBuf) -> Result<TypeContext> {
    use bsl_gradual_types::core::parallel_analysis::{ParallelAnalysisConfig, ParallelAnalyzer};

    let config = ParallelAnalysisConfig {
        show_progress: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è web —Å–µ—Ä–≤–µ—Ä–∞
        use_cache: true,
        ..Default::default()
    };

    let analyzer = ParallelAnalyzer::new(config)?;
    let results = analyzer.analyze_project(project_path)?;

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã —Ç–∏–ø–æ–≤
    let mut combined_context = bsl_gradual_types::core::type_checker::TypeContext {
        variables: HashMap::new(),
        functions: HashMap::new(),
        current_scope: bsl_gradual_types::core::dependency_graph::Scope::Global,
        scope_stack: vec![],
    };

    for file_result in results.file_results {
        if file_result.success {
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            for (name, signature) in file_result.type_context.functions {
                combined_context.functions.insert(name, signature);
            }

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ)
            for (name, type_res) in file_result.type_context.variables {
                combined_context.variables.insert(name, type_res);
            }
        }
    }

    Ok(combined_context)
}

/// –ó–∞–ø—É—Å–∫ web —Å–µ—Ä–≤–µ—Ä–∞
async fn start_web_server(port: u16, app_state: AppState, static_dir: PathBuf) -> Result<()> {
    use warp::Filter;

    // CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    let cors = warp::cors()
        .allow_any_origin()
        .allow_headers(vec!["content-type"])
        .allow_methods(vec!["GET", "POST", "OPTIONS"]);

    // API routes
    let api_base = warp::path("api");
    let api = api_base
        .and(
            // GET /api/types?search=&page=&per_page=
            warp::path("types")
                .and(warp::get())
                .and(warp::query::<SearchQuery>())
                .and(with_state(app_state.clone()))
                .and_then(handle_search_types)
                .or(
                    // GET /api/types/{name}
                    warp::path("types")
                        .and(warp::path::param::<String>())
                        .and(warp::get())
                        .and(with_state(app_state.clone()))
                        .and_then(handle_get_type_details),
                )
                .or(
                    // GET /api/stats
                    warp::path("stats")
                        .and(warp::get())
                        .and(with_state(app_state.clone()))
                        .and_then(handle_get_stats),
                )
                .or(
                    // GET /api/loading-status
                    warp::path("loading-status")
                        .and(warp::get())
                        .and(with_state(app_state.clone()))
                        .and_then(handle_get_loading_status),
                )
                .or(
                    // POST /api/analyze
                    warp::path("analyze")
                        .and(warp::post())
                        .and(warp::body::json())
                        .and(with_state(app_state.clone()))
                        .and_then(handle_analyze_code),
                )
                .or(
                    // POST /api/v1/search - –Ω–æ–≤—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
                    warp::path("v1")
                        .and(warp::path("search"))
                        .and(warp::post())
                        .and(warp::body::json())
                        .and(with_state(app_state.clone()))
                        .and_then(handle_advanced_search),
                )
                .or(
                    // GET /api/v1/suggestions?q=query - –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                    warp::path("v1")
                        .and(warp::path("suggestions"))
                        .and(warp::get())
                        .and(warp::query::<SuggestionsQuery>())
                        .and(with_state(app_state.clone()))
                        .and_then(handle_get_suggestions),
                )
                .or(
                    // GET /api/v1/search-stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
                    warp::path("v1")
                        .and(warp::path("search-stats"))
                        .and(warp::get())
                        .and(with_state(app_state.clone()))
                        .and_then(handle_get_search_stats),
                )
                .or(
                    // GET /api/v1/categories - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    warp::path("v1")
                        .and(warp::path("categories"))
                        .and(warp::get())
                        .and(with_state(app_state.clone()))
                        .and_then(handle_get_categories),
                ),
        )
        .with(cors);

    // –î–æ–ø. health endpoint: /api/health (–≤ target —Ä–µ–∂–∏–º–µ –æ—Ç–¥–∞—ë—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ CentralTypeSystem)
    let health = warp::path!("api" / "health")
        .and(warp::get())
        .and(with_state(app_state.clone()))
        .and_then(handle_health);

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    let static_files = warp::fs::dir(static_dir);

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    let index = warp::path::end().and(warp::get()).and_then(handle_index);

    let routes = api.or(health).or(static_files).or(index);

    println!("üöÄ Web server running on http://localhost:{}", port);
    println!("üìñ Open http://localhost:{} to browse BSL types", port);

    warp::serve(routes).run(([127, 0, 0, 1], port)).await;

    Ok(())
}

/// Helper –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ handlers
fn with_state(
    state: AppState,
) -> impl Filter<Extract = (AppState,), Error = std::convert::Infallible> + Clone {
    warp::any().map(move || state.clone())
}

/// Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
#[derive(Deserialize)]
struct SearchQuery {
    search: Option<String>,
    page: Option<usize>,
    per_page: Option<usize>,
}

/// Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
#[derive(Deserialize)]
struct SuggestionsQuery {
    q: String,
    limit: Option<usize>,
}

/// –û—Ç–≤–µ—Ç API —Å –æ—à–∏–±–∫–æ–π
#[derive(Serialize)]
struct ApiError {
    error: String,
    code: u16,
}

#[derive(Serialize)]
struct HealthResponse {
    status: String,
    overall_score: f32,
    metrics: Option<HealthMetrics>,
}

#[derive(Serialize)]
struct HealthMetrics {
    // –¢–∏–ø—ã
    total_types: usize,
    platform_types: usize,
    configuration_types: usize,
    user_defined_types: usize,
    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    average_lsp_response_ms: f64,
    average_web_response_ms: f64,
    total_requests: u64,
    // –ö–µ—à
    cache_hit_rate: f64,
}

/// –û—Ç–≤–µ—Ç –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
#[derive(Serialize)]
struct SuggestionsResponse {
    suggestions: Vec<String>,
    query: String,
    count: usize,
}

/// –û—Ç–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
#[derive(Serialize)]
struct CategoriesResponse {
    categories: Vec<CategoryInfo>,
    total_count: usize,
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#[derive(Serialize)]
struct CategoryInfo {
    name: String,
    path: String,
    types_count: usize,
    subcategories: usize,
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ç–∏–ø–æ–≤
async fn handle_search_types(
    query: SearchQuery,
    state: AppState,
) -> Result<impl warp::Reply, warp::Rejection> {
    let search_term = query.search.unwrap_or_default();
    let page = query.page.unwrap_or(1);
    let per_page = query.per_page.unwrap_or(20).min(100); // –ú–∞–∫—Å–∏–º—É–º 100

    // Target-only: –∏—Å–ø–æ–ª—å–∑—É–µ–º CentralTypeSystem WebInterface
    let req = WebSearchRequest {
        query: search_term.clone(),
        page: Some(page),
        per_page: Some(per_page),
        filters: None,
    };
    match state.central.web_interface().handle_search_request(req).await {
        Ok(web_resp) => {
            let types: Vec<SearchResult> = web_resp
                .results
                .into_iter()
                .map(|it| SearchResult {
                    name: it.name,
                    category: it.category,
                    description: Some(it.description),
                    methods_count: 0,
                    properties_count: 0,
                    result_type: "Type".to_string(),
                })
                .collect();
            let response = TypesResponse {
                types,
                total: web_resp.total_count,
                page: web_resp.page,
                per_page: web_resp.per_page,
            };
            Ok(warp::reply::json(&response))
        }
        Err(e) => {
            eprintln!("WebInterface search error: {}", e);
            let response = TypesResponse { types: vec![], total: 0, page, per_page };
            Ok(warp::reply::json(&response))
        }
    }
}

// –ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ WebInterface (target-only)

/// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
fn format_type_result(type_res: &TypeResolution) -> String {
    match &type_res.result {
        ResolutionResult::Concrete(ConcreteType::Primitive(primitive)) => {
            format!("{:?}", primitive)
        }
        ResolutionResult::Concrete(ConcreteType::Platform(platform)) => platform.name.clone(),
        ResolutionResult::Union(union_types) => {
            let names: Vec<String> = union_types
                .iter()
                .map(|wt| format!("{:?}", wt.type_))
                .collect();
            format!("Union({})", names.join(" | "))
        }
        _ => "Dynamic".to_string(),
    }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç–∏–ø–∞
async fn handle_get_type_details(
    type_name: String,
    state: AppState,
) -> Result<impl warp::Reply, warp::Rejection> {
    let details = get_type_details(&state, &type_name).await;
    Ok(warp::reply::json(&details))
}

/// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–∏–ø–∞
async fn get_type_details(state: &AppState, type_name: &str) -> TypeDetails {
    // Target-only: CentralTypeSystem
    match state
        .web_interface()
        .handle_type_details_request(type_name)
        .await
    {
        Ok(resp) => {
            return TypeDetails {
                    name: resp.name,
                    category: "Type".to_string(),
                    description: Some("".to_string()),
                    methods: resp
                        .methods
                        .into_iter()
                        .map(|m| MethodInfo {
                            name: m.name,
                            parameters: m
                                .parameters
                                .into_iter()
                                .map(|p| {
                                    format!(
                                        "{}: {}{}",
                                        p.name,
                                        p.type_name,
                                        if p.is_optional { "?" } else { "" }
                                    )
                                })
                                .collect(),
                            return_type: m.return_type,
                            description: Some(m.description),
                        })
                        .collect(),
                    properties: resp
                        .properties
                        .into_iter()
                        .map(|p| PropertyInfo {
                            name: p.name,
                            type_name: p.type_name,
                            readonly: p.is_readonly,
                            description: Some(p.description),
                        })
                        .collect(),
                    related_types: Vec::new(),
                    usage_examples: Vec::new(),
            };
        }
        Err(e) => {
            eprintln!("WebInterface type_details error: {}", e);
        }
    }

    // –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
    TypeDetails {
        name: type_name.to_string(),
        category: "Unknown".to_string(),
        description: Some("Type details from BSL Gradual Type System".to_string()),
        methods: vec![],
        properties: vec![],
        related_types: vec![],
        usage_examples: vec![
            format!("// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {}", type_name),
            format!("–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è = –ù–æ–≤—ã–π {};", type_name),
        ],
    }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async fn handle_get_stats(state: AppState) -> Result<impl warp::Reply, warp::Rejection> {
    let stats = get_system_stats(&state).await;
    Ok(warp::reply::json(&stats))
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
async fn handle_get_loading_status(state: AppState) -> Result<impl warp::Reply, warp::Rejection> {
    let status = state.loading_status.read().await.clone();
    Ok(warp::reply::json(&status))
}

/// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
async fn get_system_stats(state: &AppState) -> SystemStats {
    let context = state.type_context.read().await;
    let metrics = state.central.get_system_metrics().await;

    if let Some(ctx) = context.as_ref() {
        SystemStats {
            total_functions: ctx.functions.len(),
            total_variables: ctx.variables.len(),
            platform_types: metrics.platform_types,
            analysis_cache_size: 0, // TODO
            memory_usage_mb: estimate_memory_usage(ctx),
        }
    } else {
        SystemStats {
            total_functions: 0,
            total_variables: 0,
            platform_types: metrics.platform_types,
            analysis_cache_size: 0,
            memory_usage_mb: 0.0,
        }
    }
}

#[derive(Serialize, Default)]
struct SystemStats {
    total_functions: usize,
    total_variables: usize,
    platform_types: usize,
    analysis_cache_size: usize,
    memory_usage_mb: f64,
}

/// –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
fn estimate_memory_usage(context: &TypeContext) -> f64 {
    use std::mem;

    let base_size = mem::size_of::<TypeContext>();
    let vars_size = context.variables.len() * mem::size_of::<(String, TypeResolution)>();
    let funcs_size = context.functions.len()
        * mem::size_of::<(
            String,
            bsl_gradual_types::core::type_checker::FunctionSignature,
        )>();

    (base_size + vars_size + funcs_size) as f64 / (1024.0 * 1024.0)
}

/// Request –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
#[derive(Deserialize)]
struct AnalyzeRequest {
    code: String,
    filename: Option<String>,
}

/// Response –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
#[derive(Serialize)]
struct AnalyzeResponse {
    success: bool,
    functions: usize,
    variables: usize,
    diagnostics: Vec<DiagnosticInfo>,
    analysis_time_ms: u64,
}

#[derive(Serialize)]
struct DiagnosticInfo {
    line: usize,
    column: usize,
    severity: String,
    message: String,
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
async fn handle_analyze_code(
    request: AnalyzeRequest,
    _state: AppState,
) -> Result<impl warp::Reply, warp::Rejection> {
    let result = analyze_code_snippet(&request.code, &request.filename).await;
    Ok(warp::reply::json(&result))
}

/// –ê–Ω–∞–ª–∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∫–æ–¥–∞
async fn analyze_code_snippet(code: &str, filename: &Option<String>) -> AnalyzeResponse {
    let start_time = std::time::Instant::now();

    let file_name = filename.as_deref().unwrap_or("snippet.bsl").to_string();

    // –ü–∞—Ä—Å–∏–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
    let mut parser = ParserFactory::create();

    match parser.parse(code) {
        Ok(program) => {
            let type_checker = TypeChecker::new(file_name);
            let (context, diagnostics) = type_checker.check(&program);

            AnalyzeResponse {
                success: true,
                functions: context.functions.len(),
                variables: context.variables.len(),
                diagnostics: diagnostics
                    .iter()
                    .map(|d| DiagnosticInfo {
                        line: d.line,
                        column: d.column,
                        severity: format!("{:?}", d.severity),
                        message: d.message.clone(),
                    })
                    .collect(),
                analysis_time_ms: start_time.elapsed().as_millis() as u64,
            }
        }
        Err(e) => AnalyzeResponse {
            success: false,
            functions: 0,
            variables: 0,
            diagnostics: vec![DiagnosticInfo {
                line: 1,
                column: 1,
                severity: "Error".to_string(),
                message: format!("Parse error: {}", e),
            }],
            analysis_time_ms: start_time.elapsed().as_millis() as u64,
        },
    }
}

// === –ù–û–í–´–ï API ENDPOINTS –î–õ–Ø –ü–û–ò–°–ö–û–í–û–ô –°–ò–°–¢–ï–ú–´ ===

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
async fn handle_advanced_search(
    query: AdvancedSearchQuery,
    state: AppState,
) -> Result<impl warp::Reply, warp::Rejection> {
    println!("üîç API –ø–æ–∏—Å–∫: '{}'", query.query);

    match state.search_engine.search(query).await {
        Ok(results) => {
            println!("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", results.total_count);
            Ok(warp::reply::json(&results))
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {}", e);
            let error = ApiError {
                error: e.to_string(),
                code: 500,
            };
            Ok(warp::reply::json(&error))
        }
    }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
async fn handle_get_suggestions(
    query: SuggestionsQuery,
    state: AppState,
) -> Result<impl warp::Reply, warp::Rejection> {
    let limit = query.limit.unwrap_or(10);

    match state.search_engine.get_suggestions(&query.q).await {
        Ok(suggestions) => {
            let limited_suggestions: Vec<String> = suggestions.into_iter().take(limit).collect();
            let response = SuggestionsResponse {
                query: query.q.clone(),
                count: limited_suggestions.len(),
                suggestions: limited_suggestions,
            };
            Ok(warp::reply::json(&response))
        }
        Err(e) => {
            let error = ApiError {
                error: e.to_string(),
                code: 500,
            };
            Ok(warp::reply::json(&error))
        }
    }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞
async fn handle_get_search_stats(state: AppState) -> Result<impl warp::Reply, warp::Rejection> {
    match state.search_engine.get_statistics().await {
        Ok(stats) => Ok(warp::reply::json(&stats)),
        Err(e) => {
            let error = ApiError {
                error: e.to_string(),
                code: 500,
            };
            Ok(warp::reply::json(&error))
        }
    }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /api/health
async fn handle_health(state: AppState) -> Result<impl warp::Reply, warp::Rejection> {
    let health = state.central.health_check().await;
    let sm = state.central.get_system_metrics().await;
    let response = HealthResponse {
        status: health.status,
        overall_score: health.overall_score,
        metrics: Some(HealthMetrics {
            total_types: sm.total_types,
            platform_types: sm.platform_types,
            configuration_types: sm.configuration_types,
            user_defined_types: sm.user_defined_types,
            average_lsp_response_ms: sm.average_lsp_response_ms,
            average_web_response_ms: sm.average_web_response_ms,
            total_requests: sm.total_requests,
            cache_hit_rate: sm.cache_hit_rate,
        }),
    };
    Ok(warp::reply::json(&response))
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async fn handle_get_categories(state: AppState) -> Result<impl warp::Reply, warp::Rejection> {
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    let categories = vec![
        CategoryInfo {
            name: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏".to_string(),
            path: "Global context/Universal collections".to_string(),
            types_count: 15,
            subcategories: 0,
        },
        CategoryInfo {
            name: "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏".to_string(),
            path: "Catalogs".to_string(),
            types_count: 8,
            subcategories: 2,
        },
        CategoryInfo {
            name: "–î–æ–∫—É–º–µ–Ω—Ç—ã".to_string(),
            path: "Documents".to_string(),
            types_count: 6,
            subcategories: 1,
        },
        CategoryInfo {
            name: "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è".to_string(),
            path: "Enums".to_string(),
            types_count: 4,
            subcategories: 0,
        },
    ];

    let response = CategoriesResponse {
        total_count: categories.len(),
        categories,
    };

    Ok(warp::reply::json(&response))
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async fn handle_index() -> Result<impl warp::Reply, warp::Rejection> {
    let html = generate_index_html();
    Ok(warp::reply::html(html))
}

/// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
fn generate_index_html() -> String {
    r#"
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BSL Type Browser</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: #1e1e1e; 
            color: #d4d4d4; 
            line-height: 1.6;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 40px; }
        .header h1 { color: #569cd6; font-size: 2.5em; margin-bottom: 10px; }
        .header p { color: #9cdcfe; font-size: 1.2em; }
        
        .search-section { margin-bottom: 40px; }
        .search-box { 
            width: 100%; 
            padding: 15px; 
            font-size: 16px; 
            border: 2px solid #3c3c3c; 
            border-radius: 5px; 
            background: #2d2d30; 
            color: #d4d4d4;
        }
        .search-box:focus { outline: none; border-color: #569cd6; }
        
        .results { margin-top: 20px; }
        .type-card { 
            background: #2d2d30; 
            border: 1px solid #3c3c3c; 
            border-radius: 5px; 
            padding: 20px; 
            margin-bottom: 15px;
            transition: background 0.2s;
        }
        .type-card:hover { background: #3c3c3c; }
        .type-name { color: #4ec9b0; font-size: 1.3em; font-weight: bold; }
        .type-category { color: #9cdcfe; font-size: 0.9em; }
        .type-description { color: #d4d4d4; margin-top: 10px; }
        
        .stats-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 20px; 
            margin-bottom: 40px; 
        }
        .stat-card { 
            background: #2d2d30; 
            padding: 20px; 
            border-radius: 5px; 
            text-align: center; 
        }
        .stat-value { color: #4fc1ff; font-size: 2em; font-weight: bold; }
        .stat-label { color: #9cdcfe; }
        
        .code-analysis { margin-top: 40px; }
        .code-input { 
            width: 100%; 
            height: 200px; 
            font-family: 'Consolas', 'Monaco', monospace; 
            background: #1e1e1e; 
            border: 2px solid #3c3c3c; 
            color: #d4d4d4; 
            padding: 15px; 
            border-radius: 5px;
        }
        .analyze-btn { 
            background: #0e639c; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 5px; 
            cursor: pointer; 
            margin-top: 10px;
        }
        .analyze-btn:hover { background: #1177bb; }
        
        .loading { color: #ffcc00; }
        .error { color: #f44747; }
        .success { color: #4fc1ff; }
        
        .progress-section { 
            margin-bottom: 30px; 
            background: #2d2d30; 
            padding: 20px; 
            border-radius: 5px; 
            border: 1px solid #3c3c3c; 
        }
        .progress-bar { 
            width: 100%; 
            height: 20px; 
            background: #1e1e1e; 
            border-radius: 10px; 
            overflow: hidden; 
            margin-top: 10px; 
        }
        .progress-fill { 
            height: 100%; 
            background: linear-gradient(90deg, #0e639c, #4fc1ff); 
            transition: width 0.3s ease; 
            width: 0%; 
        }
        .progress-text { 
            color: #9cdcfe; 
            margin-bottom: 5px; 
        }
        .progress-details { 
            color: #d4d4d4; 
            font-size: 0.9em; 
            margin-top: 10px; 
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ BSL Type Browser</h1>
            <p>Production-ready —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ –¥–ª—è 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ</p>
        </div>
        
        <div class="progress-section" id="progress-section" style="display: none;">
            <div class="progress-text" id="progress-text">üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ 1–°...</div>
            <div class="progress-bar">
                <div class="progress-fill" id="progress-fill"></div>
            </div>
            <div class="progress-details" id="progress-details">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...</div>
        </div>
        
        <div class="stats-grid" id="stats">
            <div class="stat-card">
                <div class="stat-value" id="functions-count">-</div>
                <div class="stat-label">–§—É–Ω–∫—Ü–∏–π</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="variables-count">-</div>
                <div class="stat-label">–ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="platform-types">-</div>
                <div class="stat-label">–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="memory-usage">-</div>
                <div class="stat-label">–ü–∞–º—è—Ç—å (MB)</div>
            </div>
        </div>
        
        <div class="search-section">
            <input type="text" class="search-box" id="search-input" 
                   placeholder="–ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ BSL... (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Å—Å–∏–≤, –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π)">
        </div>
        
        <div class="results" id="results">
            <p style="text-align: center; color: #9cdcfe;">
                üí° –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            </p>
        </div>
        
        <div class="code-analysis">
            <h2>üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</h2>
            <textarea class="code-input" id="code-input" 
                placeholder="–í–≤–µ–¥–∏—Ç–µ BSL –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...&#10;&#10;–ü—Ä–∏–º–µ—Ä:&#10;–§—É–Ω–∫—Ü–∏—è –¢–µ—Å—Ç–æ–≤–∞—è–§—É–Ω–∫—Ü–∏—è(–ø–∞—Ä–∞–º–µ—Ç—Ä)&#10;    –í–æ–∑–≤—Ä–∞—Ç –°—Ç—Ä–æ–∫–∞(–ø–∞—Ä–∞–º–µ—Ç—Ä);&#10;–ö–æ–Ω–µ—Ü–§—É–Ω–∫—Ü–∏–∏"></textarea>
            <button class="analyze-btn" onclick="analyzeCode()">–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥</button>
            <div id="analysis-results"></div>
        </div>
    </div>
    
    <script>
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        loadStats();
        checkLoadingStatus();
        
        // –ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤
        let searchTimeout;
        document.getElementById('search-input').addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                searchTypes(e.target.value);
            }, 300);
        });
        
        async function loadStats() {
            try {
                const response = await fetch('/api/stats');
                const stats = await response.json();
                
                document.getElementById('functions-count').textContent = stats.total_functions || 0;
                document.getElementById('variables-count').textContent = stats.total_variables || 0;
                document.getElementById('platform-types').textContent = stats.platform_types || 0;
                document.getElementById('memory-usage').textContent = (stats.memory_usage_mb || 0).toFixed(1);
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }
        
        async function searchTypes(query) {
            if (!query.trim()) {
                document.getElementById('results').innerHTML = 
                    '<p style="text-align: center; color: #9cdcfe;">üí° –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞</p>';
                return;
            }
            
            document.getElementById('results').innerHTML = '<p class="loading">üîç –ü–æ–∏—Å–∫...</p>';
            
            try {
                const response = await fetch(`/api/types?search=${encodeURIComponent(query)}&per_page=10`);
                const data = await response.json();
                
                if (data.types.length === 0) {
                    document.getElementById('results').innerHTML = 
                        '<p style="text-align: center; color: #ffcc00;">‚ùì –¢–∏–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
                    return;
                }
                
                const html = data.types.map(type => `
                    <div class="type-card">
                        <div class="type-name">${type.name}</div>
                        <div class="type-category">${type.category} ‚Ä¢ ${type.result_type}</div>
                        ${type.description ? `<div class="type-description">${type.description}</div>` : ''}
                    </div>
                `).join('');
                
                document.getElementById('results').innerHTML = html;
                
            } catch (error) {
                document.getElementById('results').innerHTML = 
                    '<p class="error">‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + error.message + '</p>';
            }
        }
        
        let progressInterval;
        
        async function checkLoadingStatus() {
            try {
                const response = await fetch('/api/loading-status');
                const status = await response.json();
                
                const progressSection = document.getElementById('progress-section');
                const progressFill = document.getElementById('progress-fill');
                const progressText = document.getElementById('progress-text');
                const progressDetails = document.getElementById('progress-details');
                
                if (status.is_loading) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progressSection.style.display = 'block';
                    progressFill.style.width = status.progress + '%';
                    progressText.textContent = 'üìä ' + status.current_operation;
                    
                    let details = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${status.processed_files}`;
                    if (status.total_files > 0) {
                        details += ` –∏–∑ ${status.total_files}`;
                    }
                    if (status.errors > 0) {
                        details += ` (–æ—à–∏–±–æ–∫: ${status.errors})`;
                    }
                    progressDetails.textContent = details;
                    
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å
                    if (!progressInterval) {
                        progressInterval = setInterval(checkLoadingStatus, 1000);
                    }
                } else {
                    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progressSection.style.display = 'none';
                    
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                    if (progressInterval) {
                        clearInterval(progressInterval);
                        progressInterval = null;
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    loadStats();
                }
            } catch (error) {
                console.error('Error checking loading status:', error);
                // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
                document.getElementById('progress-section').style.display = 'none';
                if (progressInterval) {
                    clearInterval(progressInterval);
                    progressInterval = null;
                }
            }
        }
        
        async function analyzeCode() {
            const code = document.getElementById('code-input').value;
            const resultsDiv = document.getElementById('analysis-results');
            
            if (!code.trim()) {
                resultsDiv.innerHTML = '<p class="error">‚ùì –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>';
                return;
            }
            
            resultsDiv.innerHTML = '<p class="loading">üîç –ê–Ω–∞–ª–∏–∑...</p>';
            
            try {
                const response = await fetch('/api/analyze', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ code, filename: 'snippet.bsl' })
                });
                
                const result = await response.json();
                
                let html = `<h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ (${result.analysis_time_ms}ms)</h3>`;
                
                if (result.success) {
                    html += `
                        <p class="success">‚úÖ –§—É–Ω–∫—Ü–∏–π: ${result.functions}, –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${result.variables}</p>
                    `;
                } else {
                    html += '<p class="error">‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞</p>';
                }
                
                if (result.diagnostics.length > 0) {
                    html += '<h4>üö® –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:</h4>';
                    result.diagnostics.forEach(diag => {
                        const severity = diag.severity === 'Error' ? 'error' : 'success';
                        html += `<p class="${severity}">[${diag.line}:${diag.column}] ${diag.message}</p>`;
                    });
                }
                
                resultsDiv.innerHTML = html;
                
            } catch (error) {
                resultsDiv.innerHTML = '<p class="error">‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ' + error.message + '</p>';
            }
        }
    </script>
</body>
</html>
    "#.to_string()
}

// –î–æ–±–∞–≤–ª—è–µ–º warp dependency
use warp::Filter;
