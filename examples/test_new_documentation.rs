//! –¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

use anyhow::Result;
use bsl_gradual_types::documentation::core::{DocumentationConfig, PlatformConfig};
use bsl_gradual_types::documentation::BslDocumentationSystem;

#[tokio::main]
async fn main() -> Result<()> {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ BSL...\n");

    // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    let doc_system = BslDocumentationSystem::new();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    let config = DocumentationConfig {
        platform_config: PlatformConfig {
            syntax_helper_path: "examples/syntax_helper/rebuilt.shcntx_ru".to_string(),
            platform_version: "8.3.23".to_string(),
            show_progress: true,
            worker_threads: 4,
        },
        configuration_path: Some("tests/fixtures/xml_full".to_string()), // –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        ..Default::default()
    };

    println!("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    doc_system.initialize(config).await?;

    println!("‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!\n");

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    println!("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...");
    let stats = doc_system.get_statistics().await?;

    println!("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤:");
    println!("   ‚Ä¢ –¢–∏–ø–æ–≤: {}", stats.platform.total_types);
    println!("   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤: {}", stats.platform.total_methods);
    println!("   ‚Ä¢ –°–≤–æ–π—Å—Ç–≤: {}", stats.platform.total_properties);
    println!("   ‚Ä¢ –ü–∞–º—è—Ç—å: {:.1} MB", stats.platform.memory_usage_mb);

    // –ü–æ–ª—É—á–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é
    println!("\nüå≤ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç–∏–ø–æ–≤...");
    let hierarchy = doc_system.get_type_hierarchy().await?;

    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏:");
    println!("   ‚Ä¢ –í—Å–µ–≥–æ —É–∑–ª–æ–≤: {}", hierarchy.statistics.total_nodes);
    println!(
        "   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: {}",
        hierarchy.statistics.max_depth
    );
    println!(
        "   ‚Ä¢ –ö–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}",
        hierarchy.root_categories.len()
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    println!("\nüìÅ –ö–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:");
    for category in &hierarchy.root_categories {
        println!("   üè¢ {} ({})", category.name, category.description);
        println!("      ‚îî‚îÄ –î–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤: {}", category.children.len());
        println!("      ‚îî‚îÄ –¢–∏–ø–æ–≤: {}", category.statistics.child_types_count);
        println!(
            "      ‚îî‚îÄ –ú–µ—Ç–æ–¥–æ–≤: {}",
            category.statistics.total_methods_count
        );
        println!(
            "      ‚îî‚îÄ –°–≤–æ–π—Å—Ç–≤: {}",
            category.statistics.total_properties_count
        );
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç–∏–ø–∞
    println!("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ç–∏–ø–∞ '–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π'...");
    if let Some(type_details) = doc_system.get_type_details("–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π").await?
    {
        println!("‚úÖ –ù–∞–π–¥–µ–Ω —Ç–∏–ø: {}", type_details.russian_name);
        println!("   ‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {}", type_details.english_name);
        println!("   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {}", type_details.description);
        println!("   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤: {}", type_details.methods.len());
        println!("   ‚Ä¢ –°–≤–æ–π—Å—Ç–≤: {}", type_details.properties.len());
        println!("   ‚Ä¢ –§–∞—Å–µ—Ç—ã: {:?}", type_details.available_facets);
        println!("   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞—Å–µ—Ç: {:?}", type_details.active_facet);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤
        if !type_details.methods.is_empty() {
            println!("   üìã –ú–µ—Ç–æ–¥—ã (–ø–µ—Ä–≤—ã–µ 5):");
            for method in type_details.methods.iter().take(5) {
                println!("      üîß {} / {}", method.russian_name, method.english_name);
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        if !type_details.properties.is_empty() {
            println!("   üìä –°–≤–æ–π—Å—Ç–≤–∞:");
            for property in &type_details.properties {
                println!(
                    "      üìã {} / {}",
                    property.russian_name, property.english_name
                );
            }
        }
    } else {
        println!("‚ùå –¢–∏–ø '–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π' –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    println!("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

    Ok(())
}
