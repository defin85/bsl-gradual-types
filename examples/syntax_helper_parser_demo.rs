//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞ 1–°

use bsl_gradual_types::data::loaders::syntax_helper_parser::SyntaxHelperParser;
use std::path::Path;
use tracing::{info, Level};
use tracing_subscriber;

fn main() -> anyhow::Result<()> {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    tracing_subscriber::fmt().with_max_level(Level::INFO).init();

    info!("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞ 1–° ===");

    // –ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º —Å —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞
    let context_path = "examples/syntax_helper/rebuilt.shcntx_ru";
    let lang_path = "examples/syntax_helper/rebuilt.shlang_ru";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if !Path::new(context_path).exists() {
        anyhow::bail!(
            "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {}",
            context_path
        );
    }

    if !Path::new(lang_path).exists() {
        anyhow::bail!("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —è–∑—ã–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {}", lang_path);
    }

    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä
    let mut parser = SyntaxHelperParser::new();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    info!("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏...");
    parser.parse_directory(context_path)?;

    info!("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —è–∑—ã–∫—É...");
    parser.parse_directory(lang_path)?;

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
    let stats = parser.get_stats();

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:");
    println!("  üìÇ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {}", stats.files_parsed);
    println!("  ‚è±Ô∏è –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {:?}", stats.parse_duration);
    println!("  üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤: {}", stats.types_count);
    println!("  üéØ –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {}", stats.methods_count);
    println!("  ‚öôÔ∏è –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤: {}", stats.properties_count);
    println!("  üìë –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}", stats.categories_count);

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    let database = parser.export_database();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–∏–ø–æ–≤
    println!("\nüì¶ –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤:");
    for (name, _node) in database.nodes.iter().take(5) {
        println!("  - {}", name);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –º–µ—Ç–æ–¥–æ–≤
    println!("\nüéØ –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤:");
    for (name, method) in database.methods.iter().take(5) {
        println!("  - {} (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {})", name, method.parameters.len());
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–≤–æ–π—Å—Ç–≤
    println!("\n‚öôÔ∏è –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤:");
    for (name, prop) in database.properties.iter().take(5) {
        println!("  - {} (—Ç–∏–ø: {})", name, prop.property_type);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    println!("\nüìë –ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π:");
    for (name, category) in database.categories.iter().take(5) {
        println!("  - {} ({} —Ç–∏–ø–æ–≤)", name, category.types.len());
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
    let index = parser.export_index();

    println!("\nüîç –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:");
    println!("  - –†—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π: {}", index.by_russian.len());
    println!("  - –ê–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π: {}", index.by_english.len());

    // –ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ —Ç–∏–ø–∞
    if let Some(type_info) = parser.find_type("–ú–∞—Å—Å–∏–≤") {
        println!("\n‚ú® –ù–∞–π–¥–µ–Ω —Ç–∏–ø '–ú–∞—Å—Å–∏–≤':");
        println!("  - –†—É—Å—Å–∫–æ–µ –∏–º—è: {}", type_info.identity.russian_name);
        if let Some(en) = type_info.identity.english_name.as_ref() {
            println!("  - –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è: {}", en);
        }
        println!("  - –ú–µ—Ç–æ–¥–æ–≤: {}", type_info.structure.methods.len());
        println!("  - –°–≤–æ–π—Å—Ç–≤: {}", type_info.structure.properties.len());
    }

    println!("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!");

    Ok(())
}
