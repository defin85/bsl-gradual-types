//! –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞ –≤–µ—Ä—Å–∏–∏ 3
//!
//! –°–æ–∑–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π HTML –æ—Ç—á—ë—Ç —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π —Ç–∏–ø–æ–≤, –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ —Ñ–∞—Å–µ—Ç–∞–º–∏

use anyhow::Result;
use bsl_gradual_types::adapters::syntax_helper_parser::{
    OptimizationSettings, SyntaxHelperParser, SyntaxNode, TypeInfo,
};
use bsl_gradual_types::core::types::FacetKind;
use indicatif::{ProgressBar, ProgressStyle};
use std::fs;
use std::path::Path;

fn main() -> Result<()> {
    println!("üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞ v3...\n");

    // –ü—É—Ç—å –∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º—É —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫—É
    // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π
    let syntax_helper_path = if Path::new("examples/syntax_helper/rebuilt.shcntx_ru").exists() {
        Path::new("examples/syntax_helper/rebuilt.shcntx_ru")
    } else if Path::new("examples/syntax_helper/rebuilt.shlang_ru").exists() {
        Path::new("examples/syntax_helper/rebuilt.shlang_ru")
    } else {
        Path::new("data/syntax_helper/extracted")
    };

    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    let settings = OptimizationSettings {
        show_progress: true,
        ..Default::default()
    };
    let mut parser = SyntaxHelperParser::with_settings(settings);

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    if syntax_helper_path.exists() {
        println!("üìÇ –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑: {}", syntax_helper_path.display());
        parser.parse_directory(syntax_helper_path)?;
    } else {
        println!("‚ö†Ô∏è  –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...");
        create_demo_data(&mut parser)?;
    }

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let stats = collect_statistics(&parser);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    println!("\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á—ë—Ç–∞...");
    let pb = ProgressBar::new(5); // 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
    pb.set_style(
        ProgressStyle::default_bar()
            .template("[{elapsed_precise}] {bar:40.cyan/blue} {pos}/{len} {msg}")?
            .progress_chars("##-"),
    );

    pb.set_message("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
    let mut html = String::new();
    // –ù–∞—á–∞–ª–æ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞
    html.push_str(&generate_html_header());
    html.push_str(&generate_stats_html(&stats));
    pb.inc(1);

    pb.set_message("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Ç–∏–ø–æ–≤");
    html.push_str(&generate_tree_html(&parser));
    pb.inc(1);

    pb.set_message("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ç–∏–ø–æ–≤");
    html.push_str(&generate_types_table_html(&parser));
    pb.inc(1);

    pb.set_message("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö –∏ —Ñ–∞—Å–µ—Ç–∞—Ö");
    html.push_str(&generate_indices_and_facets_html(&parser, &stats));
    pb.inc(1);

    pb.set_message("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ JavaScript –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ");
    html.push_str(&generate_html_footer(&parser));
    pb.inc(1);

    pb.finish_with_message("HTML –æ—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    let output_path = "type_hierarchy_v3_visualization.html";
    fs::write(output_path, html)?;

    println!("\n‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {}", output_path);
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("   ‚Ä¢ –í—Å–µ–≥–æ —É–∑–ª–æ–≤: {}", stats.total_nodes);
    println!("   ‚Ä¢ –¢–∏–ø–æ–≤: {}", stats.types_count);
    println!("   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {}", stats.categories_count);
    println!("   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤: {}", stats.methods_count);
    println!("   ‚Ä¢ –°–≤–æ–π—Å—Ç–≤: {}", stats.properties_count);
    println!("\nüìë –ò–Ω–¥–µ–∫—Å—ã:");
    println!("   ‚Ä¢ –ü–æ —Ä—É—Å—Å–∫–∏–º –∏–º–µ–Ω–∞–º: {}", stats.russian_index_size);
    println!("   ‚Ä¢ –ü–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏–º–µ–Ω–∞–º: {}", stats.english_index_size);
    println!("   ‚Ä¢ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {}", stats.category_index_size);
    println!("   ‚Ä¢ –ü–æ —Ñ–∞—Å–µ—Ç–∞–º: {}", stats.facet_index_size);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    #[cfg(windows)]
    {
        std::process::Command::new("cmd")
            .args(["/C", "start", output_path])
            .spawn()
            .ok();
    }

    Ok(())
}

struct Statistics {
    total_nodes: usize,
    types_count: usize,
    categories_count: usize,
    methods_count: usize,
    properties_count: usize,
    russian_index_size: usize,
    english_index_size: usize,
    category_index_size: usize,
    facet_index_size: usize,
}

fn collect_statistics(parser: &SyntaxHelperParser) -> Statistics {
    let mut stats = Statistics {
        total_nodes: 0,
        types_count: 0,
        categories_count: 0,
        methods_count: 0,
        properties_count: 0,
        russian_index_size: 0,
        english_index_size: 0,
        category_index_size: 0,
        facet_index_size: 0,
    };

    // –ü–æ–¥—Å—á—ë—Ç —É–∑–ª–æ–≤
    let database = parser.export_database();
    let mut global_functions_count = 0;
    for (_, node) in database.nodes.iter() {
        stats.total_nodes += 1;
        match node {
            SyntaxNode::Category(_) => stats.categories_count += 1,
            SyntaxNode::Type(_) => stats.types_count += 1,
            SyntaxNode::Method(_) => stats.methods_count += 1,
            SyntaxNode::Property(_) => stats.properties_count += 1,
            SyntaxNode::GlobalFunction(_) => global_functions_count += 1,
            _ => {}
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    println!("üìä –ù–∞–π–¥–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {}", global_functions_count);

    // –†–∞–∑–º–µ—Ä—ã –∏–Ω–¥–µ–∫—Å–æ–≤
    let index = parser.export_index();
    stats.russian_index_size = index.by_russian.len();
    stats.english_index_size = index.by_english.len();
    stats.category_index_size = index.by_category.len();
    stats.facet_index_size = index.by_facet.len();

    stats
}

fn generate_tree(parser: &SyntaxHelperParser) -> (String, String) {
    use bsl_gradual_types::adapters::syntax_helper_parser::CategoryInfo;
    let mut html = String::new();

    let database = parser.export_database();

    // Discovery-based: –Ω–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞
    // –ö–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —ç—Ç–æ —Ç–µ, —á—Ç–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç "/" –≤ catalog_path –∏–ª–∏ —Ç–æ–ª—å–∫–æ "Global context"
    let mut root_categories: Vec<(&String, &CategoryInfo)> = Vec::new();
    let mut sub_categories: std::collections::HashMap<String, Vec<(&String, &CategoryInfo)>> =
        std::collections::HashMap::new();

    for (catalog_id, cat_info) in &database.categories {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        // –ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: catalog_id –±–µ–∑ "/" –∏–ª–∏ "Global context"
        let is_root = !catalog_id.contains('/') || catalog_id == "Global context";

        if is_root {
            root_categories.push((catalog_id, cat_info));
        } else {
            // –≠—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è - –Ω–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è
            // –ü—Ä–∏–º–µ—Ä: –¥–ª—è "catalog234/catalog236" —Ä–æ–¥–∏—Ç–µ–ª—å - "catalog234"
            if let Some(slash_pos) = catalog_id.rfind('/') {
                let parent_id = &catalog_id[..slash_pos];
                // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–µ—à–∞ –∫–∞–∫ ID —Ä–æ–¥–∏—Ç–µ–ª—è
                let parent_catalog = if parent_id.contains('/') {
                    parent_id.split('/').next_back().unwrap_or(parent_id)
                } else {
                    parent_id
                };
                sub_categories
                    .entry(parent_catalog.to_string())
                    .or_default()
                    .push((catalog_id, cat_info));
            }
        }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏
    root_categories.sort_by(|a, b| a.1.name.cmp(&b.1.name));

    // –°–æ–±–∏—Ä–∞–µ–º —Ç–∏–ø—ã –ø–æ catalog_id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∞ –Ω–µ –ø–æ –∏–º–µ–Ω–∏!
    // –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∏–º–µ–Ω–∞ –º–æ–≥—É—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è
    let mut types_by_catalog_id: std::collections::HashMap<String, Vec<&TypeInfo>> =
        std::collections::HashMap::new();

    for (_, node) in database.nodes.iter() {
        if let SyntaxNode::Type(type_info) = node {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º catalog_id –∏–∑ –ø—É—Ç–∏ —Ç–∏–ø–∞
            // –ü—É—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å:
            // - "objects/catalog234/Array.html" -> catalog234
            // - "objects/catalog234/catalog236/ValueTable.html" -> catalog234/catalog236
            // - "objects/catalog234/catalog236/ValueTableRow.html" -> catalog234/catalog236
            let catalog_id = if type_info.identity.catalog_path.contains("Global context") {
                "Global context".to_string()
            } else {
                let path = &type_info.identity.catalog_path;
                if let Some(objects_pos) = path.find("objects/") {
                    let after_objects = &path[objects_pos + 8..]; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "objects/"

                    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ catalog –≤ –ø—É—Ç–∏
                    let catalog_count = after_objects.matches("catalog").count();

                    if catalog_count == 0 {
                        "unknown".to_string()
                    } else if catalog_count == 1 {
                        // –ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π: objects/catalog234/Array.html
                        if let Some(slash_pos) = after_objects.find('/') {
                            after_objects[..slash_pos].to_string()
                        } else if let Some(dot_pos) = after_objects.find('.') {
                            after_objects[..dot_pos].to_string()
                        } else {
                            after_objects.to_string()
                        }
                    } else {
                        // –°–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π: objects/catalog234/catalog236/ValueTable.html
                        // –ù—É–∂–Ω–æ –≤–∑—è—Ç—å –ø—É—Ç—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ catalog –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
                        let parts: Vec<&str> = after_objects.split('/').collect();
                        let mut catalog_parts = Vec::new();

                        for part in parts {
                            if part.starts_with("catalog") && !part.ends_with(".html") {
                                catalog_parts.push(part);
                            } else if part.starts_with("catalog") && part.ends_with(".html") {
                                // –≠—Ç–æ —Ñ–∞–π–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–µ —Ç–∏–ø–∞
                                let clean_part = part.trim_end_matches(".html");
                                catalog_parts.push(clean_part);
                                break;
                            } else if !catalog_parts.is_empty() {
                                // –ú—ã –Ω–∞—à–ª–∏ –≤—Å–µ catalog —á–∞—Å—Ç–∏
                                break;
                            }
                        }

                        catalog_parts.join("/")
                    }
                } else {
                    "unknown".to_string()
                }
            };

            types_by_catalog_id
                .entry(catalog_id)
                .or_default()
                .push(type_info);
        }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ë–ï–ó –¢–ò–ü–û–í –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
    for (cat_id, cat_info) in root_categories {
        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let type_count = types_by_catalog_id
            .get(cat_id)
            .map(|v| v.len())
            .unwrap_or(0);
        let subcat_count = sub_categories.get(cat_id).map(|v| v.len()).unwrap_or(0);

        // –ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ —Å—á–µ—Ç—á–∏–∫–æ–º –∏ data-–∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        html.push_str(&format!(
            r#"<div class="tree-node root-category" data-category-id="{}" data-category-name="{}">
                <div class="tree-node-header">
                    <span class="icon icon-category">üìÅ</span> {} 
                    <span style="color: #999; font-size: 0.9em;">({} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, {} —Ç–∏–ø–æ–≤)</span>
                </div>
                <div class="tree-children">"#,
            cat_id, cat_info.name, cat_info.name, subcat_count, type_count
        ));

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–ï–ó –∏—Ö —Ç–∏–ø–æ–≤
        if let Some(subcats) = sub_categories.get(cat_id) {
            for (subcat_id, subcat_info) in subcats {
                // –î–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, catalog234/catalog236)
                let subcat_type_count = types_by_catalog_id
                    .get(subcat_id.as_str())
                    .map(|v| v.len())
                    .unwrap_or(0);

                html.push_str(&format!(
                    r#"
                    <div class="tree-node" data-category-id="{}" data-category-name="{}">
                        <div class="tree-node-header">
                            <span class="icon icon-category">üìÇ</span> {} 
                            <span style="color: #999; font-size: 0.9em;">({} —Ç–∏–ø–æ–≤)</span>
                        </div>
                    </div>"#,
                    subcat_id, subcat_info.name, subcat_info.name, subcat_type_count
                ));
            }
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        html.push_str("\n                </div>\n            </div>\n");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if let Some(uncategorized) = types_by_catalog_id.get("unknown") {
        if !uncategorized.is_empty() {
            html.push_str(
                r#"<div class="tree-node">
                <div class="tree-node-header">
                    <span class="icon icon-category">‚ùì</span> –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                </div>
                <div class="tree-children">"#,
            );

            for type_info in uncategorized {
                html.push_str(&format!(
                    r#"<div class="tree-node">
                        <div class="tree-node-header">
                            <span class="icon icon-type">üìÑ</span> {} / {}
                        </div>
                    </div>"#,
                    type_info.identity.russian_name, type_info.identity.english_name
                ));
            }

            html.push_str("</div></div>");
        }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–∏–ø–∞—Ö –¥–ª—è JavaScript
    let mut types_data_json = String::from("const categoryTypes = {\n");

    for (catalog_id, types) in &types_by_catalog_id {
        if !types.is_empty() {
            types_data_json.push_str(&format!("    \"{}\": [\n", catalog_id));
            for type_info in types {
                types_data_json.push_str(&format!(
                    "        {{russian: \"{}\", english: \"{}\", path: \"{}\"}},\n",
                    type_info.identity.russian_name.replace("\"", "\\\""),
                    type_info.identity.english_name.replace("\"", "\\\""),
                    type_info
                        .identity
                        .catalog_path
                        .replace("\\", "/")
                        .replace("\"", "\\\"")
                ));
            }
            types_data_json.push_str("    ],\n");
        }
    }

    types_data_json.push_str("};\n");

    (html, types_data_json)
}

fn generate_global_functions_table(parser: &SyntaxHelperParser) -> String {
    let mut html = String::new();
    let database = parser.export_database();

    // –°–æ–±–∏—Ä–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    let mut categories: std::collections::HashMap<String, Vec<&SyntaxNode>> =
        std::collections::HashMap::new();
    let mut no_category = Vec::new();

    for node in database.nodes.values() {
        if let SyntaxNode::GlobalFunction(func) = node {
            match &func.category {
                Some(cat) => {
                    categories.entry(cat.clone()).or_default().push(node);
                }
                None => {
                    no_category.push(node);
                }
            }
        }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ—É–Ω–∫—Ü–∏–π
    let mut sorted_categories: Vec<_> = categories.into_iter().collect();
    sorted_categories.sort_by(|a, b| b.1.len().cmp(&a.1.len()));

    html.push_str(
        r#"
    <style>
        .category-header {
            background-color: #f0f0f0;
            font-weight: bold;
            padding: 10px;
            cursor: pointer;
        }
        .category-header:hover {
            background-color: #e0e0e0;
        }
        .category-content {
            display: none;
        }
        .category-content.expanded {
            display: table-row-group;
        }
    </style>
    <table>
        <thead>
            <tr>
                <th>–ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏</th>
                <th>–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è</th>
                <th>–ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–∞—è</th>
                <th>–ß–∏—Å—Ç–∞—è</th>
                <th>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</th>
                <th>–ö–æ–Ω—Ç–µ–∫—Å—Ç—ã</th>
            </tr>
        </thead>
        <tbody>"#,
    );

    // –í—ã–≤–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for (idx, (category, functions)) in sorted_categories.iter().enumerate() {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        html.push_str(&format!(
            r#"
            <tr class="category-header" onclick="toggleCategory('cat-{}')">
                <td colspan="6">üìÅ {} ({} —Ñ—É–Ω–∫—Ü–∏–π)</td>
            </tr>
            <tbody id="cat-{}" class="category-content {}">
        "#,
            idx,
            category,
            functions.len(),
            idx,
            if idx < 3 { "expanded" } else { "" }
        ));

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let mut sorted_functions = functions.clone();
        sorted_functions.sort_by(|a, b| {
            if let (SyntaxNode::GlobalFunction(fa), SyntaxNode::GlobalFunction(fb)) = (a, b) {
                fa.name.cmp(&fb.name)
            } else {
                std::cmp::Ordering::Equal
            }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ñ—É–Ω–∫—Ü–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for func_node in sorted_functions.iter().take(20) {
            if let SyntaxNode::GlobalFunction(func) = func_node {
                let english = func.english_name.as_deref().unwrap_or("-");
                let polymorphic = if func.polymorphic { "‚úÖ" } else { "‚ùå" };
                let pure = if func.pure { "‚úÖ" } else { "‚ùå" };
                let params_count = func.parameters.len();
                let contexts = if func.contexts.is_empty() {
                    "–í—Å–µ".to_string()
                } else {
                    format!("{} –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤", func.contexts.len())
                };

                html.push_str(&format!(
                    r#"
                <tr>
                    <td><strong>{}</strong></td>
                    <td>{}</td>
                    <td style="text-align: center">{}</td>
                    <td style="text-align: center">{}</td>
                    <td>{}</td>
                    <td>{}</td>
                </tr>"#,
                    func.name, english, polymorphic, pure, params_count, contexts
                ));
            }
        }

        // –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ 20 —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –µ—â—ë
        if sorted_functions.len() > 20 {
            html.push_str(&format!(
                r#"
                <tr>
                    <td colspan="6" style="text-align: center; font-style: italic">
                        ... –∏ –µ—â—ë {} —Ñ—É–Ω–∫—Ü–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    </td>
                </tr>"#,
                sorted_functions.len() - 20
            ));
        }

        html.push_str("</tbody>");
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let mut total = 0;
    let mut polymorphic_count = 0;
    let mut pure_count = 0;

    for (_, functions) in &sorted_categories {
        for func_node in functions {
            if let SyntaxNode::GlobalFunction(func) = func_node {
                total += 1;
                if func.polymorphic {
                    polymorphic_count += 1;
                }
                if func.pure {
                    pure_count += 1;
                }
            }
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    total += no_category.len();

    html.push_str(&format!(
        r#"
        </tbody>
    </table>
    
    <div style="margin-top: 20px;">
        <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h4>
        <ul>
            <li>–í—Å–µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: <strong>{}</strong></li>
            <li>–ö–∞—Ç–µ–≥–æ—Ä–∏–π: <strong>{}</strong></li>
            <li>–ü–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: <strong>{}</strong></li>
            <li>–ß–∏—Å—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: <strong>{}</strong></li>
        </ul>
    </div>
    
    <script>
    function toggleCategory(id) {{
        var element = document.getElementById(id);
        if (element) {{
            element.classList.toggle('expanded');
        }}
    }}
    </script>"#,
        total,
        sorted_categories.len(),
        polymorphic_count,
        pure_count
    ));

    html
}

fn generate_facets_info(parser: &SyntaxHelperParser) -> String {
    let mut html = String::new();

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∞—Å–µ—Ç–∞–º
    let mut facet_stats: std::collections::HashMap<FacetKind, Vec<String>> =
        std::collections::HashMap::new();

    let database = parser.export_database();
    for (_, node) in database.nodes.iter() {
        if let SyntaxNode::Type(type_info) = node {
            for facet in &type_info.metadata.available_facets {
                facet_stats
                    .entry(*facet)
                    .or_default()
                    .push(type_info.identity.russian_name.clone());
            }
        }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
    for (facet, types) in facet_stats.iter() {
        let (icon, name, description) = match facet {
            FacetKind::Collection => ("üìö", "Collection", "–ö–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ —Ç–∏–ø—ã"),
            FacetKind::Manager => ("üëî", "Manager", "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
            FacetKind::Singleton => ("üîÆ", "Singleton", "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"),
            FacetKind::Constructor => ("üèóÔ∏è", "Constructor", "–ö–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º—ã–µ —Ç–∏–ø—ã"),
            _ => ("üì¶", "Other", "–î—Ä—É–≥–∏–µ —Ç–∏–ø—ã"),
        };

        html.push_str(&format!(
            r#"<div style="margin: 20px 0;">
                <h4>{} {} ({} —Ç–∏–ø–æ–≤)</h4>
                <p style="color: #666;">{}</p>
                <div style="margin-top: 10px;">
                    –ü—Ä–∏–º–µ—Ä—ã: {}</p>
                </div>
            </div>"#,
            icon,
            name,
            types.len(),
            description,
            types
                .iter()
                .take(3)
                .map(|s| s.as_str())
                .collect::<Vec<_>>()
                .join(", ")
        ));
    }

    html
}

fn create_demo_data(parser: &mut SyntaxHelperParser) -> Result<()> {
    // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    use tempfile::TempDir;

    let dir = TempDir::new()?;
    let base = dir.path();

    // –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ-—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    let objects_dir = base.join("objects");
    fs::create_dir(&objects_dir)?;

    // –ö–æ–ª–ª–µ–∫—Ü–∏–∏
    let collections_dir = objects_dir.join("catalog_collections");
    fs::create_dir(&collections_dir)?;

    fs::write(
        collections_dir.join("ValueTable.html"),
        r#"<html>
<h1 class="V8SH_pagetitle">–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π (ValueTable)</h1>
<p>–û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –æ–±—ä–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –æ–±—Ö–æ–¥ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –î–ª—è –∫–∞–∂–¥–æ–≥–æ.</p>
</html>"#,
    )?;

    fs::write(
        collections_dir.join("Array.html"),
        r#"<html>
<h1 class="V8SH_pagetitle">–ú–∞—Å—Å–∏–≤ (Array)</h1>
<p>–£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π. –î–ª—è –æ–±—ä–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –æ–±—Ö–æ–¥ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –î–ª—è –∫–∞–∂–¥–æ–≥–æ.</p>
</html>"#,
    )?;

    fs::write(
        collections_dir.join("Map.html"),
        r#"<html>
<h1 class="V8SH_pagetitle">–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (Map)</h1>
<p>–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ. –î–ª—è –æ–±—ä–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –æ–±—Ö–æ–¥ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –î–ª—è –∫–∞–∂–¥–æ–≥–æ.</p>
</html>"#,
    )?;

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    let globals_dir = objects_dir.join("catalog_globals");
    fs::create_dir(&globals_dir)?;

    fs::write(
        globals_dir.join("XMLWriter.html"),
        r#"<html>
<h1 class="V8SH_pagetitle">–ó–∞–ø–∏—Å—åXML (XMLWriter)</h1>
<p>–û–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ XML –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.</p>
</html>"#,
    )?;

    // –ü–∞—Ä—Å–∏–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    parser.parse_directory(base)?;

    Ok(())
}

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –ø–æ —á–∞—Å—Ç—è–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º

fn generate_html_header() -> String {
    r#"<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BSL Parser V3 - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1600px;
            margin: 0 auto;
        }
        
        /* –®–∞–ø–∫–∞ */
        .header {
            background: white;
            border-radius: 20px;
            padding: 40px;
            margin-bottom: 30px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.2);
        }
        
        .header h1 {
            font-size: 2.5em;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }
        
        .header p {
            color: #666;
            font-size: 1.1em;
        }
        
        /* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: transform 0.3s;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-value {
            font-size: 2.5em;
            font-weight: bold;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .stat-label {
            color: #666;
            margin-top: 5px;
        }
        
        /* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */
        .main-content {
            display: grid;
            grid-template-columns: minmax(400px, 1fr) minmax(600px, 2fr);
            gap: 30px;
        }
        
        .sidebar {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            max-height: calc(100vh - 100px);
            overflow-y: auto;
            min-width: 400px;
        }
        
        .content-area {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            overflow-x: auto;
        }
        
        /* –ü–æ–∏—Å–∫ */
        .search-box {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            margin-bottom: 20px;
        }
        
        .search-box:focus {
            outline: none;
            border-color: #667eea;
        }
        
        /* –î–µ—Ä–µ–≤–æ —Ç–∏–ø–æ–≤ */
        .tree-node {
            margin: 5px 0;
        }
        
        .tree-node-header {
            padding: 10px;
            cursor: pointer;
            border-radius: 6px;
            transition: all 0.2s;
        }
        
        .tree-node-header:hover {
            background: #f5f5f5;
        }
        
        .tree-node-header.selected {
            background: linear-gradient(135deg, #667eea20 0%, #764ba220 100%);
            border-left: 3px solid #667eea;
        }
        
        .tree-children {
            margin-left: 20px;
            display: none;  /* –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
        }
        
        .tree-children.expanded {
            display: block;  /* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ */
        }
        
        /* –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ */
        .icon {
            display: inline-block;
            margin-right: 8px;
        }
        
        .icon-category { color: #667eea; }
        .icon-type { color: #764ba2; }
        .icon-method { color: #28a745; }
        .icon-property { color: #17a2b8; }
        
        /* –í–∫–ª–∞–¥–∫–∏ */
        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 2px solid #e0e0e0;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 8px 8px 0 0;
            transition: all 0.2s;
        }
        
        .tab:hover {
            background: #f5f5f5;
        }
        
        .tab.active {
            background: linear-gradient(135deg, #667eea20 0%, #764ba220 100%);
            border-bottom: 3px solid #667eea;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* –¢–∞–±–ª–∏—Ü—ã */
        table {
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
        }
        
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        
        /* –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç–∏–ø–æ–≤ */
        th:nth-child(1), td:nth-child(1) { width: 25%; }  /* –†—É—Å—Å–∫–æ–µ –∏–º—è */
        th:nth-child(2), td:nth-child(2) { width: 25%; }  /* –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è */
        th:nth-child(3), td:nth-child(3) { width: 30%; }  /* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */
        th:nth-child(4), td:nth-child(4) { width: 20%; }  /* –§–∞—Å–µ—Ç—ã */
        
        th {
            background: #f5f5f5;
            font-weight: 600;
        }
        
        tr:hover {
            background: #f9f9f9;
        }
        
        /* –ë–µ–π–¥–∂–∏ –¥–ª—è —Ñ–∞—Å–µ—Ç–æ–≤ */
        .facet-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.85em;
            margin: 2px;
        }
        
        .facet-collection { background: #e3f2fd; color: #1976d2; }
        .facet-manager { background: #f3e5f5; color: #7b1fa2; }
        .facet-singleton { background: #fff3e0; color: #f57c00; }
        .facet-constructor { background: #e8f5e9; color: #388e3c; }
    </style>
</head>
<body>
    <div class="container">
        <!-- –®–∞–ø–∫–∞ -->
        <div class="header">
            <h1>üöÄ BSL Parser V3 - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è</h1>
            <p>Discovery-based –ø–∞—Ä—Å–µ—Ä —Å –¥–≤—É—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ —Å–∏—Å—Ç–µ–º–æ–π —Ñ–∞—Å–µ—Ç–æ–≤</p>
        </div>"#
        .to_string()
}

fn generate_stats_html(stats: &Statistics) -> String {
    format!(
        r#"
        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value">{}</div>
                <div class="stat-label">–í—Å–µ–≥–æ —É–∑–ª–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{}</div>
                <div class="stat-label">–¢–∏–ø–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{}</div>
                <div class="stat-label">–ö–∞—Ç–µ–≥–æ—Ä–∏–π</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{}</div>
                <div class="stat-label">–†—É—Å—Å–∫–∏—Ö –∏–º—ë–Ω</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{}</div>
                <div class="stat-label">–ê–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∏–º—ë–Ω</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{}</div>
                <div class="stat-label">–§–∞—Å–µ—Ç–æ–≤</div>
            </div>
        </div>
        
        <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
        <div class="main-content">
            <!-- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–µ—Ä–µ–≤–æ–º -->
            <div class="sidebar">
                <h2>üìö –ò–µ—Ä–∞—Ä—Ö–∏—è —Ç–∏–ø–æ–≤</h2>
                <input type="text" class="search-box" placeholder="–ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤..." id="searchBox">
                <div id="tree">"#,
        stats.total_nodes,
        stats.types_count,
        stats.categories_count,
        stats.russian_index_size,
        stats.english_index_size,
        stats.facet_index_size
    )
}

fn generate_tree_html(parser: &SyntaxHelperParser) -> String {
    let mut html = String::new();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤–æ –¥–ª—è –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–∞—Ö
    let (tree_html, _types_data) = generate_tree(parser);
    html.push_str(&tree_html);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º div#tree –∏ div.sidebar, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
    html.push_str(
        r#"
                </div>
            </div>
            
            <!-- –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–µ—Ç–∞–ª—è–º–∏ -->
            <div class="content-area">
                <h2>üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
                
                <!-- –í–∫–ª–∞–¥–∫–∏ -->
                <div class="tabs">
                    <div class="tab active" data-tab="types">–¢–∏–ø—ã</div>
                    <div class="tab" data-tab="indices">–ò–Ω–¥–µ–∫—Å—ã</div>
                    <div class="tab" data-tab="facets">–§–∞—Å–µ—Ç—ã</div>
                    <div class="tab" data-tab="functions">–§—É–Ω–∫—Ü–∏–∏</div>
                </div>
                
                <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ -->
                <div class="tab-content active" id="types">
                    <h3>–°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤</h3>
                    <table style="display: none;">
                        <thead>
                            <tr>
                                <th>–†—É—Å—Å–∫–æ–µ –∏–º—è</th>
                                <th>–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è</th>
                                <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                                <th>–§–∞—Å–µ—Ç—ã</th>
                            </tr>
                        </thead>
                        <tbody>"#,
    );

    html
}

fn generate_types_table_html(_parser: &SyntaxHelperParser) -> String {
    // –í–º–µ—Å—Ç–æ –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    r#"
                        </tbody>
                    </table>
                    <div id="type-details" style="padding: 40px; text-align: center; color: #666;">
                        <p style="font-size: 1.2em;">üëà –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Ç–∏–ø –≤ –¥–µ—Ä–µ–≤–µ —Å–ª–µ–≤–∞</p>
                        <p>–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ</p>
                    </div>
                </div>"#.to_string()
}

fn generate_indices_and_facets_html(parser: &SyntaxHelperParser, stats: &Statistics) -> String {
    let mut html = String::new();

    // –ò–Ω–¥–µ–∫—Å—ã
    html.push_str(&format!(
        r#"
                <div class="tab-content" id="indices">
                    <h3>–ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞</h3>
                    <p>–°–∏—Å—Ç–µ–º–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç O(1) –ø–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:</p>
                    <ul>
                        <li>‚úÖ –ü–æ —Ä—É—Å—Å–∫–∏–º –∏–º–µ–Ω–∞–º: <strong>{} –∑–∞–ø–∏—Å–µ–π</strong></li>
                        <li>‚úÖ –ü–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏–º–µ–Ω–∞–º: <strong>{} –∑–∞–ø–∏—Å–µ–π</strong></li>
                        <li>‚úÖ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: <strong>{} –∫–∞—Ç–µ–≥–æ—Ä–∏–π</strong></li>
                        <li>‚úÖ –ü–æ —Ñ–∞—Å–µ—Ç–∞–º: <strong>{} —Ç–∏–ø–æ–≤ —Ñ–∞—Å–µ—Ç–æ–≤</strong></li>
                    </ul>
                </div>
                
                <div class="tab-content" id="facets">
                    <h3>–°–∏—Å—Ç–µ–º–∞ —Ñ–∞—Å–µ—Ç–æ–≤</h3>
                    <p>–§–∞—Å–µ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞:</p>"#,
        stats.russian_index_size,
        stats.english_index_size,
        stats.category_index_size,
        stats.facet_index_size
    ));

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é generate_facets_info
    html.push_str(&generate_facets_info(parser));

    html.push_str(
        r#"
                </div>
                
                <div class="tab-content" id="functions">
                    <h3>üîß –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</h3>
                    <p>–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ BSL, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω–æ:</p>"#,
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    html.push_str(&generate_global_functions_table(parser));

    html.push_str(
        r#"
                </div>
            </div>
        </div>
    </div>"#,
    );

    html
}

fn generate_html_footer(parser: &SyntaxHelperParser) -> String {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–∞—Ö
    let (_, types_data) = generate_tree(parser);

    let script_content = format!(
        r#"
    <script>
        // –î–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        {}
        
        // –ü–æ–∏—Å–∫
        document.getElementById('searchBox').addEventListener('input', function(e) {{
            const searchTerm = e.target.value.toLowerCase();
            const nodes = document.querySelectorAll('.tree-node');
            
            nodes.forEach(node => {{
                const text = node.textContent.toLowerCase();
                if (searchTerm === '' || text.includes(searchTerm)) {{
                    node.style.display = 'block';
                }} else {{
                    node.style.display = 'none';
                }}
            }});
        }});
        
        // –í–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab').forEach(tab => {{
            tab.addEventListener('click', function() {{
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
                this.classList.add('active');
                const tabId = this.getAttribute('data-tab');
                document.getElementById(tabId).classList.add('active');
            }});
        }});
        
        // –†–∞—Å–∫—Ä—ã—Ç–∏–µ/—Å–∫—Ä—ã—Ç–∏–µ —É–∑–ª–æ–≤ –¥–µ—Ä–µ–≤–∞ –∏ –ø–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π
        document.querySelectorAll('.tree-node-header').forEach(header => {{
            header.addEventListener('click', function() {{
                const children = this.nextElementSibling;
                if (children && children.classList.contains('tree-children')) {{
                    children.classList.toggle('expanded');
                }}
                
                // –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞
                document.querySelectorAll('.tree-node-header').forEach(h => h.classList.remove('selected'));
                this.classList.add('selected');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                const node = this.parentElement;
                const categoryId = node.getAttribute('data-category-id');
                const categoryName = node.getAttribute('data-category-name');
                
                if (categoryId) {{
                    showCategoryDetails(categoryId, categoryName);
                }}
            }});
        }});
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        function showCategoryDetails(categoryId, categoryName) {{
            const detailsDiv = document.getElementById('type-details');
            if (!detailsDiv) return;
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const types = categoryTypes[categoryId] || [];
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ—ë —Ç–∏–ø—ã
            let html = `
                <div style="text-align: left;">
                    <h3>üìÅ ${{categoryName}}</h3>
                    <p><strong>ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</strong> ${{categoryId}}</p>
                    <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤:</strong> ${{types.length}}</p>
            `;
            
            if (types.length > 0) {{
                html += `
                    <h4 style="margin-top: 20px;">–¢–∏–ø—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</h4>
                    <table style="width: 100%; margin-top: 10px;">
                        <thead>
                            <tr>
                                <th style="text-align: left; padding: 8px; border-bottom: 2px solid #e0e0e0;">–†—É—Å—Å–∫–æ–µ –∏–º—è</th>
                                <th style="text-align: left; padding: 8px; border-bottom: 2px solid #e0e0e0;">–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è</th>
                            </tr>
                        </thead>
                        <tbody>
                `;
                
                for (const type of types) {{
                    html += `
                        <tr>
                            <td style="padding: 8px; border-bottom: 1px solid #e0e0e0;">${{type.russian}}</td>
                            <td style="padding: 8px; border-bottom: 1px solid #e0e0e0;">${{type.english}}</td>
                        </tr>
                    `;
                }}
                
                html += `
                        </tbody>
                    </table>
                `;
            }} else {{
                html += `
                    <p style="margin-top: 20px; color: #666;">
                        –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–∏–ø–æ–≤ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
                    </p>
                `;
            }}
            
            html += `</div>`;
            detailsDiv.innerHTML = html;
        }}
    </script>
</body>
</html>"#,
        types_data
    );

    script_content
}
