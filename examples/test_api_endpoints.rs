//! –¢–µ—Å—Ç REST API endpoints –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã

use anyhow::Result;
use serde_json::json;

#[tokio::main]
async fn main() -> Result<()> {
    println!("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST API endpoints");

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å)
    println!("üìã –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä:");
    println!("   cargo run --bin bsl-web-server --port 8080");
    println!();

    // –ü—Ä–∏–º–µ—Ä—ã curl –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
    println!("üîß –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API:");
    println!();

    // 1. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
    println!("1Ô∏è‚É£ POST /api/v1/search - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫:");
    let search_payload = json!({
        "query": "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π",
        "filters": {
            "source_types": [],
            "categories": [],
            "facets": [],
            "availability": [],
            "version_range": null,
            "include_methods": true,
            "include_properties": true,
            "include_examples": false
        },
        "sort": {
            "field": "Relevance",
            "direction": "Descending",
            "secondary": null
        },
        "pagination": {
            "page_size": 10,
            "page_number": 0,
            "max_results": null
        },
        "options": {
            "fuzzy_search": true,
            "include_synonyms": true,
            "search_in_examples": false,
            "min_score": 0.5,
            "highlight_matches": true
        }
    });

    println!("curl -X POST http://localhost:8080/api/v1/search \\");
    println!("  -H \"Content-Type: application/json\" \\");
    println!("  -d '{}'", search_payload.to_string());
    println!();

    // 2. –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    println!("2Ô∏è‚É£ GET /api/v1/suggestions - –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:");
    println!("curl \"http://localhost:8080/api/v1/suggestions?q=–¢–∞–±–ª–∏&limit=5\"");
    println!();

    // 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
    println!("3Ô∏è‚É£ GET /api/v1/search-stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:");
    println!("curl \"http://localhost:8080/api/v1/search-stats\"");
    println!();

    // 4. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    println!("4Ô∏è‚É£ GET /api/v1/categories - –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:");
    println!("curl \"http://localhost:8080/api/v1/categories\"");
    println!();

    // 5. Legacy –ø–æ–∏—Å–∫ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    println!("5Ô∏è‚É£ GET /api/types - Legacy –ø–æ–∏—Å–∫ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å):");
    println!("curl \"http://localhost:8080/api/types?search=–¢–∞–±–ª–∏—Ü–∞&page=0&per_page=10\"");
    println!();

    println!("üéØ –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ API:");
    println!();

    // –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –ø–æ–∏—Å–∫–∞
    println!("üìä –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ /api/v1/search:");
    let sample_search_response = json!({
        "items": [
            {
                "type_id": "platform_123",
                "display_name": "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π",
                "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
                "category": "Global context/Universal collections",
                "source_type": {"Platform": {"version": "8.3"}},
                "relevance_score": 1.0,
                "highlights": [
                    {
                        "field": "content",
                        "highlighted_text": "<mark>–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π</mark> —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è"
                    }
                ],
                "breadcrumb": ["Global context", "Universal collections"]
            }
        ],
        "total_count": 1,
        "facets": [
            {
                "name": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                "values": [
                    {"value": "Global context/Universal collections", "count": 15, "selected": false}
                ]
            }
        ],
        "search_time_ms": 25,
        "suggestions": ["–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "–°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π"],
        "related_queries": ["–°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π", "–î–µ—Ä–µ–≤–æ–ó–Ω–∞—á–µ–Ω–∏–π"],
        "pagination_info": {
            "current_page": 0,
            "total_pages": 1,
            "has_next": false,
            "has_previous": false,
            "page_size": 10
        }
    });
    println!("{}", serde_json::to_string_pretty(&sample_search_response)?);
    println!();

    // –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    println!("üí° –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ /api/v1/suggestions:");
    let sample_suggestions_response = json!({
        "suggestions": ["–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π–ö–æ–ª–æ–Ω–∫–∞", "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π–°—Ç—Ä–æ–∫–∞"],
        "query": "–¢–∞–±–ª–∏",
        "count": 3
    });
    println!(
        "{}",
        serde_json::to_string_pretty(&sample_suggestions_response)?
    );

    println!("\nüéâ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API endpoints –≥–æ—Ç–æ–≤–∞!");
    println!("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API");

    Ok(())
}
