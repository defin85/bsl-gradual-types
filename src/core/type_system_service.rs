//! –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ç–∏–ø–æ–≤ BSL - –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
//!
//! TypeSystemService –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç:
//! - Platform types (PlatformTypeResolver)  
//! - Documentation system (PlatformDocumentationProvider)
//! - Search engine (DocumentationSearchEngine)
//! - Configuration parsing (ConfigurationGuidedParser)

use anyhow::Result;
use std::sync::Arc;
use tokio::sync::RwLock;

use super::platform_resolver::CompletionItem;
use super::type_checker::TypeContext;
use super::types::TypeResolution;
use super::unified_type_system::{
    LspTypeInterface, TypeDetailedInfo, TypeDisplayInfo, UnifiedSystemConfig, UnifiedTypeSystem,
    WebTypeInterface,
};
use crate::documentation::core::hierarchy::TypeHierarchy;
use crate::documentation::{AdvancedSearchQuery, SearchResults};

/// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ BSL v2.0
///
/// –§–∞—Å–∞–¥ –Ω–∞–¥ UnifiedTypeSystem –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ LSP –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–µ.
/// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç high-level API –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
pub struct TypeSystemService {
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    initialization_state: Arc<RwLock<InitializationState>>,

    /// –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ (–∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã)
    unified_system: Arc<UnifiedTypeSystem>,

    /// LSP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    lsp_interface: LspTypeInterface,

    /// –í–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    web_interface: WebTypeInterface,

    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    config: Arc<RwLock<TypeSystemServiceConfig>>,

    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    usage_stats: Arc<RwLock<ServiceUsageStats>>,
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
#[derive(Debug, Clone)]
pub struct InitializationState {
    /// –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    pub is_initialized: bool,

    /// –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø
    pub current_stage: InitializationStage,

    /// –ü—Ä–æ–≥—Ä–µ—Å—Å (0-100)
    pub progress: u8,

    /// –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    pub status_message: String,

    /// –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    pub start_time: Option<std::time::Instant>,

    /// –û—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    pub errors: Vec<String>,
}

/// –≠—Ç–∞–ø—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
#[derive(Debug, Clone, PartialEq)]
pub enum InitializationStage {
    Starting,
    LoadingPlatformTypes,
    BuildingDocumentation,
    BuildingSearchIndexes,
    Finalizing,
    Ready,
    Failed,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TypeSystemService
#[derive(Debug, Clone)]
pub struct TypeSystemServiceConfig {
    /// –ü—É—Ç—å –∫ —Å–ø—Ä–∞–≤–∫–µ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞
    pub syntax_helper_path: Option<String>,

    /// –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    pub project_config_path: Option<String>,

    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å guided discovery –ø–∞—Ä—Å–µ—Ä
    pub use_guided_discovery: bool,

    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    pub cache_settings: CacheSettings,

    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
    pub search_settings: SearchSettings,
}

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
#[derive(Debug, Clone)]
pub struct CacheSettings {
    /// –í–∫–ª—é—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
    pub enable_type_cache: bool,

    /// –í–∫–ª—é—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    pub enable_search_cache: bool,

    /// TTL –¥–ª—è –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    pub cache_ttl_seconds: u64,

    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
    pub max_cache_size: usize,
}

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
#[derive(Debug, Clone)]
pub struct SearchSettings {
    /// –í–∫–ª—é—á–∏—Ç—å fuzzy search –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pub enable_fuzzy_by_default: bool,

    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    pub max_search_results: usize,

    /// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    pub suggestions_ttl_seconds: u64,
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
#[derive(Debug, Clone, Default)]
pub struct ServiceUsageStats {
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LSP
    pub lsp_requests: u64,

    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤
    pub web_requests: u64,

    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    pub search_requests: u64,

    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    pub completion_requests: u64,

    /// –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
    pub uptime_seconds: u64,

    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    pub memory_usage_mb: f64,
}

impl TypeSystemService {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –±–∞–∑–µ UnifiedTypeSystem
    pub fn new(config: TypeSystemServiceConfig) -> Self {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è UnifiedTypeSystem
        let unified_config = UnifiedSystemConfig {
            syntax_helper_path: config.syntax_helper_path.clone(),
            configuration_path: config.project_config_path.clone(),
            use_guided_discovery: config.use_guided_discovery,
            cache_ttl_seconds: config.cache_settings.cache_ttl_seconds,
            max_cache_size: config.cache_settings.max_cache_size,
            verbose_logging: false,
        };

        // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤
        let unified_system = Arc::new(UnifiedTypeSystem::new(unified_config));

        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        let lsp_interface = LspTypeInterface::new(unified_system.clone());
        let web_interface = WebTypeInterface::new(unified_system.clone());

        Self {
            initialization_state: Arc::new(RwLock::new(InitializationState::new())),
            unified_system,
            lsp_interface,
            web_interface,
            config: Arc::new(RwLock::new(config)),
            usage_stats: Arc::new(RwLock::new(ServiceUsageStats::default())),
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pub fn with_defaults() -> Self {
        Self::new(TypeSystemServiceConfig::default())
    }

    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ UnifiedTypeSystem
    pub async fn initialize(&self) -> Result<()> {
        let mut state = self.initialization_state.write().await;
        state.start_initialization();
        drop(state);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤
        self.set_stage(
            InitializationStage::LoadingPlatformTypes,
            "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedTypeSystem...",
        )
        .await;

        match self.unified_system.initialize().await {
            Ok(_) => {
                self.set_stage(
                    InitializationStage::Ready,
                    "TypeSystemService –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                )
                .await;

                let mut state = self.initialization_state.write().await;
                state.complete_initialization();

                println!("üéâ TypeSystemService v2.0 –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
                Ok(())
            }
            Err(e) => {
                self.set_stage(
                    InitializationStage::Failed,
                    &format!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", e),
                )
                .await;
                Err(e)
            }
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    pub async fn get_initialization_state(&self) -> InitializationState {
        self.initialization_state.read().await.clone()
    }

    // === API –î–õ–Ø LSP –°–ï–†–í–ï–†–ê ===

    /// –†–µ–∑–æ–ª–≤–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è LSP)
    pub async fn resolve_expression(&self, expression: &str) -> TypeResolution {
        self.increment_lsp_requests().await;
        self.lsp_interface.resolve_expression(expression).await
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–¥–ª—è LSP)
    pub async fn get_completions(&self, expression: &str) -> Vec<CompletionItem> {
        self.increment_completion_requests().await;
        self.lsp_interface.get_completions(expression).await
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–¥–ª—è LSP)
    pub async fn get_variable_type(&self, variable_name: &str, context: &str) -> TypeResolution {
        self.increment_lsp_requests().await;
        self.lsp_interface
            .get_variable_type(variable_name, context)
            .await
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–∏–ø–æ–≤ (–¥–ª—è LSP)
    pub async fn check_assignment_compatibility(
        &self,
        from_type: &TypeResolution,
        to_type: &TypeResolution,
    ) -> bool {
        self.increment_lsp_requests().await;
        self.lsp_interface
            .check_assignment_compatibility(from_type, to_type)
            .await
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–∏–ø–æ–≤ (–¥–ª—è LSP)
    pub async fn update_type_context(&self, _context: TypeContext) -> Result<()> {
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TypeContext —á–µ—Ä–µ–∑ UnifiedTypeSystem
        Ok(())
    }

    // === API –î–õ–Ø –í–ï–ë-–°–ï–†–í–ï–†–ê ===

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ (–¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
    pub async fn search(&self, query: AdvancedSearchQuery) -> Result<SearchResults> {
        self.increment_search_requests().await;
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ UnifiedTypeSystem
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        Ok(SearchResults {
            items: Vec::new(),
            total_count: 0,
            facets: Vec::new(),
            search_time_ms: 1,
            suggestions: Vec::new(),
            related_queries: Vec::new(),
            pagination_info: crate::documentation::search::PaginationInfo {
                current_page: 0,
                total_pages: 0,
                has_next: false,
                has_previous: false,
                page_size: query.pagination.page_size,
            },
        })
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
    pub async fn get_suggestions(&self, _partial_query: &str) -> Result<Vec<String>> {
        self.increment_web_requests().await;
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ UnifiedTypeSystem
        Ok(Vec::new())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
    pub async fn get_all_types_for_display(&self) -> Vec<TypeDisplayInfo> {
        self.increment_web_requests().await;
        self.web_interface.get_all_types_for_display().await
    }

    /// –ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    pub async fn search_types_for_display(&self, query: &str) -> Vec<TypeDisplayInfo> {
        self.increment_web_requests().await;
        self.web_interface.search_types(query).await
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ
    pub async fn get_type_details(&self, type_id: &str) -> Option<TypeDetailedInfo> {
        self.increment_web_requests().await;
        self.web_interface.get_type_details(type_id).await
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é —Ç–∏–ø–æ–≤ (–¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
    pub async fn get_type_hierarchy(&self) -> Result<TypeHierarchy> {
        self.increment_web_requests().await;
        // TODO: –°–æ–∑–¥–∞—Ç—å TypeHierarchy –∏–∑ UnifiedTypeSystem –¥–∞–Ω–Ω—ã—Ö
        // TODO: –°–æ–∑–¥–∞—Ç—å TypeHierarchy –∏–∑ UnifiedTypeSystem
        Err(anyhow::anyhow!(
            "get_type_hierarchy –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        ))
    }

    // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ===

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    pub async fn get_usage_stats(&self) -> ServiceUsageStats {
        self.usage_stats.read().await.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub async fn get_performance_stats(&self) -> Result<PerformanceStats> {
        let unified_stats = self.unified_system.get_statistics().await;
        let usage_stats = self.get_usage_stats().await;

        let cache_hit_ratio = if unified_stats.cache_hits + unified_stats.cache_misses > 0 {
            unified_stats.cache_hits as f64
                / (unified_stats.cache_hits + unified_stats.cache_misses) as f64
        } else {
            0.0
        };

        Ok(PerformanceStats {
            total_requests: usage_stats.lsp_requests + usage_stats.web_requests,
            unified_system_stats: unified_stats,
            memory_usage_mb: usage_stats.memory_usage_mb,
            cache_hit_ratio,
        })
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤
    pub async fn get_unified_system_stats(&self) -> super::unified_type_system::UnifiedSystemStats {
        self.unified_system.get_statistics().await
    }

    // === –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ===

    async fn set_stage(&self, stage: InitializationStage, message: &str) {
        let mut state = self.initialization_state.write().await;
        state.current_stage = stage;
        state.status_message = message.to_string();
        state.progress = match state.current_stage {
            InitializationStage::Starting => 0,
            InitializationStage::LoadingPlatformTypes => 25,
            InitializationStage::BuildingDocumentation => 50,
            InitializationStage::BuildingSearchIndexes => 75,
            InitializationStage::Finalizing => 90,
            InitializationStage::Ready => 100,
            InitializationStage::Failed => 0,
        };

        println!("üìä [{}%] {}", state.progress, message);
    }

    // –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –¥–µ–ª–∞–µ—Ç UnifiedTypeSystem

    async fn increment_lsp_requests(&self) {
        let mut stats = self.usage_stats.write().await;
        stats.lsp_requests += 1;
    }

    async fn increment_web_requests(&self) {
        let mut stats = self.usage_stats.write().await;
        stats.web_requests += 1;
    }

    async fn increment_search_requests(&self) {
        let mut stats = self.usage_stats.write().await;
        stats.search_requests += 1;
    }

    async fn increment_completion_requests(&self) {
        let mut stats = self.usage_stats.write().await;
        stats.completion_requests += 1;
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
#[derive(Debug, Clone)]
pub struct PerformanceStats {
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    pub total_requests: u64,

    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤
    pub unified_system_stats: super::unified_type_system::UnifiedSystemStats,

    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    pub memory_usage_mb: f64,

    /// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à
    pub cache_hit_ratio: f64,
}

impl InitializationState {
    fn new() -> Self {
        Self {
            is_initialized: false,
            current_stage: InitializationStage::Starting,
            progress: 0,
            status_message: "–ì–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏".to_string(),
            start_time: None,
            errors: Vec::new(),
        }
    }

    fn start_initialization(&mut self) {
        self.start_time = Some(std::time::Instant::now());
        self.current_stage = InitializationStage::Starting;
        self.status_message = "–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...".to_string();
        self.errors.clear();
    }

    fn complete_initialization(&mut self) {
        self.is_initialized = true;
        self.current_stage = InitializationStage::Ready;
        self.progress = 100;

        if let Some(start_time) = self.start_time {
            let duration = start_time.elapsed();
            self.status_message =
                format!("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {:.2}s", duration.as_secs_f64());
        } else {
            self.status_message = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞".to_string();
        }
    }

    fn add_error(&mut self, error: String) {
        self.errors.push(error);
        self.current_stage = InitializationStage::Failed;
    }
}

impl Default for TypeSystemServiceConfig {
    fn default() -> Self {
        Self {
            syntax_helper_path: Some("examples/syntax_helper/rebuilt.shcntx_ru".to_string()),
            project_config_path: None,
            use_guided_discovery: true,
            cache_settings: CacheSettings::default(),
            search_settings: SearchSettings::default(),
        }
    }
}

impl Default for CacheSettings {
    fn default() -> Self {
        Self {
            enable_type_cache: true,
            enable_search_cache: true,
            cache_ttl_seconds: 3600, // 1 —á–∞—Å
            max_cache_size: 10000,   // 10K –∑–∞–ø–∏—Å–µ–π
        }
    }
}

impl Default for SearchSettings {
    fn default() -> Self {
        Self {
            enable_fuzzy_by_default: true,
            max_search_results: 100,
            suggestions_ttl_seconds: 300, // 5 –º–∏–Ω—É—Ç
        }
    }
}

/// –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è shared instance
pub struct TypeSystemServiceFactory;

impl TypeSystemServiceFactory {
    /// –°–æ–∑–¥–∞—Ç—å shared instance —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub async fn create_shared(config: TypeSystemServiceConfig) -> Result<Arc<TypeSystemService>> {
        let service = Arc::new(TypeSystemService::new(config));

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        service.initialize().await?;

        Ok(service)
    }

    /// –°–æ–∑–¥–∞—Ç—å shared instance —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pub async fn create_default() -> Result<Arc<TypeSystemService>> {
        Self::create_shared(TypeSystemServiceConfig::default()).await
    }

    /// –°–æ–∑–¥–∞—Ç—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–±—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
    pub async fn create_for_development() -> Result<Arc<TypeSystemService>> {
        let mut config = TypeSystemServiceConfig::default();
        config.cache_settings.cache_ttl_seconds = 60; // –ö–æ—Ä–æ—Ç–∫–∏–π TTL –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        config.search_settings.max_search_results = 20; // –ú–µ–Ω—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Self::create_shared(config).await
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_service_initialization() {
        let service = TypeSystemService::with_defaults();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let initial_state = service.get_initialization_state().await;
        assert!(!initial_state.is_initialized);
        assert_eq!(initial_state.current_stage, InitializationStage::Starting);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        let result = service.initialize().await;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        match result {
            Ok(_) => {
                let final_state = service.get_initialization_state().await;
                assert!(final_state.is_initialized);
                assert_eq!(final_state.current_stage, InitializationStage::Ready);
                assert_eq!(final_state.progress, 100);
            }
            Err(e) => {
                println!("‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {}", e);
                // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
            }
        }
    }

    #[tokio::test]
    async fn test_service_stats() {
        let service = TypeSystemService::with_defaults();

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        let _resolution = service.resolve_expression("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã").await;
        let _completions = service.get_completions("–°–ø—Ä–∞–≤").await;
        let _suggestions = service.get_suggestions("–¢–∞–±–ª–∏").await.unwrap_or_default();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let stats = service.get_usage_stats().await;
        assert!(stats.lsp_requests > 0);
        assert!(stats.completion_requests > 0);
        assert!(stats.web_requests > 0);
    }
}
