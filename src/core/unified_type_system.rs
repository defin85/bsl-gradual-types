//! –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ BSL - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
//!
//! TypeResolution –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –æ —Ç–∏–ø–∞—Ö.
//! –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (LSP, –≤–µ–±, –ø–æ–∏—Å–∫) - —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
//! –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ TypeResolution –æ–±—ä–µ–∫—Ç–æ–≤.

use anyhow::Result;
use std::collections::HashMap;
use std::sync::Arc;
use tokio::sync::RwLock;

use super::platform_resolver::{CompletionItem, PlatformTypeResolver};
use super::types::{
    Certainty, ConcreteType, FacetKind, ResolutionResult, ResolutionSource, TypeResolution,
};
use crate::data::loaders::config_parser_guided_discovery::ConfigurationGuidedParser;

/// –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ BSL
///
/// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–∏–ø–∞–º–∏.
/// TypeResolution —è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏—Å—Ç–∏–Ω—ã.
pub struct UnifiedTypeSystem {
    /// –û—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–∏–ø–æ–≤ (–∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã)
    type_resolutions: Arc<RwLock<HashMap<String, TypeResolution>>>,

    /// –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã (–∏–∑ syntax helper)
    platform_resolver: Arc<RwLock<PlatformTypeResolver>>,

    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã (–∏–∑ XML)
    configuration_parser: Arc<RwLock<Option<ConfigurationGuidedParser>>>,

    /// –ö–µ—à –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    resolution_cache: Arc<RwLock<HashMap<String, CachedResolution>>>,

    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    statistics: Arc<RwLock<UnifiedSystemStats>>,

    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    config: UnifiedSystemConfig,
}

/// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∏–ø–∞
#[derive(Debug, Clone)]
pub struct CachedResolution {
    /// –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∏–ø–∞
    pub resolution: TypeResolution,

    /// –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    pub created_at: std::time::Instant,

    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    pub usage_count: u64,

    /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    pub last_used: std::time::Instant,
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤
#[derive(Debug, Clone, Default)]
pub struct UnifiedSystemStats {
    /// –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
    pub platform_types_count: usize,

    /// –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã
    pub configuration_types_count: usize,

    /// –í—Å–µ–≥–æ TypeResolution –≤ —Å–∏—Å—Ç–µ–º–µ
    pub total_resolutions: usize,

    /// –ó–∞–ø—Ä–æ—Å—ã –∫ —Å–∏—Å—Ç–µ–º–µ
    pub resolution_requests: u64,

    /// –ü–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫–µ—à
    pub cache_hits: u64,

    /// –ü—Ä–æ–º–∞—Ö–∏ –∫–µ—à–∞
    pub cache_misses: u64,

    /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    pub last_updated: Option<std::time::Instant>,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
#[derive(Debug, Clone)]
pub struct UnifiedSystemConfig {
    /// –ü—É—Ç—å –∫ —Å–ø—Ä–∞–≤–∫–µ —Å–∏–Ω—Ç–∞–∫—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞
    pub syntax_helper_path: Option<String>,

    /// –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    pub configuration_path: Option<String>,

    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å guided discovery
    pub use_guided_discovery: bool,

    /// TTL –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    pub cache_ttl_seconds: u64,

    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
    pub max_cache_size: usize,

    /// –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    pub verbose_logging: bool,
}

impl UnifiedTypeSystem {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤
    pub fn new(config: UnifiedSystemConfig) -> Self {
        Self {
            type_resolutions: Arc::new(RwLock::new(HashMap::new())),
            platform_resolver: Arc::new(RwLock::new(PlatformTypeResolver::new())),
            configuration_parser: Arc::new(RwLock::new(None)),
            resolution_cache: Arc::new(RwLock::new(HashMap::new())),
            statistics: Arc::new(RwLock::new(UnifiedSystemStats::default())),
            config,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pub fn with_defaults() -> Self {
        Self::new(UnifiedSystemConfig::default())
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤
    pub async fn initialize(&self) -> Result<()> {
        println!("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤...");

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
        self.load_platform_types().await?;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã
        if let Some(config_path) = &self.config.configuration_path {
            self.load_configuration_types(config_path).await?;
        }

        // –°—Ç—Ä–æ–∏–º –µ–¥–∏–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–∏–ø–æ–≤
        self.build_unified_index().await?;

        println!("üéâ –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
        self.print_statistics().await;

        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    pub async fn get_statistics(&self) -> UnifiedSystemStats {
        self.statistics.read().await.clone()
    }

    // === CORE API - –†–ê–ó–†–ï–®–ï–ù–ò–ï –¢–ò–ü–û–í ===

    /// –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ TypeResolution (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
    pub async fn resolve_expression(&self, expression: &str) -> TypeResolution {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if let Some(cached) = self.get_from_cache(expression).await {
            self.increment_cache_hits().await;
            return cached.resolution;
        }

        self.increment_cache_misses().await;
        self.increment_resolution_requests().await;

        // –†–∞–∑—Ä–µ—à–∞–µ–º —á–µ—Ä–µ–∑ platform resolver
        let mut platform_resolver = self.platform_resolver.write().await;
        let resolution = platform_resolver.resolve_expression(expression);

        // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.cache_resolution(expression, &resolution).await;

        resolution
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –∫–∞–∫ TypeResolution (–¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    pub async fn get_all_type_resolutions(&self) -> Vec<(String, TypeResolution)> {
        let resolutions = self.type_resolutions.read().await;
        resolutions
            .iter()
            .map(|(k, v)| (k.clone(), v.clone()))
            .collect()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    pub async fn get_completions(&self, expression: &str) -> Vec<CompletionItem> {
        self.increment_resolution_requests().await;

        let platform_resolver = self.platform_resolver.write().await;
        platform_resolver.get_completions(expression)
    }

    /// –ù–∞–π—Ç–∏ —Ç–∏–ø—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É (–¥–ª—è –ø–æ–∏—Å–∫–∞)
    pub async fn find_types_by_pattern(&self, pattern: &str) -> Vec<TypeResolution> {
        let resolutions = self.type_resolutions.read().await;

        resolutions
            .iter()
            .filter(|(name, _)| name.to_lowercase().contains(&pattern.to_lowercase()))
            .map(|(_, resolution)| resolution.clone())
            .collect()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å TypeResolution –ø–æ ID
    pub async fn get_type_by_id(&self, type_id: &str) -> Option<TypeResolution> {
        let resolutions = self.type_resolutions.read().await;
        resolutions.get(type_id).cloned()
    }

    // === –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ===

    async fn load_platform_types(&self) -> Result<()> {
        // PlatformTypeResolver —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
        // –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ —Ç–∏–ø—ã
        let platform_resolver = self.platform_resolver.read().await;
        let platform_count = platform_resolver.get_platform_globals_count();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let mut stats = self.statistics.write().await;
        stats.platform_types_count = platform_count;
        stats.total_resolutions = platform_count;

        println!("‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {} –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤", platform_count);
        Ok(())
    }

    async fn load_configuration_types(&self, config_path: &str) -> Result<()> {
        println!("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∏–∑: {}", config_path);

        let mut guided_parser = ConfigurationGuidedParser::new(config_path);
        let config_resolutions = guided_parser.parse_with_configuration_guide()?;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        let mut resolutions = self.type_resolutions.write().await;

        for config_resolution in config_resolutions {
            if let ResolutionResult::Concrete(ConcreteType::Configuration(config)) =
                &config_resolution.result
            {
                let key = format!("{:?}.{}", config.kind, config.name);
                resolutions.insert(key, config_resolution);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let mut stats = self.statistics.write().await;
        stats.configuration_types_count = resolutions.len() - stats.platform_types_count;
        stats.total_resolutions = resolutions.len();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        *self.configuration_parser.write().await = Some(guided_parser);

        println!(
            "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤",
            stats.configuration_types_count
        );
        Ok(())
    }

    async fn build_unified_index(&self) -> Result<()> {
        println!("üîç –°—Ç—Ä–æ–∏–º –µ–¥–∏–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–∏–ø–æ–≤...");

        let resolutions = self.type_resolutions.read().await;

        // –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        // TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–º —Ñ–∞—Å–µ—Ç–∞–º –∏ —Ç.–¥.

        println!("‚úÖ –ï–¥–∏–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {} —Ç–∏–ø–æ–≤", resolutions.len());
        Ok(())
    }

    async fn get_from_cache(&self, expression: &str) -> Option<CachedResolution> {
        let cache = self.resolution_cache.read().await;

        if let Some(cached) = cache.get(expression) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
            if cached.created_at.elapsed().as_secs() < self.config.cache_ttl_seconds {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                return Some(cached.clone());
            }
        }

        None
    }

    async fn cache_resolution(&self, expression: &str, resolution: &TypeResolution) {
        let mut cache = self.resolution_cache.write().await;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
        if cache.len() >= self.config.max_cache_size {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–ø—Ä–æ—Å—Ç–∞—è LRU)
            let oldest_key = cache
                .iter()
                .min_by_key(|(_, cached)| cached.last_used)
                .map(|(k, _)| k.clone());

            if let Some(key) = oldest_key {
                cache.remove(&key);
            }
        }

        cache.insert(
            expression.to_string(),
            CachedResolution {
                resolution: resolution.clone(),
                created_at: std::time::Instant::now(),
                usage_count: 1,
                last_used: std::time::Instant::now(),
            },
        );
    }

    async fn increment_resolution_requests(&self) {
        let mut stats = self.statistics.write().await;
        stats.resolution_requests += 1;
    }

    async fn increment_cache_hits(&self) {
        let mut stats = self.statistics.write().await;
        stats.cache_hits += 1;
    }

    async fn increment_cache_misses(&self) {
        let mut stats = self.statistics.write().await;
        stats.cache_misses += 1;
    }

    async fn print_statistics(&self) {
        let stats = self.statistics.read().await;
        println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤:");
        println!("  - –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã: {}", stats.platform_types_count);
        println!(
            "  - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã: {}",
            stats.configuration_types_count
        );
        println!("  - –í—Å–µ–≥–æ TypeResolution: {}", stats.total_resolutions);
        println!("  - –ó–∞–ø—Ä–æ—Å—ã: {}", stats.resolution_requests);

        if stats.cache_hits + stats.cache_misses > 0 {
            let hit_ratio =
                stats.cache_hits as f64 / (stats.cache_hits + stats.cache_misses) as f64;
            println!("  - Cache hit ratio: {:.2}", hit_ratio);
        }
    }
}

impl Default for UnifiedSystemConfig {
    fn default() -> Self {
        Self {
            syntax_helper_path: Some("examples/syntax_helper/rebuilt.shcntx_ru".to_string()),
            configuration_path: None,
            use_guided_discovery: true,
            cache_ttl_seconds: 3600, // 1 —á–∞—Å
            max_cache_size: 10000,   // 10K –∑–∞–ø–∏—Å–µ–π
            verbose_logging: false,
        }
    }
}

// === –ò–ù–¢–ï–†–§–ï–ô–°–´ –ö –ï–î–ò–ù–û–ô –°–ò–°–¢–ï–ú–ï ===

/// LSP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Ç–∏–ø–æ–≤
///
/// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Language Server Protocol
pub struct LspTypeInterface {
    unified_system: Arc<UnifiedTypeSystem>,
}

impl LspTypeInterface {
    pub fn new(unified_system: Arc<UnifiedTypeSystem>) -> Self {
        Self { unified_system }
    }

    /// –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è LSP
    pub async fn resolve_expression(&self, expression: &str) -> TypeResolution {
        self.unified_system.resolve_expression(expression).await
    }

    /// –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è LSP
    pub async fn get_completions(&self, expression: &str) -> Vec<CompletionItem> {
        self.unified_system.get_completions(expression).await
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    pub async fn get_variable_type(&self, variable_name: &str, _context: &str) -> TypeResolution {
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        self.unified_system.resolve_expression(variable_name).await
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–∏–ø–æ–≤ –¥–ª—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
    pub async fn check_assignment_compatibility(
        &self,
        _from_type: &TypeResolution,
        _to_type: &TypeResolution,
    ) -> bool {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        true
    }
}

/// –í–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Ç–∏–ø–æ–≤
///
/// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
pub struct WebTypeInterface {
    unified_system: Arc<UnifiedTypeSystem>,
}

impl WebTypeInterface {
    pub fn new(unified_system: Arc<UnifiedTypeSystem>) -> Self {
        Self { unified_system }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    pub async fn get_all_types_for_display(&self) -> Vec<TypeDisplayInfo> {
        let all_resolutions = self.unified_system.get_all_type_resolutions().await;

        all_resolutions
            .into_iter()
            .map(|(name, resolution)| TypeDisplayInfo::from_resolution(name, resolution))
            .collect()
    }

    /// –ù–∞–π—Ç–∏ —Ç–∏–ø—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
    pub async fn search_types(&self, query: &str) -> Vec<TypeDisplayInfo> {
        let matching_resolutions = self.unified_system.find_types_by_pattern(query).await;

        matching_resolutions
            .into_iter()
            .enumerate()
            .map(|(i, resolution)| {
                TypeDisplayInfo::from_resolution(format!("search_result_{}", i), resolution)
            })
            .collect()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ
    pub async fn get_type_details(&self, type_id: &str) -> Option<TypeDetailedInfo> {
        if let Some(resolution) = self.unified_system.get_type_by_id(type_id).await {
            Some(TypeDetailedInfo::from_resolution(
                type_id.to_string(),
                resolution,
            ))
        } else {
            None
        }
    }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
#[derive(Debug, Clone)]
pub struct TypeDisplayInfo {
    pub id: String,
    pub name: String,
    pub category: String,
    pub description: String,
    pub certainty: Certainty,
    pub source: ResolutionSource,
    pub available_facets: Vec<FacetKind>,
}

impl TypeDisplayInfo {
    pub fn from_resolution(id: String, resolution: TypeResolution) -> Self {
        let (name, category) = match &resolution.result {
            ResolutionResult::Concrete(ConcreteType::Platform(platform_type)) => {
                (platform_type.name.clone(), "Platform".to_string())
            }
            ResolutionResult::Concrete(ConcreteType::Configuration(config_type)) => {
                (config_type.name.clone(), format!("{:?}", config_type.kind))
            }
            ResolutionResult::Concrete(ConcreteType::Primitive(primitive)) => {
                (format!("{:?}", primitive), "Primitive".to_string())
            }
            _ => ("Unknown".to_string(), "Unknown".to_string()),
        };

        Self {
            id,
            name: name.clone(),
            category,
            description: format!("Type: {} (certainty: {:?})", name, resolution.certainty),
            certainty: resolution.certainty,
            source: resolution.source,
            available_facets: resolution.available_facets,
        }
    }
}

/// –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ
#[derive(Debug, Clone)]
pub struct TypeDetailedInfo {
    pub id: String,
    pub name: String,
    pub full_resolution: TypeResolution,
    pub methods: Vec<String>,
    pub properties: Vec<String>,
    pub facets: Vec<FacetKind>,
}

impl TypeDetailedInfo {
    pub fn from_resolution(id: String, resolution: TypeResolution) -> Self {
        let name = match &resolution.result {
            ResolutionResult::Concrete(ConcreteType::Platform(platform_type)) => {
                platform_type.name.clone()
            }
            ResolutionResult::Concrete(ConcreteType::Configuration(config_type)) => {
                config_type.name.clone()
            }
            _ => "Unknown".to_string(),
        };

        let methods = match &resolution.result {
            ResolutionResult::Concrete(ConcreteType::Platform(platform_type)) => platform_type
                .methods
                .iter()
                .map(|m| m.name.clone())
                .collect(),
            ResolutionResult::Concrete(ConcreteType::Configuration(config_type)) => config_type
                .attributes
                .iter()
                .map(|a| a.name.clone())
                .collect(),
            _ => Vec::new(),
        };

        let properties = match &resolution.result {
            ResolutionResult::Concrete(ConcreteType::Platform(platform_type)) => platform_type
                .properties
                .iter()
                .map(|p| p.name.clone())
                .collect(),
            _ => Vec::new(),
        };

        Self {
            id,
            name,
            full_resolution: resolution.clone(),
            methods,
            properties,
            facets: resolution.available_facets,
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_unified_type_system_creation() {
        let system = UnifiedTypeSystem::with_defaults();
        let stats = system.get_statistics().await;

        assert_eq!(stats.total_resolutions, 0);
        assert_eq!(stats.resolution_requests, 0);
    }

    #[tokio::test]
    async fn test_lsp_interface() {
        let system = Arc::new(UnifiedTypeSystem::with_defaults());
        let lsp_interface = LspTypeInterface::new(system.clone());

        // –¢–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        let resolution = lsp_interface.resolve_expression("–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π").await;
        assert_ne!(resolution.certainty, Certainty::Known); // –ë–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç Unknown/Inferred

        // –¢–µ—Å—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        let completions = lsp_interface.get_completions("–¢–∞–±–ª–∏").await;
        // –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å 0 –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    }

    #[tokio::test]
    async fn test_web_interface() {
        let system = Arc::new(UnifiedTypeSystem::with_defaults());
        let web_interface = WebTypeInterface::new(system.clone());

        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        let display_types = web_interface.get_all_types_for_display().await;
        // –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π

        // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        let search_results = web_interface.search_types("–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π").await;
        // –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    }
}
