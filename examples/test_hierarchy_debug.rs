use anyhow::Result;
use bsl_gradual_types::documentation::{
    core::{BslDocumentationSystem, DocumentationConfig},
};

/// –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç–∏–ø–æ–≤
#[tokio::main]
async fn main() -> Result<()> {
    println!("üîç DEBUG: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç–∏–ø–æ–≤");
    println!("{}", "=".repeat(60));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    let documentation_system = BslDocumentationSystem::new();
    let config = DocumentationConfig::default();
    documentation_system.initialize(config).await?;

    // –ü–æ–ª—É—á–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é
    let hierarchy = documentation_system.get_type_hierarchy().await?;
    
    println!("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("   ‚Ä¢ –ö–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}", hierarchy.root_categories.len());
    
    for (i, category) in hierarchy.root_categories.iter().enumerate() {
        println!("\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {}: '{}'", i + 1, category.name);
        println!("   ‚Ä¢ –î–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {}", category.children.len());
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for (j, child) in category.children.iter().take(10).enumerate() {
            match child {
                bsl_gradual_types::documentation::core::hierarchy::DocumentationNode::SubCategory(sub_cat) => {
                    println!("   ‚îî‚îÄ [{}] üìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{}' ({} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)", 
                        j + 1, sub_cat.name, sub_cat.children.len());
                },
                bsl_gradual_types::documentation::core::hierarchy::DocumentationNode::PlatformType(platform_type) => {
                    println!("   ‚îî‚îÄ [{}] üîß –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π —Ç–∏–ø: '{}' (–º–µ—Ç–æ–¥–æ–≤: {}, —Å–≤–æ–π—Å—Ç–≤: {})", 
                        j + 1, 
                        platform_type.base_info.russian_name,
                        platform_type.base_info.methods.len(),
                        platform_type.base_info.properties.len()
                    );
                },
                bsl_gradual_types::documentation::core::hierarchy::DocumentationNode::ConfigurationType(config_type) => {
                    println!("   ‚îî‚îÄ [{}] ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–∏–ø: '{}'", 
                        j + 1, config_type.base_info.russian_name);
                },
                _ => {
                    println!("   ‚îî‚îÄ [{}] ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–∑–ª–∞", j + 1);
                }
            }
        }
        
        if category.children.len() > 10 {
            println!("   ‚îî‚îÄ ... –∏ –µ—â–µ {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", category.children.len() - 10);
        }
    }
    
    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    let total_elements: usize = hierarchy.root_categories.iter()
        .map(|cat| cat.children.len())
        .sum();
    
    println!("\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("   ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏: {}", total_elements);
    println!("   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {:.1}", 
        total_elements as f32 / hierarchy.root_categories.len() as f32);

    Ok(())
}