//! CLI —Ç–µ—Å—Ç –¥–ª—è Configuration-guided Discovery –ø–∞—Ä—Å–µ—Ä–∞

use anyhow::Result;
use bsl_gradual_types::adapters::config_parser_guided_discovery::ConfigurationGuidedParser;
use bsl_gradual_types::core::platform_resolver::PlatformTypeResolver;
use clap::Parser;

#[derive(Parser, Debug)]
#[command(name = "test-guided-discovery")]
#[command(about = "CLI —Ç–µ—Å—Ç –¥–ª—è Configuration-guided Discovery –ø–∞—Ä—Å–µ—Ä–∞")]
struct Args {
    /// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Å–æ–¥–µ—Ä–∂–∞—â–µ–π Configuration.xml)
    config_path: String,

    /// Verbose –≤—ã–≤–æ–¥
    #[arg(short, long)]
    verbose: bool,

    /// –¢–æ–ª—å–∫–æ –ø–∞—Ä—Å–µ—Ä (–±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å PlatformTypeResolver)
    #[arg(long)]
    parser_only: bool,

    /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    #[arg(long)]
    stats: bool,
}

fn main() -> Result<()> {
    let args = Args::parse();

    println!("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Configuration-guided Discovery –ø–∞—Ä—Å–µ—Ä–∞");
    println!("üìÅ –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", args.config_path);

    if args.parser_only {
        test_parser_only(&args)?;
    } else {
        test_with_integration(&args)?;
    }

    Ok(())
}

fn test_parser_only(args: &Args) -> Result<()> {
    println!("\n=== üîß –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–µ—Ä–∞ ===");

    let mut guided_parser = ConfigurationGuidedParser::new(&args.config_path);

    if args.verbose {
        println!("‚úÖ ConfigurationGuidedParser —Å–æ–∑–¥–∞–Ω");
    }

    let start_time = std::time::Instant::now();
    let config_types = guided_parser.parse_with_configuration_guide()?;
    let elapsed = start_time.elapsed();

    println!("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {:?}", elapsed);
    println!("üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤: {}", config_types.len());

    if args.stats {
        println!("\nüìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        let mut catalog_count = 0;
        let mut document_count = 0;
        let mut enum_count = 0;
        let mut register_count = 0;
        let mut other_count = 0;

        for type_resolution in &config_types {
            use bsl_gradual_types::core::types::{ConcreteType, ResolutionResult};

            if let ResolutionResult::Concrete(ConcreteType::Configuration(config)) =
                &type_resolution.result
            {
                match config.kind {
                    bsl_gradual_types::core::types::MetadataKind::Catalog => catalog_count += 1,
                    bsl_gradual_types::core::types::MetadataKind::Document => document_count += 1,
                    bsl_gradual_types::core::types::MetadataKind::Enum => enum_count += 1,
                    bsl_gradual_types::core::types::MetadataKind::Register => register_count += 1,
                    _ => other_count += 1,
                }

                if args.verbose {
                    println!(
                        "  - {:?}: {} (–∞—Ç—Ä–∏–±—É—Ç–æ–≤: {})",
                        config.kind,
                        config.name,
                        config.attributes.len()
                    );
                }
            }
        }

        println!("  üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {}", catalog_count);
        println!("  üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {}", document_count);
        println!("  üî¢ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è: {}", enum_count);
        println!("  üìä –†–µ–≥–∏—Å—Ç—Ä—ã: {}", register_count);
        println!("  ‚ùì –î—Ä—É–≥–æ–µ: {}", other_count);
    }

    Ok(())
}

fn test_with_integration(args: &Args) -> Result<()> {
    println!("\n=== üîó –¢–µ—Å—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ PlatformTypeResolver ===");

    let start_time = std::time::Instant::now();
    let resolver = PlatformTypeResolver::with_guided_config(&args.config_path)?;
    let elapsed = start_time.elapsed();

    println!(
        "‚úÖ PlatformTypeResolver —Å guided discovery —Å–æ–∑–¥–∞–Ω –∑–∞ {:?}",
        elapsed
    );
    println!(
        "üìä Platform globals: {}",
        resolver.get_platform_globals_count()
    );

    // –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö platform globals
    let globals_to_test = vec![
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏",
        "–î–æ–∫—É–º–µ–Ω—Ç—ã",
        "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è",
        "Catalogs",
        "Documents",
        "Enums",
    ];

    println!("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ platform globals:");
    for global in &globals_to_test {
        if resolver.has_platform_global(global) {
            println!("  ‚úÖ {}", global);
        } else {
            println!("  ‚ùå {}", global);
        }
    }

    if args.stats {
        println!("\nüìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ resolver'–∞:");
        println!(
            "  - Platform globals: {}",
            resolver.get_platform_globals_count()
        );

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
    }

    Ok(())
}
